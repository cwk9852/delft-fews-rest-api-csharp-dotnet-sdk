/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ArchiveApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ArchiveApiTests : IDisposable
    {
        private ArchiveApi instance;

        public ArchiveApiTests()
        {
            instance = new ArchiveApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ArchiveApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ArchiveApi
            //Assert.IsType<ArchiveApi>(instance);
        }

        /// <summary>
        /// Test ArchiveAreas
        /// </summary>
        [Fact]
        public void ArchiveAreasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentFormat = null;
            //string documentVersion = null;
            //var response = instance.ArchiveAreas(documentFormat, documentVersion);
            //Assert.IsType<PiRestArchiveAreas>(response);
        }

        /// <summary>
        /// Test ArchiveAttributes
        /// </summary>
        [Fact]
        public void ArchiveAttributesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parameterIds = null;
            //string locationIds = null;
            //List<string> moduleInstanceIds = null;
            //List<string> areaIds = null;
            //List<string> sourceIds = null;
            //List<string> attributes = null;
            //string documentFormat = null;
            //string documentVersion = null;
            //var response = instance.ArchiveAttributes(parameterIds, locationIds, moduleInstanceIds, areaIds, sourceIds, attributes, documentFormat, documentVersion);
            //Assert.IsType<PiRestArchiveAttributes>(response);
        }

        /// <summary>
        /// Test ArchiveLocations
        /// </summary>
        [Fact]
        public void ArchiveLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> parameterIds = null;
            //List<string> moduleInstanceIds = null;
            //List<string> areaIds = null;
            //List<string> sourceIds = null;
            //string documentFormat = null;
            //string documentVersion = null;
            //var response = instance.ArchiveLocations(parameterIds, moduleInstanceIds, areaIds, sourceIds, documentFormat, documentVersion);
            //Assert.IsType<ArchiveLocations200Response>(response);
        }

        /// <summary>
        /// Test ArchiveModuleinstances
        /// </summary>
        [Fact]
        public void ArchiveModuleinstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> locationIds = null;
            //List<string> parameterIds = null;
            //List<string> areaIds = null;
            //List<string> sourceIds = null;
            //string documentFormat = null;
            //string documentVersion = null;
            //var response = instance.ArchiveModuleinstances(locationIds, parameterIds, areaIds, sourceIds, documentFormat, documentVersion);
            //Assert.IsType<PiRestModuleinstances>(response);
        }

        /// <summary>
        /// Test ArchiveNetcdfstorageforecasts
        /// </summary>
        [Fact]
        public void ArchiveNetcdfstorageforecastsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime startTime = null;
            //DateTime endTime = null;
            //List<string> requestedAttributes = null;
            //decimal? forecastCount = null;
            //string documentFormat = null;
            //string documentVersion = null;
            //var response = instance.ArchiveNetcdfstorageforecasts(startTime, endTime, requestedAttributes, forecastCount, documentFormat, documentVersion);
            //Assert.IsType<PiRestArchiveExternalnetcdfstorageforecasts>(response);
        }

        /// <summary>
        /// Test ArchiveParameters
        /// </summary>
        [Fact]
        public void ArchiveParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> locationIds = null;
            //List<string> moduleInstanceIds = null;
            //List<string> areaIds = null;
            //List<string> sourceIds = null;
            //string documentFormat = null;
            //string documentVersion = null;
            //var response = instance.ArchiveParameters(locationIds, moduleInstanceIds, areaIds, sourceIds, documentFormat, documentVersion);
            //Assert.IsType<ArchiveParameters200Response>(response);
        }

        /// <summary>
        /// Test ArchiveProducts
        /// </summary>
        [Fact]
        public void ArchiveProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sourceId = null;
            //string areaId = null;
            //decimal? productCount = null;
            //DateTime? startTime = null;
            //DateTime? endTime = null;
            //DateTime? startForecastTime = null;
            //DateTime? endForecastTime = null;
            //DateTime? productFileName = null;
            //string documentFormat = null;
            //var response = instance.ArchiveProducts(sourceId, areaId, productCount, startTime, endTime, startForecastTime, endForecastTime, productFileName, documentFormat);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ArchiveProductsId
        /// </summary>
        [Fact]
        public void ArchiveProductsIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string relativePath = null;
            //string documentFormat = null;
            //var response = instance.ArchiveProductsId(relativePath, documentFormat);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ArchiveProductsmetadata
        /// </summary>
        [Fact]
        public void ArchiveProductsmetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? startForecastTime = null;
            //DateTime? endForecastTime = null;
            //string documentFormat = null;
            //string documentVersion = null;
            //var response = instance.ArchiveProductsmetadata(startForecastTime, endForecastTime, documentFormat, documentVersion);
            //Assert.IsType<PiRestArchiveProductsmetadata>(response);
        }

        /// <summary>
        /// Test ArchiveSources
        /// </summary>
        [Fact]
        public void ArchiveSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentFormat = null;
            //string documentVersion = null;
            //var response = instance.ArchiveSources(documentFormat, documentVersion);
            //Assert.IsType<PiRestArchiveSources>(response);
        }

        /// <summary>
        /// Test PostArchiveProducts
        /// </summary>
        [Fact]
        public void PostArchiveProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? timeZero = null;
            //string areaId = null;
            //string sourceId = null;
            //string subFolder = null;
            //string file = null;
            //var response = instance.PostArchiveProducts(timeZero, areaId, sourceId, subFolder, file);
            //Assert.IsType<string>(response);
        }
    }
}
