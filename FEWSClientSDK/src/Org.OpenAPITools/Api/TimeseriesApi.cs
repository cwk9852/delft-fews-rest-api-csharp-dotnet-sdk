/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeseriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all ensemble member ids for one or more ensemble Ids
        /// </summary>
        /// <remarks>
        /// Get all ensemble member ids for one or more ensemble Ids. The available member ids depend on an up-to-date index. This is run once a day on a forecasting shell server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ensembleIds">One or more ensemble ids</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestTimeseriesEnsemblesMembers</returns>
        PiRestTimeseriesEnsemblesMembers EnsemblesMembers(List<string> ensembleIds, string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get all ensemble member ids for one or more ensemble Ids
        /// </summary>
        /// <remarks>
        /// Get all ensemble member ids for one or more ensemble Ids. The available member ids depend on an up-to-date index. This is run once a day on a forecasting shell server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ensembleIds">One or more ensemble ids</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestTimeseriesEnsemblesMembers</returns>
        ApiResponse<PiRestTimeseriesEnsemblesMembers> EnsemblesMembersWithHttpInfo(List<string> ensembleIds, string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters
        /// </summary>
        /// <remarks>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disable in the FewsPiService.properties to allow this functionality.&lt;p&gt;The timeseries you post to the rest service should match one of the time series sets in the default filter or one of its sub filters. To make sure you only write time series for a specific filter, you can pass a filterId with the POST request. Only timeseries that have timeseries sets that are configured in that filter (or one of its sub filters) will be accepted. If no filterId is used, all time series will be accepted that are configured in the default filter. Writing the time series works similar to importing time series using the pi.xml format using the \&quot;PI\&quot; import type. See also: &lt;a target&#x3D;&#39;_new&#39; href&#x3D;&#39;https://publicwiki.deltares.nl/x/uIGE&#39;&gt;Delft-Fews Published Interface timeseries Format (PI) Import&lt;/a&gt;  The &#39;convertDatum&#39; argument is to allow timeseries that support a datum to have their values converted to a value relative to the location height. If values are already relative to location then enter FALSE or omit.  In case a time series already exists in the database, the time series will be overwritten by the ones that are posted. For forecast time series with different forecastDates a new time series will be added. The latter can be achieved by providing a forecastDate element in the POST request, e.g. &lt;forecastDate date&#x3D;\&quot;2013-01-01\&quot; time&#x3D;\&quot;00:00:00\&quot;/&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="piTimeSeriesXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_timeseries.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object Posttimeseries(string filterId = default(string), string convertDatum = default(string), string piTimeSeriesXmlContent = default(string), int operationIndex = 0);

        /// <summary>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters
        /// </summary>
        /// <remarks>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disable in the FewsPiService.properties to allow this functionality.&lt;p&gt;The timeseries you post to the rest service should match one of the time series sets in the default filter or one of its sub filters. To make sure you only write time series for a specific filter, you can pass a filterId with the POST request. Only timeseries that have timeseries sets that are configured in that filter (or one of its sub filters) will be accepted. If no filterId is used, all time series will be accepted that are configured in the default filter. Writing the time series works similar to importing time series using the pi.xml format using the \&quot;PI\&quot; import type. See also: &lt;a target&#x3D;&#39;_new&#39; href&#x3D;&#39;https://publicwiki.deltares.nl/x/uIGE&#39;&gt;Delft-Fews Published Interface timeseries Format (PI) Import&lt;/a&gt;  The &#39;convertDatum&#39; argument is to allow timeseries that support a datum to have their values converted to a value relative to the location height. If values are already relative to location then enter FALSE or omit.  In case a time series already exists in the database, the time series will be overwritten by the ones that are posted. For forecast time series with different forecastDates a new time series will be added. The latter can be achieved by providing a forecastDate element in the POST request, e.g. &lt;forecastDate date&#x3D;\&quot;2013-01-01\&quot; time&#x3D;\&quot;00:00:00\&quot;/&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="piTimeSeriesXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_timeseries.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PosttimeseriesWithHttpInfo(string filterId = default(string), string convertDatum = default(string), string piTimeSeriesXmlContent = default(string), int operationIndex = 0);
        /// <summary>
        /// Get timeseries that are part of the default filter
        /// </summary>
        /// <remarks>
        /// Get timeseries that are part of the default filter.&lt;p&gt;&lt;h2&gt;parameters&lt;/h2&gt; Not all parameters can be combined. The following combinations are commonly used valid combinations of parameters. The main way to filter timeseries is by using filter ids or taskrun ids.&lt;p&gt; &lt;table border&#x3D;&#39;1&#39;&gt;     &lt;tr&gt;         &lt;th&gt;Use cases&lt;/th&gt;         &lt;th&gt;filterId&lt;/th&gt;         &lt;th&gt;taskRunIds&lt;/th&gt;         &lt;th&gt;startTime, endTime&lt;/th&gt;         &lt;th&gt;startCreationTime, endCreationTime&lt;/th&gt;         &lt;th&gt;startForecastTime, endForecastTime&lt;/th&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. The requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get all time series created by one or more taskRuns. All time steps of the matching time series are returned.&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get the time series created by a taskrun and apply a filter from the Filters configuration. startTime and endTime cannot be specified. The complete time series will be returned. Since             2020.01.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series and return time steps that are in the startTime and endTime range. If the startTime or endTime doesn&#39;t match a timestamp of the time series, the closest time step before startTime and/or after endTime is returned as well.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Only time series created during the startCreationTime and endCreationTime period will be returned. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. Only return timesteps in the startTime and endTime range.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. Only return timesteps in the startTime and             endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period that were created in the creation time period.             Only return time steps in the startTime and endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. All time steps of the matching time series are returned. (before 2020.01 startTime and             endTime had to be specified).         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period and with external forecast times in the startForecastTime and endForecastTime period. All             time steps of the matching time series are returned..         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;  &lt;h2&gt;no data vs no time series&lt;/h2&gt; If a timeseries query has matching timeseries sets a http 200 code will be returned and the headers of all matching time series sets will be returned. If there is any data for the requested period, the headers will be followed by the actual events that contain the data. So even if no data is available at all the headers are always returned.  It is also possible that a timeseries query doesn&#39;t match any time series sets at all. This is seen as in invalid request and will result in a HTTP 400 response code. The following are examples of use cases where this might occur: &lt;ul&gt;     &lt;li&gt;query parameters don&#39;t occur in filter. For example: the default filter has subfilters: filterA and filterB. filterA contains timeseries sets with module instance id moduleInstanceA and filterB contains timeseries sets with module instance id moduleInstanceB.         If a timeseries query is done with parameters: filterId&#x3D;filterA and moduleInstanceId&#x3D;moduleInstanceB, this will return in a HTTP 400 response&lt;/li&gt;     &lt;li&gt;no timeseries for creation period. For example: if a query is using startCreationTime and endCreationTime and no time series have been produced during that period, this is seen as an invalid request and a HTTP 400 response is returned.&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;availability of new timeseries&lt;/h2&gt; When new timeseries have been created, it can take some time before they can be found by the WebServices. The web services updates its indexes every second (every five seconds before 2023.01). Once the indexes have been updated, newly created time series can be found. So it typically can take a few seconds before newly created time series can be found.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="qualifierIds">One or more qualifier ids. Subset of qualifiers for which to retrieve time series. All time series that have any of the specified qualifierIds will be returned. To indicate that no qualifier is available, use qualifierIds: \&quot;none\&quot; (optional)</param>
        /// <param name="taskRunIds">One or more taskRunIds (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="startCreationTime">Creation start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endCreationTime">Creation end time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="forecastCount">Number of forecasts that will be searched for when startForecastTime and endForecastTime have been specified. Default 1 (optional)</param>
        /// <param name="startForecastTime">Start time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts up to the endForecastTime will be used as search period. (optional)</param>
        /// <param name="endForecastTime">End time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts starting from the startForecastTime will be used as search period. (optional)</param>
        /// <param name="externalForecastTimes">One or more external forecast times. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Ensemble Id. Ensemble identifier of time series (optional)</param>
        /// <param name="ensembleMemberId">Ensemble MemberId. Ensemble member identifier of time series. Only allowed in combination with ensembleId &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="timeStepId">Time Step Id. Filter time series by the time step that has been configured in the TimeSteps.xml. N.B.: It is not required to use the timeStepId&#39;s in the filter configurations to be able to use them as long as they have been configured in the TimeSteps.xml. &lt;i&gt;Since: 2018.02&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="exportIdMap">Name of the id map that should be used as exportIdMap. This parameter will overrule a configured exportIdMap. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="matchAsQualifierSet">Since 2023.01. If this option is to true the qualifier from time series selected from the filter must contain all of the given qualifiers ids and only consist only of the given qualifiers ids (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT, BINARY,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Timeseries200Response</returns>
        Timeseries200Response Timeseries(string filterId = default(string), List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> qualifierIds = default(List<string>), List<string> taskRunIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startCreationTime = default(DateTime?), DateTime? endCreationTime = default(DateTime?), decimal? forecastCount = default(decimal?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), List<string> externalForecastTimes = default(List<string>), string ensembleId = default(string), string ensembleMemberId = default(string), string timeStepId = default(string), decimal? thinning = default(decimal?), string exportIdMap = default(string), string matchAsQualifierSet = default(string), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get timeseries that are part of the default filter
        /// </summary>
        /// <remarks>
        /// Get timeseries that are part of the default filter.&lt;p&gt;&lt;h2&gt;parameters&lt;/h2&gt; Not all parameters can be combined. The following combinations are commonly used valid combinations of parameters. The main way to filter timeseries is by using filter ids or taskrun ids.&lt;p&gt; &lt;table border&#x3D;&#39;1&#39;&gt;     &lt;tr&gt;         &lt;th&gt;Use cases&lt;/th&gt;         &lt;th&gt;filterId&lt;/th&gt;         &lt;th&gt;taskRunIds&lt;/th&gt;         &lt;th&gt;startTime, endTime&lt;/th&gt;         &lt;th&gt;startCreationTime, endCreationTime&lt;/th&gt;         &lt;th&gt;startForecastTime, endForecastTime&lt;/th&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. The requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get all time series created by one or more taskRuns. All time steps of the matching time series are returned.&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get the time series created by a taskrun and apply a filter from the Filters configuration. startTime and endTime cannot be specified. The complete time series will be returned. Since             2020.01.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series and return time steps that are in the startTime and endTime range. If the startTime or endTime doesn&#39;t match a timestamp of the time series, the closest time step before startTime and/or after endTime is returned as well.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Only time series created during the startCreationTime and endCreationTime period will be returned. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. Only return timesteps in the startTime and endTime range.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. Only return timesteps in the startTime and             endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period that were created in the creation time period.             Only return time steps in the startTime and endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. All time steps of the matching time series are returned. (before 2020.01 startTime and             endTime had to be specified).         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period and with external forecast times in the startForecastTime and endForecastTime period. All             time steps of the matching time series are returned..         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;  &lt;h2&gt;no data vs no time series&lt;/h2&gt; If a timeseries query has matching timeseries sets a http 200 code will be returned and the headers of all matching time series sets will be returned. If there is any data for the requested period, the headers will be followed by the actual events that contain the data. So even if no data is available at all the headers are always returned.  It is also possible that a timeseries query doesn&#39;t match any time series sets at all. This is seen as in invalid request and will result in a HTTP 400 response code. The following are examples of use cases where this might occur: &lt;ul&gt;     &lt;li&gt;query parameters don&#39;t occur in filter. For example: the default filter has subfilters: filterA and filterB. filterA contains timeseries sets with module instance id moduleInstanceA and filterB contains timeseries sets with module instance id moduleInstanceB.         If a timeseries query is done with parameters: filterId&#x3D;filterA and moduleInstanceId&#x3D;moduleInstanceB, this will return in a HTTP 400 response&lt;/li&gt;     &lt;li&gt;no timeseries for creation period. For example: if a query is using startCreationTime and endCreationTime and no time series have been produced during that period, this is seen as an invalid request and a HTTP 400 response is returned.&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;availability of new timeseries&lt;/h2&gt; When new timeseries have been created, it can take some time before they can be found by the WebServices. The web services updates its indexes every second (every five seconds before 2023.01). Once the indexes have been updated, newly created time series can be found. So it typically can take a few seconds before newly created time series can be found.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="qualifierIds">One or more qualifier ids. Subset of qualifiers for which to retrieve time series. All time series that have any of the specified qualifierIds will be returned. To indicate that no qualifier is available, use qualifierIds: \&quot;none\&quot; (optional)</param>
        /// <param name="taskRunIds">One or more taskRunIds (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="startCreationTime">Creation start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endCreationTime">Creation end time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="forecastCount">Number of forecasts that will be searched for when startForecastTime and endForecastTime have been specified. Default 1 (optional)</param>
        /// <param name="startForecastTime">Start time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts up to the endForecastTime will be used as search period. (optional)</param>
        /// <param name="endForecastTime">End time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts starting from the startForecastTime will be used as search period. (optional)</param>
        /// <param name="externalForecastTimes">One or more external forecast times. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Ensemble Id. Ensemble identifier of time series (optional)</param>
        /// <param name="ensembleMemberId">Ensemble MemberId. Ensemble member identifier of time series. Only allowed in combination with ensembleId &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="timeStepId">Time Step Id. Filter time series by the time step that has been configured in the TimeSteps.xml. N.B.: It is not required to use the timeStepId&#39;s in the filter configurations to be able to use them as long as they have been configured in the TimeSteps.xml. &lt;i&gt;Since: 2018.02&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="exportIdMap">Name of the id map that should be used as exportIdMap. This parameter will overrule a configured exportIdMap. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="matchAsQualifierSet">Since 2023.01. If this option is to true the qualifier from time series selected from the filter must contain all of the given qualifiers ids and only consist only of the given qualifiers ids (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT, BINARY,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Timeseries200Response</returns>
        ApiResponse<Timeseries200Response> TimeseriesWithHttpInfo(string filterId = default(string), List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> qualifierIds = default(List<string>), List<string> taskRunIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startCreationTime = default(DateTime?), DateTime? endCreationTime = default(DateTime?), decimal? forecastCount = default(decimal?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), List<string> externalForecastTimes = default(List<string>), string ensembleId = default(string), string ensembleMemberId = default(string), string timeStepId = default(string), decimal? thinning = default(decimal?), string exportIdMap = default(string), string matchAsQualifierSet = default(string), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Timeseries are filtered by the plotId from the DisplayGroups
        /// </summary>
        /// <remarks>
        /// Timeseries are filtered by the plotId from the DisplayGroups.xml configuration in the SystemConfigFiles folder.&lt;p&gt;The TimeSeriesSets configured for the plotId will be used to filter the timeSeries. The line, area and clusteredBars elements are used when determining the relevant TimeSeriesSets. In case of forecasts, this means only the current forecast will be retrieved. It is not possible to request older forecasts. If no line, area or clusteredBars elements are used in the displayGroups.xml configuration, the TimeSeriesSets will not be applied.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plotId">Plot Id</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Timeseries200Response</returns>
        Timeseries200Response TimeseriesDisplaygroups(string plotId, List<string> locationIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), decimal? thinning = default(decimal?), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyHeaders = default(string), string onlyManualEdits = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Timeseries are filtered by the plotId from the DisplayGroups
        /// </summary>
        /// <remarks>
        /// Timeseries are filtered by the plotId from the DisplayGroups.xml configuration in the SystemConfigFiles folder.&lt;p&gt;The TimeSeriesSets configured for the plotId will be used to filter the timeSeries. The line, area and clusteredBars elements are used when determining the relevant TimeSeriesSets. In case of forecasts, this means only the current forecast will be retrieved. It is not possible to request older forecasts. If no line, area or clusteredBars elements are used in the displayGroups.xml configuration, the TimeSeriesSets will not be applied.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plotId">Plot Id</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Timeseries200Response</returns>
        ApiResponse<Timeseries200Response> TimeseriesDisplaygroupsWithHttpInfo(string plotId, List<string> locationIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), decimal? thinning = default(decimal?), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyHeaders = default(string), string onlyManualEdits = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get the timeseries containing the data from a grid cell for a request period
        /// </summary>
        /// <remarks>
        /// Get the timeseries containing the data from a grid cell for a request period. The grid is specified by passing a layerId.&lt;p&gt;The grid cell is determined by specifying a x and y coordinate and a bounding box. Currenly only EPSG:3857 is supported for the x,y, and bounding box coordinates. At least a layer, startTime, endTime, x,y and bounding box are required. The timeseries/grid endpoint is intended to be used together with the Delf-FEWS WMS service. Every layer that is provided by the WMS service, can be used with this endpoint.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">bounding box of map that is viewed in , separated EPSG:3857 format. The order of the coordinates is as follows: bottom left X, bottom left Y, top right X, top right Y.</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the start time doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned.  Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="layers"> layerd id (only one layer is supported and required) that matches the gridPlot id as configured in the gridDisplay. Every gridPlot that has been configured in the grid display configuration represents a WMS layer.</param>
        /// <param name="x">x position on the map in EPSG:3857 format.</param>
        /// <param name="y">y position on the map in EPSG:3857 format.</param>
        /// <param name="externalForecastTime">Time value of external forecast time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Used in combination with ensembleMemberId to identify a unique ensemble. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="ensembleMemberId">Used in combination with ensembleId to identify a unique ensemble &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="elevation">Used for 3d data, like for example water depth, to get the timeseries of a grid point at a specific elevation. &lt;i&gt;Since:  2020.01&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values. (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showVerticalProfile">Show vertical profile in case of 3D data. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. &lt;i&gt;Since: 2019.02&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Timeseries200Response</returns>
        Timeseries200Response Timeseriesgrid(string bbox, DateTime startTime, DateTime endTime, string layers, double x, double y, DateTime? externalForecastTime = default(DateTime?), string ensembleId = default(string), string ensembleMemberId = default(string), double? elevation = default(double?), decimal? thinning = default(decimal?), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showVerticalProfile = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get the timeseries containing the data from a grid cell for a request period
        /// </summary>
        /// <remarks>
        /// Get the timeseries containing the data from a grid cell for a request period. The grid is specified by passing a layerId.&lt;p&gt;The grid cell is determined by specifying a x and y coordinate and a bounding box. Currenly only EPSG:3857 is supported for the x,y, and bounding box coordinates. At least a layer, startTime, endTime, x,y and bounding box are required. The timeseries/grid endpoint is intended to be used together with the Delf-FEWS WMS service. Every layer that is provided by the WMS service, can be used with this endpoint.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">bounding box of map that is viewed in , separated EPSG:3857 format. The order of the coordinates is as follows: bottom left X, bottom left Y, top right X, top right Y.</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the start time doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned.  Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="layers"> layerd id (only one layer is supported and required) that matches the gridPlot id as configured in the gridDisplay. Every gridPlot that has been configured in the grid display configuration represents a WMS layer.</param>
        /// <param name="x">x position on the map in EPSG:3857 format.</param>
        /// <param name="y">y position on the map in EPSG:3857 format.</param>
        /// <param name="externalForecastTime">Time value of external forecast time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Used in combination with ensembleMemberId to identify a unique ensemble. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="ensembleMemberId">Used in combination with ensembleId to identify a unique ensemble &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="elevation">Used for 3d data, like for example water depth, to get the timeseries of a grid point at a specific elevation. &lt;i&gt;Since:  2020.01&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values. (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showVerticalProfile">Show vertical profile in case of 3D data. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. &lt;i&gt;Since: 2019.02&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Timeseries200Response</returns>
        ApiResponse<Timeseries200Response> TimeseriesgridWithHttpInfo(string bbox, DateTime startTime, DateTime endTime, string layers, double x, double y, DateTime? externalForecastTime = default(DateTime?), string ensembleId = default(string), string ensembleMemberId = default(string), double? elevation = default(double?), decimal? thinning = default(decimal?), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showVerticalProfile = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeseriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all ensemble member ids for one or more ensemble Ids
        /// </summary>
        /// <remarks>
        /// Get all ensemble member ids for one or more ensemble Ids. The available member ids depend on an up-to-date index. This is run once a day on a forecasting shell server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ensembleIds">One or more ensemble ids</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestTimeseriesEnsemblesMembers</returns>
        System.Threading.Tasks.Task<PiRestTimeseriesEnsemblesMembers> EnsemblesMembersAsync(List<string> ensembleIds, string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all ensemble member ids for one or more ensemble Ids
        /// </summary>
        /// <remarks>
        /// Get all ensemble member ids for one or more ensemble Ids. The available member ids depend on an up-to-date index. This is run once a day on a forecasting shell server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ensembleIds">One or more ensemble ids</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestTimeseriesEnsemblesMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestTimeseriesEnsemblesMembers>> EnsemblesMembersWithHttpInfoAsync(List<string> ensembleIds, string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters
        /// </summary>
        /// <remarks>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disable in the FewsPiService.properties to allow this functionality.&lt;p&gt;The timeseries you post to the rest service should match one of the time series sets in the default filter or one of its sub filters. To make sure you only write time series for a specific filter, you can pass a filterId with the POST request. Only timeseries that have timeseries sets that are configured in that filter (or one of its sub filters) will be accepted. If no filterId is used, all time series will be accepted that are configured in the default filter. Writing the time series works similar to importing time series using the pi.xml format using the \&quot;PI\&quot; import type. See also: &lt;a target&#x3D;&#39;_new&#39; href&#x3D;&#39;https://publicwiki.deltares.nl/x/uIGE&#39;&gt;Delft-Fews Published Interface timeseries Format (PI) Import&lt;/a&gt;  The &#39;convertDatum&#39; argument is to allow timeseries that support a datum to have their values converted to a value relative to the location height. If values are already relative to location then enter FALSE or omit.  In case a time series already exists in the database, the time series will be overwritten by the ones that are posted. For forecast time series with different forecastDates a new time series will be added. The latter can be achieved by providing a forecastDate element in the POST request, e.g. &lt;forecastDate date&#x3D;\&quot;2013-01-01\&quot; time&#x3D;\&quot;00:00:00\&quot;/&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="piTimeSeriesXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_timeseries.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PosttimeseriesAsync(string filterId = default(string), string convertDatum = default(string), string piTimeSeriesXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters
        /// </summary>
        /// <remarks>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disable in the FewsPiService.properties to allow this functionality.&lt;p&gt;The timeseries you post to the rest service should match one of the time series sets in the default filter or one of its sub filters. To make sure you only write time series for a specific filter, you can pass a filterId with the POST request. Only timeseries that have timeseries sets that are configured in that filter (or one of its sub filters) will be accepted. If no filterId is used, all time series will be accepted that are configured in the default filter. Writing the time series works similar to importing time series using the pi.xml format using the \&quot;PI\&quot; import type. See also: &lt;a target&#x3D;&#39;_new&#39; href&#x3D;&#39;https://publicwiki.deltares.nl/x/uIGE&#39;&gt;Delft-Fews Published Interface timeseries Format (PI) Import&lt;/a&gt;  The &#39;convertDatum&#39; argument is to allow timeseries that support a datum to have their values converted to a value relative to the location height. If values are already relative to location then enter FALSE or omit.  In case a time series already exists in the database, the time series will be overwritten by the ones that are posted. For forecast time series with different forecastDates a new time series will be added. The latter can be achieved by providing a forecastDate element in the POST request, e.g. &lt;forecastDate date&#x3D;\&quot;2013-01-01\&quot; time&#x3D;\&quot;00:00:00\&quot;/&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="piTimeSeriesXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_timeseries.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PosttimeseriesWithHttpInfoAsync(string filterId = default(string), string convertDatum = default(string), string piTimeSeriesXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get timeseries that are part of the default filter
        /// </summary>
        /// <remarks>
        /// Get timeseries that are part of the default filter.&lt;p&gt;&lt;h2&gt;parameters&lt;/h2&gt; Not all parameters can be combined. The following combinations are commonly used valid combinations of parameters. The main way to filter timeseries is by using filter ids or taskrun ids.&lt;p&gt; &lt;table border&#x3D;&#39;1&#39;&gt;     &lt;tr&gt;         &lt;th&gt;Use cases&lt;/th&gt;         &lt;th&gt;filterId&lt;/th&gt;         &lt;th&gt;taskRunIds&lt;/th&gt;         &lt;th&gt;startTime, endTime&lt;/th&gt;         &lt;th&gt;startCreationTime, endCreationTime&lt;/th&gt;         &lt;th&gt;startForecastTime, endForecastTime&lt;/th&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. The requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get all time series created by one or more taskRuns. All time steps of the matching time series are returned.&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get the time series created by a taskrun and apply a filter from the Filters configuration. startTime and endTime cannot be specified. The complete time series will be returned. Since             2020.01.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series and return time steps that are in the startTime and endTime range. If the startTime or endTime doesn&#39;t match a timestamp of the time series, the closest time step before startTime and/or after endTime is returned as well.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Only time series created during the startCreationTime and endCreationTime period will be returned. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. Only return timesteps in the startTime and endTime range.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. Only return timesteps in the startTime and             endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period that were created in the creation time period.             Only return time steps in the startTime and endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. All time steps of the matching time series are returned. (before 2020.01 startTime and             endTime had to be specified).         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period and with external forecast times in the startForecastTime and endForecastTime period. All             time steps of the matching time series are returned..         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;  &lt;h2&gt;no data vs no time series&lt;/h2&gt; If a timeseries query has matching timeseries sets a http 200 code will be returned and the headers of all matching time series sets will be returned. If there is any data for the requested period, the headers will be followed by the actual events that contain the data. So even if no data is available at all the headers are always returned.  It is also possible that a timeseries query doesn&#39;t match any time series sets at all. This is seen as in invalid request and will result in a HTTP 400 response code. The following are examples of use cases where this might occur: &lt;ul&gt;     &lt;li&gt;query parameters don&#39;t occur in filter. For example: the default filter has subfilters: filterA and filterB. filterA contains timeseries sets with module instance id moduleInstanceA and filterB contains timeseries sets with module instance id moduleInstanceB.         If a timeseries query is done with parameters: filterId&#x3D;filterA and moduleInstanceId&#x3D;moduleInstanceB, this will return in a HTTP 400 response&lt;/li&gt;     &lt;li&gt;no timeseries for creation period. For example: if a query is using startCreationTime and endCreationTime and no time series have been produced during that period, this is seen as an invalid request and a HTTP 400 response is returned.&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;availability of new timeseries&lt;/h2&gt; When new timeseries have been created, it can take some time before they can be found by the WebServices. The web services updates its indexes every second (every five seconds before 2023.01). Once the indexes have been updated, newly created time series can be found. So it typically can take a few seconds before newly created time series can be found.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="qualifierIds">One or more qualifier ids. Subset of qualifiers for which to retrieve time series. All time series that have any of the specified qualifierIds will be returned. To indicate that no qualifier is available, use qualifierIds: \&quot;none\&quot; (optional)</param>
        /// <param name="taskRunIds">One or more taskRunIds (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="startCreationTime">Creation start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endCreationTime">Creation end time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="forecastCount">Number of forecasts that will be searched for when startForecastTime and endForecastTime have been specified. Default 1 (optional)</param>
        /// <param name="startForecastTime">Start time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts up to the endForecastTime will be used as search period. (optional)</param>
        /// <param name="endForecastTime">End time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts starting from the startForecastTime will be used as search period. (optional)</param>
        /// <param name="externalForecastTimes">One or more external forecast times. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Ensemble Id. Ensemble identifier of time series (optional)</param>
        /// <param name="ensembleMemberId">Ensemble MemberId. Ensemble member identifier of time series. Only allowed in combination with ensembleId &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="timeStepId">Time Step Id. Filter time series by the time step that has been configured in the TimeSteps.xml. N.B.: It is not required to use the timeStepId&#39;s in the filter configurations to be able to use them as long as they have been configured in the TimeSteps.xml. &lt;i&gt;Since: 2018.02&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="exportIdMap">Name of the id map that should be used as exportIdMap. This parameter will overrule a configured exportIdMap. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="matchAsQualifierSet">Since 2023.01. If this option is to true the qualifier from time series selected from the filter must contain all of the given qualifiers ids and only consist only of the given qualifiers ids (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT, BINARY,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Timeseries200Response</returns>
        System.Threading.Tasks.Task<Timeseries200Response> TimeseriesAsync(string filterId = default(string), List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> qualifierIds = default(List<string>), List<string> taskRunIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startCreationTime = default(DateTime?), DateTime? endCreationTime = default(DateTime?), decimal? forecastCount = default(decimal?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), List<string> externalForecastTimes = default(List<string>), string ensembleId = default(string), string ensembleMemberId = default(string), string timeStepId = default(string), decimal? thinning = default(decimal?), string exportIdMap = default(string), string matchAsQualifierSet = default(string), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get timeseries that are part of the default filter
        /// </summary>
        /// <remarks>
        /// Get timeseries that are part of the default filter.&lt;p&gt;&lt;h2&gt;parameters&lt;/h2&gt; Not all parameters can be combined. The following combinations are commonly used valid combinations of parameters. The main way to filter timeseries is by using filter ids or taskrun ids.&lt;p&gt; &lt;table border&#x3D;&#39;1&#39;&gt;     &lt;tr&gt;         &lt;th&gt;Use cases&lt;/th&gt;         &lt;th&gt;filterId&lt;/th&gt;         &lt;th&gt;taskRunIds&lt;/th&gt;         &lt;th&gt;startTime, endTime&lt;/th&gt;         &lt;th&gt;startCreationTime, endCreationTime&lt;/th&gt;         &lt;th&gt;startForecastTime, endForecastTime&lt;/th&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. The requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get all time series created by one or more taskRuns. All time steps of the matching time series are returned.&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get the time series created by a taskrun and apply a filter from the Filters configuration. startTime and endTime cannot be specified. The complete time series will be returned. Since             2020.01.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series and return time steps that are in the startTime and endTime range. If the startTime or endTime doesn&#39;t match a timestamp of the time series, the closest time step before startTime and/or after endTime is returned as well.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Only time series created during the startCreationTime and endCreationTime period will be returned. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. Only return timesteps in the startTime and endTime range.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. Only return timesteps in the startTime and             endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period that were created in the creation time period.             Only return time steps in the startTime and endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. All time steps of the matching time series are returned. (before 2020.01 startTime and             endTime had to be specified).         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period and with external forecast times in the startForecastTime and endForecastTime period. All             time steps of the matching time series are returned..         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;  &lt;h2&gt;no data vs no time series&lt;/h2&gt; If a timeseries query has matching timeseries sets a http 200 code will be returned and the headers of all matching time series sets will be returned. If there is any data for the requested period, the headers will be followed by the actual events that contain the data. So even if no data is available at all the headers are always returned.  It is also possible that a timeseries query doesn&#39;t match any time series sets at all. This is seen as in invalid request and will result in a HTTP 400 response code. The following are examples of use cases where this might occur: &lt;ul&gt;     &lt;li&gt;query parameters don&#39;t occur in filter. For example: the default filter has subfilters: filterA and filterB. filterA contains timeseries sets with module instance id moduleInstanceA and filterB contains timeseries sets with module instance id moduleInstanceB.         If a timeseries query is done with parameters: filterId&#x3D;filterA and moduleInstanceId&#x3D;moduleInstanceB, this will return in a HTTP 400 response&lt;/li&gt;     &lt;li&gt;no timeseries for creation period. For example: if a query is using startCreationTime and endCreationTime and no time series have been produced during that period, this is seen as an invalid request and a HTTP 400 response is returned.&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;availability of new timeseries&lt;/h2&gt; When new timeseries have been created, it can take some time before they can be found by the WebServices. The web services updates its indexes every second (every five seconds before 2023.01). Once the indexes have been updated, newly created time series can be found. So it typically can take a few seconds before newly created time series can be found.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="qualifierIds">One or more qualifier ids. Subset of qualifiers for which to retrieve time series. All time series that have any of the specified qualifierIds will be returned. To indicate that no qualifier is available, use qualifierIds: \&quot;none\&quot; (optional)</param>
        /// <param name="taskRunIds">One or more taskRunIds (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="startCreationTime">Creation start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endCreationTime">Creation end time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="forecastCount">Number of forecasts that will be searched for when startForecastTime and endForecastTime have been specified. Default 1 (optional)</param>
        /// <param name="startForecastTime">Start time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts up to the endForecastTime will be used as search period. (optional)</param>
        /// <param name="endForecastTime">End time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts starting from the startForecastTime will be used as search period. (optional)</param>
        /// <param name="externalForecastTimes">One or more external forecast times. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Ensemble Id. Ensemble identifier of time series (optional)</param>
        /// <param name="ensembleMemberId">Ensemble MemberId. Ensemble member identifier of time series. Only allowed in combination with ensembleId &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="timeStepId">Time Step Id. Filter time series by the time step that has been configured in the TimeSteps.xml. N.B.: It is not required to use the timeStepId&#39;s in the filter configurations to be able to use them as long as they have been configured in the TimeSteps.xml. &lt;i&gt;Since: 2018.02&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="exportIdMap">Name of the id map that should be used as exportIdMap. This parameter will overrule a configured exportIdMap. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="matchAsQualifierSet">Since 2023.01. If this option is to true the qualifier from time series selected from the filter must contain all of the given qualifiers ids and only consist only of the given qualifiers ids (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT, BINARY,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Timeseries200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Timeseries200Response>> TimeseriesWithHttpInfoAsync(string filterId = default(string), List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> qualifierIds = default(List<string>), List<string> taskRunIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startCreationTime = default(DateTime?), DateTime? endCreationTime = default(DateTime?), decimal? forecastCount = default(decimal?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), List<string> externalForecastTimes = default(List<string>), string ensembleId = default(string), string ensembleMemberId = default(string), string timeStepId = default(string), decimal? thinning = default(decimal?), string exportIdMap = default(string), string matchAsQualifierSet = default(string), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Timeseries are filtered by the plotId from the DisplayGroups
        /// </summary>
        /// <remarks>
        /// Timeseries are filtered by the plotId from the DisplayGroups.xml configuration in the SystemConfigFiles folder.&lt;p&gt;The TimeSeriesSets configured for the plotId will be used to filter the timeSeries. The line, area and clusteredBars elements are used when determining the relevant TimeSeriesSets. In case of forecasts, this means only the current forecast will be retrieved. It is not possible to request older forecasts. If no line, area or clusteredBars elements are used in the displayGroups.xml configuration, the TimeSeriesSets will not be applied.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plotId">Plot Id</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Timeseries200Response</returns>
        System.Threading.Tasks.Task<Timeseries200Response> TimeseriesDisplaygroupsAsync(string plotId, List<string> locationIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), decimal? thinning = default(decimal?), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyHeaders = default(string), string onlyManualEdits = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Timeseries are filtered by the plotId from the DisplayGroups
        /// </summary>
        /// <remarks>
        /// Timeseries are filtered by the plotId from the DisplayGroups.xml configuration in the SystemConfigFiles folder.&lt;p&gt;The TimeSeriesSets configured for the plotId will be used to filter the timeSeries. The line, area and clusteredBars elements are used when determining the relevant TimeSeriesSets. In case of forecasts, this means only the current forecast will be retrieved. It is not possible to request older forecasts. If no line, area or clusteredBars elements are used in the displayGroups.xml configuration, the TimeSeriesSets will not be applied.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plotId">Plot Id</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Timeseries200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Timeseries200Response>> TimeseriesDisplaygroupsWithHttpInfoAsync(string plotId, List<string> locationIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), decimal? thinning = default(decimal?), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyHeaders = default(string), string onlyManualEdits = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the timeseries containing the data from a grid cell for a request period
        /// </summary>
        /// <remarks>
        /// Get the timeseries containing the data from a grid cell for a request period. The grid is specified by passing a layerId.&lt;p&gt;The grid cell is determined by specifying a x and y coordinate and a bounding box. Currenly only EPSG:3857 is supported for the x,y, and bounding box coordinates. At least a layer, startTime, endTime, x,y and bounding box are required. The timeseries/grid endpoint is intended to be used together with the Delf-FEWS WMS service. Every layer that is provided by the WMS service, can be used with this endpoint.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">bounding box of map that is viewed in , separated EPSG:3857 format. The order of the coordinates is as follows: bottom left X, bottom left Y, top right X, top right Y.</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the start time doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned.  Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="layers"> layerd id (only one layer is supported and required) that matches the gridPlot id as configured in the gridDisplay. Every gridPlot that has been configured in the grid display configuration represents a WMS layer.</param>
        /// <param name="x">x position on the map in EPSG:3857 format.</param>
        /// <param name="y">y position on the map in EPSG:3857 format.</param>
        /// <param name="externalForecastTime">Time value of external forecast time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Used in combination with ensembleMemberId to identify a unique ensemble. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="ensembleMemberId">Used in combination with ensembleId to identify a unique ensemble &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="elevation">Used for 3d data, like for example water depth, to get the timeseries of a grid point at a specific elevation. &lt;i&gt;Since:  2020.01&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values. (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showVerticalProfile">Show vertical profile in case of 3D data. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. &lt;i&gt;Since: 2019.02&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Timeseries200Response</returns>
        System.Threading.Tasks.Task<Timeseries200Response> TimeseriesgridAsync(string bbox, DateTime startTime, DateTime endTime, string layers, double x, double y, DateTime? externalForecastTime = default(DateTime?), string ensembleId = default(string), string ensembleMemberId = default(string), double? elevation = default(double?), decimal? thinning = default(decimal?), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showVerticalProfile = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the timeseries containing the data from a grid cell for a request period
        /// </summary>
        /// <remarks>
        /// Get the timeseries containing the data from a grid cell for a request period. The grid is specified by passing a layerId.&lt;p&gt;The grid cell is determined by specifying a x and y coordinate and a bounding box. Currenly only EPSG:3857 is supported for the x,y, and bounding box coordinates. At least a layer, startTime, endTime, x,y and bounding box are required. The timeseries/grid endpoint is intended to be used together with the Delf-FEWS WMS service. Every layer that is provided by the WMS service, can be used with this endpoint.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">bounding box of map that is viewed in , separated EPSG:3857 format. The order of the coordinates is as follows: bottom left X, bottom left Y, top right X, top right Y.</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the start time doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned.  Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="layers"> layerd id (only one layer is supported and required) that matches the gridPlot id as configured in the gridDisplay. Every gridPlot that has been configured in the grid display configuration represents a WMS layer.</param>
        /// <param name="x">x position on the map in EPSG:3857 format.</param>
        /// <param name="y">y position on the map in EPSG:3857 format.</param>
        /// <param name="externalForecastTime">Time value of external forecast time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Used in combination with ensembleMemberId to identify a unique ensemble. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="ensembleMemberId">Used in combination with ensembleId to identify a unique ensemble &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="elevation">Used for 3d data, like for example water depth, to get the timeseries of a grid point at a specific elevation. &lt;i&gt;Since:  2020.01&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values. (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showVerticalProfile">Show vertical profile in case of 3D data. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. &lt;i&gt;Since: 2019.02&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Timeseries200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Timeseries200Response>> TimeseriesgridWithHttpInfoAsync(string bbox, DateTime startTime, DateTime endTime, string layers, double x, double y, DateTime? externalForecastTime = default(DateTime?), string ensembleId = default(string), string ensembleMemberId = default(string), double? elevation = default(double?), decimal? thinning = default(decimal?), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showVerticalProfile = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeseriesApi : ITimeseriesApiSync, ITimeseriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimeseriesApi : ITimeseriesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimeseriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimeseriesApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimeseriesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeseriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TimeseriesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all ensemble member ids for one or more ensemble Ids Get all ensemble member ids for one or more ensemble Ids. The available member ids depend on an up-to-date index. This is run once a day on a forecasting shell server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ensembleIds">One or more ensemble ids</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestTimeseriesEnsemblesMembers</returns>
        public PiRestTimeseriesEnsemblesMembers EnsemblesMembers(List<string> ensembleIds, string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestTimeseriesEnsemblesMembers> localVarResponse = EnsemblesMembersWithHttpInfo(ensembleIds, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all ensemble member ids for one or more ensemble Ids Get all ensemble member ids for one or more ensemble Ids. The available member ids depend on an up-to-date index. This is run once a day on a forecasting shell server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ensembleIds">One or more ensemble ids</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestTimeseriesEnsemblesMembers</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestTimeseriesEnsemblesMembers> EnsemblesMembersWithHttpInfo(List<string> ensembleIds, string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'ensembleIds' is set
            if (ensembleIds == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ensembleIds' when calling TimeseriesApi->EnsemblesMembers");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ensembleIds", ensembleIds));
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TimeseriesApi.EnsemblesMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestTimeseriesEnsemblesMembers>("/ensembles/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnsemblesMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all ensemble member ids for one or more ensemble Ids Get all ensemble member ids for one or more ensemble Ids. The available member ids depend on an up-to-date index. This is run once a day on a forecasting shell server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ensembleIds">One or more ensemble ids</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestTimeseriesEnsemblesMembers</returns>
        public async System.Threading.Tasks.Task<PiRestTimeseriesEnsemblesMembers> EnsemblesMembersAsync(List<string> ensembleIds, string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestTimeseriesEnsemblesMembers> localVarResponse = await EnsemblesMembersWithHttpInfoAsync(ensembleIds, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all ensemble member ids for one or more ensemble Ids Get all ensemble member ids for one or more ensemble Ids. The available member ids depend on an up-to-date index. This is run once a day on a forecasting shell server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ensembleIds">One or more ensemble ids</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestTimeseriesEnsemblesMembers)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestTimeseriesEnsemblesMembers>> EnsemblesMembersWithHttpInfoAsync(List<string> ensembleIds, string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ensembleIds' is set
            if (ensembleIds == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ensembleIds' when calling TimeseriesApi->EnsemblesMembers");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ensembleIds", ensembleIds));
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TimeseriesApi.EnsemblesMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestTimeseriesEnsemblesMembers>("/ensembles/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnsemblesMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters Timeseries will be written that are part of the timeseries sets defined by the filters. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disable in the FewsPiService.properties to allow this functionality.&lt;p&gt;The timeseries you post to the rest service should match one of the time series sets in the default filter or one of its sub filters. To make sure you only write time series for a specific filter, you can pass a filterId with the POST request. Only timeseries that have timeseries sets that are configured in that filter (or one of its sub filters) will be accepted. If no filterId is used, all time series will be accepted that are configured in the default filter. Writing the time series works similar to importing time series using the pi.xml format using the \&quot;PI\&quot; import type. See also: &lt;a target&#x3D;&#39;_new&#39; href&#x3D;&#39;https://publicwiki.deltares.nl/x/uIGE&#39;&gt;Delft-Fews Published Interface timeseries Format (PI) Import&lt;/a&gt;  The &#39;convertDatum&#39; argument is to allow timeseries that support a datum to have their values converted to a value relative to the location height. If values are already relative to location then enter FALSE or omit.  In case a time series already exists in the database, the time series will be overwritten by the ones that are posted. For forecast time series with different forecastDates a new time series will be added. The latter can be achieved by providing a forecastDate element in the POST request, e.g. &lt;forecastDate date&#x3D;\&quot;2013-01-01\&quot; time&#x3D;\&quot;00:00:00\&quot;/&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="piTimeSeriesXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_timeseries.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object Posttimeseries(string filterId = default(string), string convertDatum = default(string), string piTimeSeriesXmlContent = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = PosttimeseriesWithHttpInfo(filterId, convertDatum, piTimeSeriesXmlContent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters Timeseries will be written that are part of the timeseries sets defined by the filters. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disable in the FewsPiService.properties to allow this functionality.&lt;p&gt;The timeseries you post to the rest service should match one of the time series sets in the default filter or one of its sub filters. To make sure you only write time series for a specific filter, you can pass a filterId with the POST request. Only timeseries that have timeseries sets that are configured in that filter (or one of its sub filters) will be accepted. If no filterId is used, all time series will be accepted that are configured in the default filter. Writing the time series works similar to importing time series using the pi.xml format using the \&quot;PI\&quot; import type. See also: &lt;a target&#x3D;&#39;_new&#39; href&#x3D;&#39;https://publicwiki.deltares.nl/x/uIGE&#39;&gt;Delft-Fews Published Interface timeseries Format (PI) Import&lt;/a&gt;  The &#39;convertDatum&#39; argument is to allow timeseries that support a datum to have their values converted to a value relative to the location height. If values are already relative to location then enter FALSE or omit.  In case a time series already exists in the database, the time series will be overwritten by the ones that are posted. For forecast time series with different forecastDates a new time series will be added. The latter can be achieved by providing a forecastDate element in the POST request, e.g. &lt;forecastDate date&#x3D;\&quot;2013-01-01\&quot; time&#x3D;\&quot;00:00:00\&quot;/&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="piTimeSeriesXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_timeseries.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PosttimeseriesWithHttpInfo(string filterId = default(string), string convertDatum = default(string), string piTimeSeriesXmlContent = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filterId", filterId));
            }
            if (convertDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "convertDatum", convertDatum));
            }
            if (piTimeSeriesXmlContent != null)
            {
                localVarRequestOptions.FormParameters.Add("piTimeSeriesXmlContent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(piTimeSeriesXmlContent)); // form parameter
            }

            localVarRequestOptions.Operation = "TimeseriesApi.Posttimeseries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/timeseries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Posttimeseries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters Timeseries will be written that are part of the timeseries sets defined by the filters. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disable in the FewsPiService.properties to allow this functionality.&lt;p&gt;The timeseries you post to the rest service should match one of the time series sets in the default filter or one of its sub filters. To make sure you only write time series for a specific filter, you can pass a filterId with the POST request. Only timeseries that have timeseries sets that are configured in that filter (or one of its sub filters) will be accepted. If no filterId is used, all time series will be accepted that are configured in the default filter. Writing the time series works similar to importing time series using the pi.xml format using the \&quot;PI\&quot; import type. See also: &lt;a target&#x3D;&#39;_new&#39; href&#x3D;&#39;https://publicwiki.deltares.nl/x/uIGE&#39;&gt;Delft-Fews Published Interface timeseries Format (PI) Import&lt;/a&gt;  The &#39;convertDatum&#39; argument is to allow timeseries that support a datum to have their values converted to a value relative to the location height. If values are already relative to location then enter FALSE or omit.  In case a time series already exists in the database, the time series will be overwritten by the ones that are posted. For forecast time series with different forecastDates a new time series will be added. The latter can be achieved by providing a forecastDate element in the POST request, e.g. &lt;forecastDate date&#x3D;\&quot;2013-01-01\&quot; time&#x3D;\&quot;00:00:00\&quot;/&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="piTimeSeriesXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_timeseries.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PosttimeseriesAsync(string filterId = default(string), string convertDatum = default(string), string piTimeSeriesXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await PosttimeseriesWithHttpInfoAsync(filterId, convertDatum, piTimeSeriesXmlContent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Timeseries will be written that are part of the timeseries sets defined by the filters Timeseries will be written that are part of the timeseries sets defined by the filters. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disable in the FewsPiService.properties to allow this functionality.&lt;p&gt;The timeseries you post to the rest service should match one of the time series sets in the default filter or one of its sub filters. To make sure you only write time series for a specific filter, you can pass a filterId with the POST request. Only timeseries that have timeseries sets that are configured in that filter (or one of its sub filters) will be accepted. If no filterId is used, all time series will be accepted that are configured in the default filter. Writing the time series works similar to importing time series using the pi.xml format using the \&quot;PI\&quot; import type. See also: &lt;a target&#x3D;&#39;_new&#39; href&#x3D;&#39;https://publicwiki.deltares.nl/x/uIGE&#39;&gt;Delft-Fews Published Interface timeseries Format (PI) Import&lt;/a&gt;  The &#39;convertDatum&#39; argument is to allow timeseries that support a datum to have their values converted to a value relative to the location height. If values are already relative to location then enter FALSE or omit.  In case a time series already exists in the database, the time series will be overwritten by the ones that are posted. For forecast time series with different forecastDates a new time series will be added. The latter can be achieved by providing a forecastDate element in the POST request, e.g. &lt;forecastDate date&#x3D;\&quot;2013-01-01\&quot; time&#x3D;\&quot;00:00:00\&quot;/&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="piTimeSeriesXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_timeseries.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PosttimeseriesWithHttpInfoAsync(string filterId = default(string), string convertDatum = default(string), string piTimeSeriesXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filterId", filterId));
            }
            if (convertDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "convertDatum", convertDatum));
            }
            if (piTimeSeriesXmlContent != null)
            {
                localVarRequestOptions.FormParameters.Add("piTimeSeriesXmlContent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(piTimeSeriesXmlContent)); // form parameter
            }

            localVarRequestOptions.Operation = "TimeseriesApi.Posttimeseries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/timeseries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Posttimeseries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get timeseries that are part of the default filter Get timeseries that are part of the default filter.&lt;p&gt;&lt;h2&gt;parameters&lt;/h2&gt; Not all parameters can be combined. The following combinations are commonly used valid combinations of parameters. The main way to filter timeseries is by using filter ids or taskrun ids.&lt;p&gt; &lt;table border&#x3D;&#39;1&#39;&gt;     &lt;tr&gt;         &lt;th&gt;Use cases&lt;/th&gt;         &lt;th&gt;filterId&lt;/th&gt;         &lt;th&gt;taskRunIds&lt;/th&gt;         &lt;th&gt;startTime, endTime&lt;/th&gt;         &lt;th&gt;startCreationTime, endCreationTime&lt;/th&gt;         &lt;th&gt;startForecastTime, endForecastTime&lt;/th&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. The requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get all time series created by one or more taskRuns. All time steps of the matching time series are returned.&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get the time series created by a taskrun and apply a filter from the Filters configuration. startTime and endTime cannot be specified. The complete time series will be returned. Since             2020.01.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series and return time steps that are in the startTime and endTime range. If the startTime or endTime doesn&#39;t match a timestamp of the time series, the closest time step before startTime and/or after endTime is returned as well.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Only time series created during the startCreationTime and endCreationTime period will be returned. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. Only return timesteps in the startTime and endTime range.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. Only return timesteps in the startTime and             endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period that were created in the creation time period.             Only return time steps in the startTime and endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. All time steps of the matching time series are returned. (before 2020.01 startTime and             endTime had to be specified).         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period and with external forecast times in the startForecastTime and endForecastTime period. All             time steps of the matching time series are returned..         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;  &lt;h2&gt;no data vs no time series&lt;/h2&gt; If a timeseries query has matching timeseries sets a http 200 code will be returned and the headers of all matching time series sets will be returned. If there is any data for the requested period, the headers will be followed by the actual events that contain the data. So even if no data is available at all the headers are always returned.  It is also possible that a timeseries query doesn&#39;t match any time series sets at all. This is seen as in invalid request and will result in a HTTP 400 response code. The following are examples of use cases where this might occur: &lt;ul&gt;     &lt;li&gt;query parameters don&#39;t occur in filter. For example: the default filter has subfilters: filterA and filterB. filterA contains timeseries sets with module instance id moduleInstanceA and filterB contains timeseries sets with module instance id moduleInstanceB.         If a timeseries query is done with parameters: filterId&#x3D;filterA and moduleInstanceId&#x3D;moduleInstanceB, this will return in a HTTP 400 response&lt;/li&gt;     &lt;li&gt;no timeseries for creation period. For example: if a query is using startCreationTime and endCreationTime and no time series have been produced during that period, this is seen as an invalid request and a HTTP 400 response is returned.&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;availability of new timeseries&lt;/h2&gt; When new timeseries have been created, it can take some time before they can be found by the WebServices. The web services updates its indexes every second (every five seconds before 2023.01). Once the indexes have been updated, newly created time series can be found. So it typically can take a few seconds before newly created time series can be found.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="qualifierIds">One or more qualifier ids. Subset of qualifiers for which to retrieve time series. All time series that have any of the specified qualifierIds will be returned. To indicate that no qualifier is available, use qualifierIds: \&quot;none\&quot; (optional)</param>
        /// <param name="taskRunIds">One or more taskRunIds (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="startCreationTime">Creation start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endCreationTime">Creation end time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="forecastCount">Number of forecasts that will be searched for when startForecastTime and endForecastTime have been specified. Default 1 (optional)</param>
        /// <param name="startForecastTime">Start time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts up to the endForecastTime will be used as search period. (optional)</param>
        /// <param name="endForecastTime">End time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts starting from the startForecastTime will be used as search period. (optional)</param>
        /// <param name="externalForecastTimes">One or more external forecast times. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Ensemble Id. Ensemble identifier of time series (optional)</param>
        /// <param name="ensembleMemberId">Ensemble MemberId. Ensemble member identifier of time series. Only allowed in combination with ensembleId &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="timeStepId">Time Step Id. Filter time series by the time step that has been configured in the TimeSteps.xml. N.B.: It is not required to use the timeStepId&#39;s in the filter configurations to be able to use them as long as they have been configured in the TimeSteps.xml. &lt;i&gt;Since: 2018.02&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="exportIdMap">Name of the id map that should be used as exportIdMap. This parameter will overrule a configured exportIdMap. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="matchAsQualifierSet">Since 2023.01. If this option is to true the qualifier from time series selected from the filter must contain all of the given qualifiers ids and only consist only of the given qualifiers ids (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT, BINARY,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Timeseries200Response</returns>
        public Timeseries200Response Timeseries(string filterId = default(string), List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> qualifierIds = default(List<string>), List<string> taskRunIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startCreationTime = default(DateTime?), DateTime? endCreationTime = default(DateTime?), decimal? forecastCount = default(decimal?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), List<string> externalForecastTimes = default(List<string>), string ensembleId = default(string), string ensembleMemberId = default(string), string timeStepId = default(string), decimal? thinning = default(decimal?), string exportIdMap = default(string), string matchAsQualifierSet = default(string), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> localVarResponse = TimeseriesWithHttpInfo(filterId, locationIds, parameterIds, moduleInstanceIds, qualifierIds, taskRunIds, startTime, endTime, startCreationTime, endCreationTime, forecastCount, startForecastTime, endForecastTime, externalForecastTimes, ensembleId, ensembleMemberId, timeStepId, thinning, exportIdMap, matchAsQualifierSet, importFromExternalDataSource, convertDatum, showEnsembleMemberIds, useDisplayUnits, showThresholds, omitMissing, omitEmptyTimeSeries, onlyManualEdits, onlyHeaders, onlyForecasts, showStatistics, useMilliseconds, showProducts, timeSeriesType, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get timeseries that are part of the default filter Get timeseries that are part of the default filter.&lt;p&gt;&lt;h2&gt;parameters&lt;/h2&gt; Not all parameters can be combined. The following combinations are commonly used valid combinations of parameters. The main way to filter timeseries is by using filter ids or taskrun ids.&lt;p&gt; &lt;table border&#x3D;&#39;1&#39;&gt;     &lt;tr&gt;         &lt;th&gt;Use cases&lt;/th&gt;         &lt;th&gt;filterId&lt;/th&gt;         &lt;th&gt;taskRunIds&lt;/th&gt;         &lt;th&gt;startTime, endTime&lt;/th&gt;         &lt;th&gt;startCreationTime, endCreationTime&lt;/th&gt;         &lt;th&gt;startForecastTime, endForecastTime&lt;/th&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. The requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get all time series created by one or more taskRuns. All time steps of the matching time series are returned.&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get the time series created by a taskrun and apply a filter from the Filters configuration. startTime and endTime cannot be specified. The complete time series will be returned. Since             2020.01.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series and return time steps that are in the startTime and endTime range. If the startTime or endTime doesn&#39;t match a timestamp of the time series, the closest time step before startTime and/or after endTime is returned as well.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Only time series created during the startCreationTime and endCreationTime period will be returned. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. Only return timesteps in the startTime and endTime range.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. Only return timesteps in the startTime and             endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period that were created in the creation time period.             Only return time steps in the startTime and endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. All time steps of the matching time series are returned. (before 2020.01 startTime and             endTime had to be specified).         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period and with external forecast times in the startForecastTime and endForecastTime period. All             time steps of the matching time series are returned..         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;  &lt;h2&gt;no data vs no time series&lt;/h2&gt; If a timeseries query has matching timeseries sets a http 200 code will be returned and the headers of all matching time series sets will be returned. If there is any data for the requested period, the headers will be followed by the actual events that contain the data. So even if no data is available at all the headers are always returned.  It is also possible that a timeseries query doesn&#39;t match any time series sets at all. This is seen as in invalid request and will result in a HTTP 400 response code. The following are examples of use cases where this might occur: &lt;ul&gt;     &lt;li&gt;query parameters don&#39;t occur in filter. For example: the default filter has subfilters: filterA and filterB. filterA contains timeseries sets with module instance id moduleInstanceA and filterB contains timeseries sets with module instance id moduleInstanceB.         If a timeseries query is done with parameters: filterId&#x3D;filterA and moduleInstanceId&#x3D;moduleInstanceB, this will return in a HTTP 400 response&lt;/li&gt;     &lt;li&gt;no timeseries for creation period. For example: if a query is using startCreationTime and endCreationTime and no time series have been produced during that period, this is seen as an invalid request and a HTTP 400 response is returned.&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;availability of new timeseries&lt;/h2&gt; When new timeseries have been created, it can take some time before they can be found by the WebServices. The web services updates its indexes every second (every five seconds before 2023.01). Once the indexes have been updated, newly created time series can be found. So it typically can take a few seconds before newly created time series can be found.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="qualifierIds">One or more qualifier ids. Subset of qualifiers for which to retrieve time series. All time series that have any of the specified qualifierIds will be returned. To indicate that no qualifier is available, use qualifierIds: \&quot;none\&quot; (optional)</param>
        /// <param name="taskRunIds">One or more taskRunIds (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="startCreationTime">Creation start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endCreationTime">Creation end time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="forecastCount">Number of forecasts that will be searched for when startForecastTime and endForecastTime have been specified. Default 1 (optional)</param>
        /// <param name="startForecastTime">Start time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts up to the endForecastTime will be used as search period. (optional)</param>
        /// <param name="endForecastTime">End time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts starting from the startForecastTime will be used as search period. (optional)</param>
        /// <param name="externalForecastTimes">One or more external forecast times. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Ensemble Id. Ensemble identifier of time series (optional)</param>
        /// <param name="ensembleMemberId">Ensemble MemberId. Ensemble member identifier of time series. Only allowed in combination with ensembleId &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="timeStepId">Time Step Id. Filter time series by the time step that has been configured in the TimeSteps.xml. N.B.: It is not required to use the timeStepId&#39;s in the filter configurations to be able to use them as long as they have been configured in the TimeSteps.xml. &lt;i&gt;Since: 2018.02&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="exportIdMap">Name of the id map that should be used as exportIdMap. This parameter will overrule a configured exportIdMap. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="matchAsQualifierSet">Since 2023.01. If this option is to true the qualifier from time series selected from the filter must contain all of the given qualifiers ids and only consist only of the given qualifiers ids (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT, BINARY,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Timeseries200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> TimeseriesWithHttpInfo(string filterId = default(string), List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> qualifierIds = default(List<string>), List<string> taskRunIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startCreationTime = default(DateTime?), DateTime? endCreationTime = default(DateTime?), decimal? forecastCount = default(decimal?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), List<string> externalForecastTimes = default(List<string>), string ensembleId = default(string), string ensembleMemberId = default(string), string timeStepId = default(string), decimal? thinning = default(decimal?), string exportIdMap = default(string), string matchAsQualifierSet = default(string), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filterId", filterId));
            }
            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (parameterIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "parameterIds", parameterIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (qualifierIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "qualifierIds", qualifierIds));
            }
            if (taskRunIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "taskRunIds", taskRunIds));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (startCreationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startCreationTime", startCreationTime));
            }
            if (endCreationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endCreationTime", endCreationTime));
            }
            if (forecastCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "forecastCount", forecastCount));
            }
            if (startForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startForecastTime", startForecastTime));
            }
            if (endForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endForecastTime", endForecastTime));
            }
            if (externalForecastTimes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "externalForecastTimes", externalForecastTimes));
            }
            if (ensembleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ensembleId", ensembleId));
            }
            if (ensembleMemberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ensembleMemberId", ensembleMemberId));
            }
            if (timeStepId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeStepId", timeStepId));
            }
            if (thinning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "thinning", thinning));
            }
            if (exportIdMap != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exportIdMap", exportIdMap));
            }
            if (matchAsQualifierSet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "matchAsQualifierSet", matchAsQualifierSet));
            }
            if (importFromExternalDataSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "importFromExternalDataSource", importFromExternalDataSource));
            }
            if (convertDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "convertDatum", convertDatum));
            }
            if (showEnsembleMemberIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showEnsembleMemberIds", showEnsembleMemberIds));
            }
            if (useDisplayUnits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useDisplayUnits", useDisplayUnits));
            }
            if (showThresholds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showThresholds", showThresholds));
            }
            if (omitMissing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitMissing", omitMissing));
            }
            if (omitEmptyTimeSeries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitEmptyTimeSeries", omitEmptyTimeSeries));
            }
            if (onlyManualEdits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyManualEdits", onlyManualEdits));
            }
            if (onlyHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyHeaders", onlyHeaders));
            }
            if (onlyForecasts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyForecasts", onlyForecasts));
            }
            if (showStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showStatistics", showStatistics));
            }
            if (useMilliseconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useMilliseconds", useMilliseconds));
            }
            if (showProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showProducts", showProducts));
            }
            if (timeSeriesType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeSeriesType", timeSeriesType));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TimeseriesApi.Timeseries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Timeseries200Response>("/timeseries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Timeseries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get timeseries that are part of the default filter Get timeseries that are part of the default filter.&lt;p&gt;&lt;h2&gt;parameters&lt;/h2&gt; Not all parameters can be combined. The following combinations are commonly used valid combinations of parameters. The main way to filter timeseries is by using filter ids or taskrun ids.&lt;p&gt; &lt;table border&#x3D;&#39;1&#39;&gt;     &lt;tr&gt;         &lt;th&gt;Use cases&lt;/th&gt;         &lt;th&gt;filterId&lt;/th&gt;         &lt;th&gt;taskRunIds&lt;/th&gt;         &lt;th&gt;startTime, endTime&lt;/th&gt;         &lt;th&gt;startCreationTime, endCreationTime&lt;/th&gt;         &lt;th&gt;startForecastTime, endForecastTime&lt;/th&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. The requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get all time series created by one or more taskRuns. All time steps of the matching time series are returned.&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get the time series created by a taskrun and apply a filter from the Filters configuration. startTime and endTime cannot be specified. The complete time series will be returned. Since             2020.01.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series and return time steps that are in the startTime and endTime range. If the startTime or endTime doesn&#39;t match a timestamp of the time series, the closest time step before startTime and/or after endTime is returned as well.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Only time series created during the startCreationTime and endCreationTime period will be returned. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. Only return timesteps in the startTime and endTime range.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. Only return timesteps in the startTime and             endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period that were created in the creation time period.             Only return time steps in the startTime and endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. All time steps of the matching time series are returned. (before 2020.01 startTime and             endTime had to be specified).         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period and with external forecast times in the startForecastTime and endForecastTime period. All             time steps of the matching time series are returned..         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;  &lt;h2&gt;no data vs no time series&lt;/h2&gt; If a timeseries query has matching timeseries sets a http 200 code will be returned and the headers of all matching time series sets will be returned. If there is any data for the requested period, the headers will be followed by the actual events that contain the data. So even if no data is available at all the headers are always returned.  It is also possible that a timeseries query doesn&#39;t match any time series sets at all. This is seen as in invalid request and will result in a HTTP 400 response code. The following are examples of use cases where this might occur: &lt;ul&gt;     &lt;li&gt;query parameters don&#39;t occur in filter. For example: the default filter has subfilters: filterA and filterB. filterA contains timeseries sets with module instance id moduleInstanceA and filterB contains timeseries sets with module instance id moduleInstanceB.         If a timeseries query is done with parameters: filterId&#x3D;filterA and moduleInstanceId&#x3D;moduleInstanceB, this will return in a HTTP 400 response&lt;/li&gt;     &lt;li&gt;no timeseries for creation period. For example: if a query is using startCreationTime and endCreationTime and no time series have been produced during that period, this is seen as an invalid request and a HTTP 400 response is returned.&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;availability of new timeseries&lt;/h2&gt; When new timeseries have been created, it can take some time before they can be found by the WebServices. The web services updates its indexes every second (every five seconds before 2023.01). Once the indexes have been updated, newly created time series can be found. So it typically can take a few seconds before newly created time series can be found.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="qualifierIds">One or more qualifier ids. Subset of qualifiers for which to retrieve time series. All time series that have any of the specified qualifierIds will be returned. To indicate that no qualifier is available, use qualifierIds: \&quot;none\&quot; (optional)</param>
        /// <param name="taskRunIds">One or more taskRunIds (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="startCreationTime">Creation start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endCreationTime">Creation end time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="forecastCount">Number of forecasts that will be searched for when startForecastTime and endForecastTime have been specified. Default 1 (optional)</param>
        /// <param name="startForecastTime">Start time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts up to the endForecastTime will be used as search period. (optional)</param>
        /// <param name="endForecastTime">End time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts starting from the startForecastTime will be used as search period. (optional)</param>
        /// <param name="externalForecastTimes">One or more external forecast times. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Ensemble Id. Ensemble identifier of time series (optional)</param>
        /// <param name="ensembleMemberId">Ensemble MemberId. Ensemble member identifier of time series. Only allowed in combination with ensembleId &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="timeStepId">Time Step Id. Filter time series by the time step that has been configured in the TimeSteps.xml. N.B.: It is not required to use the timeStepId&#39;s in the filter configurations to be able to use them as long as they have been configured in the TimeSteps.xml. &lt;i&gt;Since: 2018.02&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="exportIdMap">Name of the id map that should be used as exportIdMap. This parameter will overrule a configured exportIdMap. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="matchAsQualifierSet">Since 2023.01. If this option is to true the qualifier from time series selected from the filter must contain all of the given qualifiers ids and only consist only of the given qualifiers ids (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT, BINARY,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Timeseries200Response</returns>
        public async System.Threading.Tasks.Task<Timeseries200Response> TimeseriesAsync(string filterId = default(string), List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> qualifierIds = default(List<string>), List<string> taskRunIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startCreationTime = default(DateTime?), DateTime? endCreationTime = default(DateTime?), decimal? forecastCount = default(decimal?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), List<string> externalForecastTimes = default(List<string>), string ensembleId = default(string), string ensembleMemberId = default(string), string timeStepId = default(string), decimal? thinning = default(decimal?), string exportIdMap = default(string), string matchAsQualifierSet = default(string), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> localVarResponse = await TimeseriesWithHttpInfoAsync(filterId, locationIds, parameterIds, moduleInstanceIds, qualifierIds, taskRunIds, startTime, endTime, startCreationTime, endCreationTime, forecastCount, startForecastTime, endForecastTime, externalForecastTimes, ensembleId, ensembleMemberId, timeStepId, thinning, exportIdMap, matchAsQualifierSet, importFromExternalDataSource, convertDatum, showEnsembleMemberIds, useDisplayUnits, showThresholds, omitMissing, omitEmptyTimeSeries, onlyManualEdits, onlyHeaders, onlyForecasts, showStatistics, useMilliseconds, showProducts, timeSeriesType, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get timeseries that are part of the default filter Get timeseries that are part of the default filter.&lt;p&gt;&lt;h2&gt;parameters&lt;/h2&gt; Not all parameters can be combined. The following combinations are commonly used valid combinations of parameters. The main way to filter timeseries is by using filter ids or taskrun ids.&lt;p&gt; &lt;table border&#x3D;&#39;1&#39;&gt;     &lt;tr&gt;         &lt;th&gt;Use cases&lt;/th&gt;         &lt;th&gt;filterId&lt;/th&gt;         &lt;th&gt;taskRunIds&lt;/th&gt;         &lt;th&gt;startTime, endTime&lt;/th&gt;         &lt;th&gt;startCreationTime, endCreationTime&lt;/th&gt;         &lt;th&gt;startForecastTime, endForecastTime&lt;/th&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. The requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get all time series created by one or more taskRuns. All time steps of the matching time series are returned.&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Get the time series created by a taskrun and apply a filter from the Filters configuration. startTime and endTime cannot be specified. The complete time series will be returned. Since             2020.01.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series and return time steps that are in the startTime and endTime range. If the startTime or endTime doesn&#39;t match a timestamp of the time series, the closest time step before startTime and/or after endTime is returned as well.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Only time series created during the startCreationTime and endCreationTime period will be returned. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. Only return timesteps in the startTime and endTime range.&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. Only return timesteps in the startTime and             endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period that were created in the creation time period.             Only return time steps in the startTime and endTime range.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period. All time steps of the matching time series are returned. (before 2020.01 startTime and             endTime had to be specified).         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series with external forecast times in the startForecastTime and endForecastTime period. All time steps of the matching time series are             returned.         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;         &lt;td&gt;Apply a filter to the time series. Return only time series created during the creation time period and with external forecast times in the startForecastTime and endForecastTime period. All             time steps of the matching time series are returned..         &lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td&gt;&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;         &lt;td  style&#x3D;\&quot;background-color: LightGray; text-align: center;\&quot;&gt;&amp;nbsp;X&lt;/td&gt;     &lt;/tr&gt; &lt;/table&gt;  &lt;h2&gt;no data vs no time series&lt;/h2&gt; If a timeseries query has matching timeseries sets a http 200 code will be returned and the headers of all matching time series sets will be returned. If there is any data for the requested period, the headers will be followed by the actual events that contain the data. So even if no data is available at all the headers are always returned.  It is also possible that a timeseries query doesn&#39;t match any time series sets at all. This is seen as in invalid request and will result in a HTTP 400 response code. The following are examples of use cases where this might occur: &lt;ul&gt;     &lt;li&gt;query parameters don&#39;t occur in filter. For example: the default filter has subfilters: filterA and filterB. filterA contains timeseries sets with module instance id moduleInstanceA and filterB contains timeseries sets with module instance id moduleInstanceB.         If a timeseries query is done with parameters: filterId&#x3D;filterA and moduleInstanceId&#x3D;moduleInstanceB, this will return in a HTTP 400 response&lt;/li&gt;     &lt;li&gt;no timeseries for creation period. For example: if a query is using startCreationTime and endCreationTime and no time series have been produced during that period, this is seen as an invalid request and a HTTP 400 response is returned.&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;availability of new timeseries&lt;/h2&gt; When new timeseries have been created, it can take some time before they can be found by the WebServices. The web services updates its indexes every second (every five seconds before 2023.01). Once the indexes have been updated, newly created time series can be found. So it typically can take a few seconds before newly created time series can be found.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">An existing subfilter of the default filter id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="qualifierIds">One or more qualifier ids. Subset of qualifiers for which to retrieve time series. All time series that have any of the specified qualifierIds will be returned. To indicate that no qualifier is available, use qualifierIds: \&quot;none\&quot; (optional)</param>
        /// <param name="taskRunIds">One or more taskRunIds (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ. Take note that if no startTime and endTime are specified, the requested period will be set to the current time minus one day and one hour ago until the current time plus one day and one hour. If only the startTime is specified, the requested period will be set to the startTime until the startTime time plus one day and one hour. If only the endTime is specified, the requested period will be set to the endTime minus one day and one hour until the endTime. (optional)</param>
        /// <param name="startCreationTime">Creation start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endCreationTime">Creation end time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="forecastCount">Number of forecasts that will be searched for when startForecastTime and endForecastTime have been specified. Default 1 (optional)</param>
        /// <param name="startForecastTime">Start time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts up to the endForecastTime will be used as search period. (optional)</param>
        /// <param name="endForecastTime">End time of search period that looks for time series produced by forecasts that have their forecast time within this period. Format: yyyy-MM-ddTHH:mm:ssZ. If left empty all forecasts starting from the startForecastTime will be used as search period. (optional)</param>
        /// <param name="externalForecastTimes">One or more external forecast times. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Ensemble Id. Ensemble identifier of time series (optional)</param>
        /// <param name="ensembleMemberId">Ensemble MemberId. Ensemble member identifier of time series. Only allowed in combination with ensembleId &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="timeStepId">Time Step Id. Filter time series by the time step that has been configured in the TimeSteps.xml. N.B.: It is not required to use the timeStepId&#39;s in the filter configurations to be able to use them as long as they have been configured in the TimeSteps.xml. &lt;i&gt;Since: 2018.02&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="exportIdMap">Name of the id map that should be used as exportIdMap. This parameter will overrule a configured exportIdMap. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="matchAsQualifierSet">Since 2023.01. If this option is to true the qualifier from time series selected from the filter must contain all of the given qualifiers ids and only consist only of the given qualifiers ids (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT, BINARY,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Timeseries200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Timeseries200Response>> TimeseriesWithHttpInfoAsync(string filterId = default(string), List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> qualifierIds = default(List<string>), List<string> taskRunIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startCreationTime = default(DateTime?), DateTime? endCreationTime = default(DateTime?), decimal? forecastCount = default(decimal?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), List<string> externalForecastTimes = default(List<string>), string ensembleId = default(string), string ensembleMemberId = default(string), string timeStepId = default(string), decimal? thinning = default(decimal?), string exportIdMap = default(string), string matchAsQualifierSet = default(string), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filterId", filterId));
            }
            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (parameterIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "parameterIds", parameterIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (qualifierIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "qualifierIds", qualifierIds));
            }
            if (taskRunIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "taskRunIds", taskRunIds));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (startCreationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startCreationTime", startCreationTime));
            }
            if (endCreationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endCreationTime", endCreationTime));
            }
            if (forecastCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "forecastCount", forecastCount));
            }
            if (startForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startForecastTime", startForecastTime));
            }
            if (endForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endForecastTime", endForecastTime));
            }
            if (externalForecastTimes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "externalForecastTimes", externalForecastTimes));
            }
            if (ensembleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ensembleId", ensembleId));
            }
            if (ensembleMemberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ensembleMemberId", ensembleMemberId));
            }
            if (timeStepId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeStepId", timeStepId));
            }
            if (thinning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "thinning", thinning));
            }
            if (exportIdMap != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exportIdMap", exportIdMap));
            }
            if (matchAsQualifierSet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "matchAsQualifierSet", matchAsQualifierSet));
            }
            if (importFromExternalDataSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "importFromExternalDataSource", importFromExternalDataSource));
            }
            if (convertDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "convertDatum", convertDatum));
            }
            if (showEnsembleMemberIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showEnsembleMemberIds", showEnsembleMemberIds));
            }
            if (useDisplayUnits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useDisplayUnits", useDisplayUnits));
            }
            if (showThresholds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showThresholds", showThresholds));
            }
            if (omitMissing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitMissing", omitMissing));
            }
            if (omitEmptyTimeSeries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitEmptyTimeSeries", omitEmptyTimeSeries));
            }
            if (onlyManualEdits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyManualEdits", onlyManualEdits));
            }
            if (onlyHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyHeaders", onlyHeaders));
            }
            if (onlyForecasts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyForecasts", onlyForecasts));
            }
            if (showStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showStatistics", showStatistics));
            }
            if (useMilliseconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useMilliseconds", useMilliseconds));
            }
            if (showProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showProducts", showProducts));
            }
            if (timeSeriesType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeSeriesType", timeSeriesType));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TimeseriesApi.Timeseries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Timeseries200Response>("/timeseries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Timeseries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Timeseries are filtered by the plotId from the DisplayGroups Timeseries are filtered by the plotId from the DisplayGroups.xml configuration in the SystemConfigFiles folder.&lt;p&gt;The TimeSeriesSets configured for the plotId will be used to filter the timeSeries. The line, area and clusteredBars elements are used when determining the relevant TimeSeriesSets. In case of forecasts, this means only the current forecast will be retrieved. It is not possible to request older forecasts. If no line, area or clusteredBars elements are used in the displayGroups.xml configuration, the TimeSeriesSets will not be applied.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plotId">Plot Id</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Timeseries200Response</returns>
        public Timeseries200Response TimeseriesDisplaygroups(string plotId, List<string> locationIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), decimal? thinning = default(decimal?), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyHeaders = default(string), string onlyManualEdits = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> localVarResponse = TimeseriesDisplaygroupsWithHttpInfo(plotId, locationIds, startTime, endTime, thinning, convertDatum, showEnsembleMemberIds, useDisplayUnits, showThresholds, omitMissing, omitEmptyTimeSeries, onlyHeaders, onlyManualEdits, onlyForecasts, showStatistics, useMilliseconds, showProducts, timeSeriesType, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Timeseries are filtered by the plotId from the DisplayGroups Timeseries are filtered by the plotId from the DisplayGroups.xml configuration in the SystemConfigFiles folder.&lt;p&gt;The TimeSeriesSets configured for the plotId will be used to filter the timeSeries. The line, area and clusteredBars elements are used when determining the relevant TimeSeriesSets. In case of forecasts, this means only the current forecast will be retrieved. It is not possible to request older forecasts. If no line, area or clusteredBars elements are used in the displayGroups.xml configuration, the TimeSeriesSets will not be applied.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plotId">Plot Id</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Timeseries200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> TimeseriesDisplaygroupsWithHttpInfo(string plotId, List<string> locationIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), decimal? thinning = default(decimal?), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyHeaders = default(string), string onlyManualEdits = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'plotId' is set
            if (plotId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'plotId' when calling TimeseriesApi->TimeseriesDisplaygroups");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "plotId", plotId));
            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (thinning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "thinning", thinning));
            }
            if (convertDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "convertDatum", convertDatum));
            }
            if (showEnsembleMemberIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showEnsembleMemberIds", showEnsembleMemberIds));
            }
            if (useDisplayUnits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useDisplayUnits", useDisplayUnits));
            }
            if (showThresholds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showThresholds", showThresholds));
            }
            if (omitMissing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitMissing", omitMissing));
            }
            if (omitEmptyTimeSeries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitEmptyTimeSeries", omitEmptyTimeSeries));
            }
            if (onlyHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyHeaders", onlyHeaders));
            }
            if (onlyManualEdits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyManualEdits", onlyManualEdits));
            }
            if (onlyForecasts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyForecasts", onlyForecasts));
            }
            if (showStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showStatistics", showStatistics));
            }
            if (useMilliseconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useMilliseconds", useMilliseconds));
            }
            if (showProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showProducts", showProducts));
            }
            if (timeSeriesType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeSeriesType", timeSeriesType));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TimeseriesApi.TimeseriesDisplaygroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Timeseries200Response>("/timeseries/displaygroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeseriesDisplaygroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Timeseries are filtered by the plotId from the DisplayGroups Timeseries are filtered by the plotId from the DisplayGroups.xml configuration in the SystemConfigFiles folder.&lt;p&gt;The TimeSeriesSets configured for the plotId will be used to filter the timeSeries. The line, area and clusteredBars elements are used when determining the relevant TimeSeriesSets. In case of forecasts, this means only the current forecast will be retrieved. It is not possible to request older forecasts. If no line, area or clusteredBars elements are used in the displayGroups.xml configuration, the TimeSeriesSets will not be applied.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plotId">Plot Id</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Timeseries200Response</returns>
        public async System.Threading.Tasks.Task<Timeseries200Response> TimeseriesDisplaygroupsAsync(string plotId, List<string> locationIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), decimal? thinning = default(decimal?), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyHeaders = default(string), string onlyManualEdits = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> localVarResponse = await TimeseriesDisplaygroupsWithHttpInfoAsync(plotId, locationIds, startTime, endTime, thinning, convertDatum, showEnsembleMemberIds, useDisplayUnits, showThresholds, omitMissing, omitEmptyTimeSeries, onlyHeaders, onlyManualEdits, onlyForecasts, showStatistics, useMilliseconds, showProducts, timeSeriesType, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Timeseries are filtered by the plotId from the DisplayGroups Timeseries are filtered by the plotId from the DisplayGroups.xml configuration in the SystemConfigFiles folder.&lt;p&gt;The TimeSeriesSets configured for the plotId will be used to filter the timeSeries. The line, area and clusteredBars elements are used when determining the relevant TimeSeriesSets. In case of forecasts, this means only the current forecast will be retrieved. It is not possible to request older forecasts. If no line, area or clusteredBars elements are used in the displayGroups.xml configuration, the TimeSeriesSets will not be applied.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plotId">Plot Id</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the startTime doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="convertDatum">Convert Datum (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. (Since 2019.02). (optional)</param>
        /// <param name="timeSeriesType">Explicitly filter on a specific time series type. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Timeseries200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Timeseries200Response>> TimeseriesDisplaygroupsWithHttpInfoAsync(string plotId, List<string> locationIds = default(List<string>), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), decimal? thinning = default(decimal?), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyHeaders = default(string), string onlyManualEdits = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string timeSeriesType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'plotId' is set
            if (plotId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'plotId' when calling TimeseriesApi->TimeseriesDisplaygroups");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "plotId", plotId));
            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (thinning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "thinning", thinning));
            }
            if (convertDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "convertDatum", convertDatum));
            }
            if (showEnsembleMemberIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showEnsembleMemberIds", showEnsembleMemberIds));
            }
            if (useDisplayUnits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useDisplayUnits", useDisplayUnits));
            }
            if (showThresholds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showThresholds", showThresholds));
            }
            if (omitMissing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitMissing", omitMissing));
            }
            if (omitEmptyTimeSeries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitEmptyTimeSeries", omitEmptyTimeSeries));
            }
            if (onlyHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyHeaders", onlyHeaders));
            }
            if (onlyManualEdits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyManualEdits", onlyManualEdits));
            }
            if (onlyForecasts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyForecasts", onlyForecasts));
            }
            if (showStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showStatistics", showStatistics));
            }
            if (useMilliseconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useMilliseconds", useMilliseconds));
            }
            if (showProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showProducts", showProducts));
            }
            if (timeSeriesType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeSeriesType", timeSeriesType));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TimeseriesApi.TimeseriesDisplaygroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Timeseries200Response>("/timeseries/displaygroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeseriesDisplaygroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the timeseries containing the data from a grid cell for a request period Get the timeseries containing the data from a grid cell for a request period. The grid is specified by passing a layerId.&lt;p&gt;The grid cell is determined by specifying a x and y coordinate and a bounding box. Currenly only EPSG:3857 is supported for the x,y, and bounding box coordinates. At least a layer, startTime, endTime, x,y and bounding box are required. The timeseries/grid endpoint is intended to be used together with the Delf-FEWS WMS service. Every layer that is provided by the WMS service, can be used with this endpoint.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">bounding box of map that is viewed in , separated EPSG:3857 format. The order of the coordinates is as follows: bottom left X, bottom left Y, top right X, top right Y.</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the start time doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned.  Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="layers"> layerd id (only one layer is supported and required) that matches the gridPlot id as configured in the gridDisplay. Every gridPlot that has been configured in the grid display configuration represents a WMS layer.</param>
        /// <param name="x">x position on the map in EPSG:3857 format.</param>
        /// <param name="y">y position on the map in EPSG:3857 format.</param>
        /// <param name="externalForecastTime">Time value of external forecast time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Used in combination with ensembleMemberId to identify a unique ensemble. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="ensembleMemberId">Used in combination with ensembleId to identify a unique ensemble &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="elevation">Used for 3d data, like for example water depth, to get the timeseries of a grid point at a specific elevation. &lt;i&gt;Since:  2020.01&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values. (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showVerticalProfile">Show vertical profile in case of 3D data. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. &lt;i&gt;Since: 2019.02&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Timeseries200Response</returns>
        public Timeseries200Response Timeseriesgrid(string bbox, DateTime startTime, DateTime endTime, string layers, double x, double y, DateTime? externalForecastTime = default(DateTime?), string ensembleId = default(string), string ensembleMemberId = default(string), double? elevation = default(double?), decimal? thinning = default(decimal?), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showVerticalProfile = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> localVarResponse = TimeseriesgridWithHttpInfo(bbox, startTime, endTime, layers, x, y, externalForecastTime, ensembleId, ensembleMemberId, elevation, thinning, importFromExternalDataSource, convertDatum, showEnsembleMemberIds, useDisplayUnits, showVerticalProfile, showThresholds, omitMissing, omitEmptyTimeSeries, onlyManualEdits, onlyHeaders, onlyForecasts, showStatistics, useMilliseconds, showProducts, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the timeseries containing the data from a grid cell for a request period Get the timeseries containing the data from a grid cell for a request period. The grid is specified by passing a layerId.&lt;p&gt;The grid cell is determined by specifying a x and y coordinate and a bounding box. Currenly only EPSG:3857 is supported for the x,y, and bounding box coordinates. At least a layer, startTime, endTime, x,y and bounding box are required. The timeseries/grid endpoint is intended to be used together with the Delf-FEWS WMS service. Every layer that is provided by the WMS service, can be used with this endpoint.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">bounding box of map that is viewed in , separated EPSG:3857 format. The order of the coordinates is as follows: bottom left X, bottom left Y, top right X, top right Y.</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the start time doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned.  Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="layers"> layerd id (only one layer is supported and required) that matches the gridPlot id as configured in the gridDisplay. Every gridPlot that has been configured in the grid display configuration represents a WMS layer.</param>
        /// <param name="x">x position on the map in EPSG:3857 format.</param>
        /// <param name="y">y position on the map in EPSG:3857 format.</param>
        /// <param name="externalForecastTime">Time value of external forecast time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Used in combination with ensembleMemberId to identify a unique ensemble. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="ensembleMemberId">Used in combination with ensembleId to identify a unique ensemble &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="elevation">Used for 3d data, like for example water depth, to get the timeseries of a grid point at a specific elevation. &lt;i&gt;Since:  2020.01&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values. (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showVerticalProfile">Show vertical profile in case of 3D data. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. &lt;i&gt;Since: 2019.02&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Timeseries200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> TimeseriesgridWithHttpInfo(string bbox, DateTime startTime, DateTime endTime, string layers, double x, double y, DateTime? externalForecastTime = default(DateTime?), string ensembleId = default(string), string ensembleMemberId = default(string), double? elevation = default(double?), decimal? thinning = default(decimal?), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showVerticalProfile = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'bbox' is set
            if (bbox == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bbox' when calling TimeseriesApi->Timeseriesgrid");
            }

            // verify the required parameter 'layers' is set
            if (layers == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'layers' when calling TimeseriesApi->Timeseriesgrid");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "layers", layers));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "x", x));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "y", y));
            if (externalForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "externalForecastTime", externalForecastTime));
            }
            if (ensembleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ensembleId", ensembleId));
            }
            if (ensembleMemberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ensembleMemberId", ensembleMemberId));
            }
            if (elevation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "elevation", elevation));
            }
            if (thinning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "thinning", thinning));
            }
            if (importFromExternalDataSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "importFromExternalDataSource", importFromExternalDataSource));
            }
            if (convertDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "convertDatum", convertDatum));
            }
            if (showEnsembleMemberIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showEnsembleMemberIds", showEnsembleMemberIds));
            }
            if (useDisplayUnits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useDisplayUnits", useDisplayUnits));
            }
            if (showVerticalProfile != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showVerticalProfile", showVerticalProfile));
            }
            if (showThresholds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showThresholds", showThresholds));
            }
            if (omitMissing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitMissing", omitMissing));
            }
            if (omitEmptyTimeSeries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitEmptyTimeSeries", omitEmptyTimeSeries));
            }
            if (onlyManualEdits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyManualEdits", onlyManualEdits));
            }
            if (onlyHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyHeaders", onlyHeaders));
            }
            if (onlyForecasts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyForecasts", onlyForecasts));
            }
            if (showStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showStatistics", showStatistics));
            }
            if (useMilliseconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useMilliseconds", useMilliseconds));
            }
            if (showProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showProducts", showProducts));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TimeseriesApi.Timeseriesgrid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Timeseries200Response>("/timeseries/grid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Timeseriesgrid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the timeseries containing the data from a grid cell for a request period Get the timeseries containing the data from a grid cell for a request period. The grid is specified by passing a layerId.&lt;p&gt;The grid cell is determined by specifying a x and y coordinate and a bounding box. Currenly only EPSG:3857 is supported for the x,y, and bounding box coordinates. At least a layer, startTime, endTime, x,y and bounding box are required. The timeseries/grid endpoint is intended to be used together with the Delf-FEWS WMS service. Every layer that is provided by the WMS service, can be used with this endpoint.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">bounding box of map that is viewed in , separated EPSG:3857 format. The order of the coordinates is as follows: bottom left X, bottom left Y, top right X, top right Y.</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the start time doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned.  Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="layers"> layerd id (only one layer is supported and required) that matches the gridPlot id as configured in the gridDisplay. Every gridPlot that has been configured in the grid display configuration represents a WMS layer.</param>
        /// <param name="x">x position on the map in EPSG:3857 format.</param>
        /// <param name="y">y position on the map in EPSG:3857 format.</param>
        /// <param name="externalForecastTime">Time value of external forecast time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Used in combination with ensembleMemberId to identify a unique ensemble. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="ensembleMemberId">Used in combination with ensembleId to identify a unique ensemble &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="elevation">Used for 3d data, like for example water depth, to get the timeseries of a grid point at a specific elevation. &lt;i&gt;Since:  2020.01&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values. (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showVerticalProfile">Show vertical profile in case of 3D data. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. &lt;i&gt;Since: 2019.02&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Timeseries200Response</returns>
        public async System.Threading.Tasks.Task<Timeseries200Response> TimeseriesgridAsync(string bbox, DateTime startTime, DateTime endTime, string layers, double x, double y, DateTime? externalForecastTime = default(DateTime?), string ensembleId = default(string), string ensembleMemberId = default(string), double? elevation = default(double?), decimal? thinning = default(decimal?), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showVerticalProfile = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Timeseries200Response> localVarResponse = await TimeseriesgridWithHttpInfoAsync(bbox, startTime, endTime, layers, x, y, externalForecastTime, ensembleId, ensembleMemberId, elevation, thinning, importFromExternalDataSource, convertDatum, showEnsembleMemberIds, useDisplayUnits, showVerticalProfile, showThresholds, omitMissing, omitEmptyTimeSeries, onlyManualEdits, onlyHeaders, onlyForecasts, showStatistics, useMilliseconds, showProducts, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the timeseries containing the data from a grid cell for a request period Get the timeseries containing the data from a grid cell for a request period. The grid is specified by passing a layerId.&lt;p&gt;The grid cell is determined by specifying a x and y coordinate and a bounding box. Currenly only EPSG:3857 is supported for the x,y, and bounding box coordinates. At least a layer, startTime, endTime, x,y and bounding box are required. The timeseries/grid endpoint is intended to be used together with the Delf-FEWS WMS service. Every layer that is provided by the WMS service, can be used with this endpoint.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bbox">bounding box of map that is viewed in , separated EPSG:3857 format. The order of the coordinates is as follows: bottom left X, bottom left Y, top right X, top right Y.</param>
        /// <param name="startTime">Start time of search period that looks for timeseries values that are within this period. If the start time doesn&#39;t match a timestamp of the time series, the closest timestamp before the startTime, will also be returned.  Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time of search period that looks for timeseries values that are within this period. If the endTime doesn&#39;t match a timestamp of the time series, the closest timestamp after the endTime, will also be returned. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="layers"> layerd id (only one layer is supported and required) that matches the gridPlot id as configured in the gridDisplay. Every gridPlot that has been configured in the grid display configuration represents a WMS layer.</param>
        /// <param name="x">x position on the map in EPSG:3857 format.</param>
        /// <param name="y">y position on the map in EPSG:3857 format.</param>
        /// <param name="externalForecastTime">Time value of external forecast time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="ensembleId">Used in combination with ensembleMemberId to identify a unique ensemble. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="ensembleMemberId">Used in combination with ensembleId to identify a unique ensemble &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="elevation">Used for 3d data, like for example water depth, to get the timeseries of a grid point at a specific elevation. &lt;i&gt;Since:  2020.01&lt;/i&gt; (optional)</param>
        /// <param name="thinning">Thinning is used to retrieve the visually interesting time steps of timeSeries. It tries to keep the peaks and gaps and minimizes the number of time steps that have to be retrieved. It is typically used for visualizations. The value to be specified should be equal to the view period in milliseconds of the timeSeries that is visualized divided by the number of pixels that are available for display. For example: visualizing a view period of 5 years (157784760000 milliseconds) on a display of 1024 pixels, the thinning parameter should be set to 157784760000/1024 &#x3D; 15408668. unit ms/pixel. (optional)</param>
        /// <param name="importFromExternalDataSource">import data from external data source, defaults to true. (optional)</param>
        /// <param name="convertDatum">Convert values from relative location height to absolute height values. (optional)</param>
        /// <param name="showEnsembleMemberIds">Show ensemble member ids instead of ensemble member indices. (optional)</param>
        /// <param name="useDisplayUnits">Export values using display units. (optional)</param>
        /// <param name="showVerticalProfile">Show vertical profile in case of 3D data. &lt;i&gt;Since: 2020.01&lt;/i&gt; (optional)</param>
        /// <param name="showThresholds">Option to toggle the returning of threshold information in the headers. (optional)</param>
        /// <param name="omitMissing">Toggle omitting or returning of missing values in response. (optional)</param>
        /// <param name="omitEmptyTimeSeries">Toggle omitting or returning headers of empty timeSeries. Default is false. &lt;i&gt;Since: 2020.02&lt;/i&gt; (optional)</param>
        /// <param name="onlyManualEdits">Toggle to return only manual edits. (optional)</param>
        /// <param name="onlyHeaders">Toggle to return only header information or also data. (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). (optional)</param>
        /// <param name="showStatistics">Toggle to return statistics information about timeseries. Typically used in combination with onlyHeaders. Returns additional information about data availability of timeseries:&lt;ul&gt;&lt;li&gt;firstValueTime: First time with a value in the timeSeries&lt;/li&gt;&lt;li&gt;maxValue: Maximum value in the timeSeries&lt;/li&gt;&lt;li&gt;minValue: Minimum value in the timeSeries&lt;/li&gt;&lt;li&gt;valueCount: Number of values in the timeSeries&lt;/li&gt;&lt;/ul&gt;. These statistics are only provided if there is any data, otherwise they are left out. (optional)</param>
        /// <param name="useMilliseconds">Toggle to return milliseconds in time step. (optional)</param>
        /// <param name="showProducts">Toggle to display product information that is assigned to a forecast. &lt;i&gt;Since: 2019.02&lt;/i&gt; (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, DD_JSON, NOOS_TEXT,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Timeseries200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Timeseries200Response>> TimeseriesgridWithHttpInfoAsync(string bbox, DateTime startTime, DateTime endTime, string layers, double x, double y, DateTime? externalForecastTime = default(DateTime?), string ensembleId = default(string), string ensembleMemberId = default(string), double? elevation = default(double?), decimal? thinning = default(decimal?), string importFromExternalDataSource = default(string), string convertDatum = default(string), string showEnsembleMemberIds = default(string), string useDisplayUnits = default(string), string showVerticalProfile = default(string), string showThresholds = default(string), string omitMissing = default(string), string omitEmptyTimeSeries = default(string), string onlyManualEdits = default(string), string onlyHeaders = default(string), string onlyForecasts = default(string), string showStatistics = default(string), string useMilliseconds = default(string), string showProducts = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bbox' is set
            if (bbox == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bbox' when calling TimeseriesApi->Timeseriesgrid");
            }

            // verify the required parameter 'layers' is set
            if (layers == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'layers' when calling TimeseriesApi->Timeseriesgrid");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "layers", layers));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "x", x));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "y", y));
            if (externalForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "externalForecastTime", externalForecastTime));
            }
            if (ensembleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ensembleId", ensembleId));
            }
            if (ensembleMemberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ensembleMemberId", ensembleMemberId));
            }
            if (elevation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "elevation", elevation));
            }
            if (thinning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "thinning", thinning));
            }
            if (importFromExternalDataSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "importFromExternalDataSource", importFromExternalDataSource));
            }
            if (convertDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "convertDatum", convertDatum));
            }
            if (showEnsembleMemberIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showEnsembleMemberIds", showEnsembleMemberIds));
            }
            if (useDisplayUnits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useDisplayUnits", useDisplayUnits));
            }
            if (showVerticalProfile != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showVerticalProfile", showVerticalProfile));
            }
            if (showThresholds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showThresholds", showThresholds));
            }
            if (omitMissing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitMissing", omitMissing));
            }
            if (omitEmptyTimeSeries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "omitEmptyTimeSeries", omitEmptyTimeSeries));
            }
            if (onlyManualEdits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyManualEdits", onlyManualEdits));
            }
            if (onlyHeaders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyHeaders", onlyHeaders));
            }
            if (onlyForecasts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyForecasts", onlyForecasts));
            }
            if (showStatistics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showStatistics", showStatistics));
            }
            if (useMilliseconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "useMilliseconds", useMilliseconds));
            }
            if (showProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showProducts", showProducts));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TimeseriesApi.Timeseriesgrid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Timeseries200Response>("/timeseries/grid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Timeseriesgrid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
