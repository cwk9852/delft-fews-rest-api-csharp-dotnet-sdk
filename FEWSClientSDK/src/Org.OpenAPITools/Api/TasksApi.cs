/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all expected and pending runtimes for workflows per module instance id
        /// </summary>
        /// <remarks>
        /// Get all expected and pending runtimes for workflows per module instance id. The list can optionally be filtered by workflowId.  Only workflows of scheduled tasks that contain module instance descriptors that have been configured with updateModuleRunTimesOnCompletion enabled, will be available in this end point. The expected start time of a module is calculated based on the scheduled next due time and the expected pending duration time. The expected end time of a module is calculated based on the scheduled next due time, the expected pending duration time and the expected running time. For triggered tasks, the expected start time en end time won&#39;t be available until the task is actually started. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Filter module run time with the specified workflowId (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestModuleRunTimes</returns>
        PiRestModuleRunTimes Moduleruntimes(string workflowId = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get all expected and pending runtimes for workflows per module instance id
        /// </summary>
        /// <remarks>
        /// Get all expected and pending runtimes for workflows per module instance id. The list can optionally be filtered by workflowId.  Only workflows of scheduled tasks that contain module instance descriptors that have been configured with updateModuleRunTimesOnCompletion enabled, will be available in this end point. The expected start time of a module is calculated based on the scheduled next due time and the expected pending duration time. The expected end time of a module is calculated based on the scheduled next due time, the expected pending duration time and the expected running time. For triggered tasks, the expected start time en end time won&#39;t be available until the task is actually started. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Filter module run time with the specified workflowId (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestModuleRunTimes</returns>
        ApiResponse<PiRestModuleRunTimes> ModuleruntimesWithHttpInfo(string workflowId = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Runs a one-off task for a given workflowId
        /// </summary>
        /// <remarks>
        /// Runs a one-off task for a given workflowId. The application/x-www-form-urlencoded encoding has to be used. Returns a handle to the task in the form of a taskId. This taskId can be used to track the status of the workflow using the taskrunstatus method. Since 2018.02 it is possible to use a workflow descriptor attribute: waitWhenAlreadyRunning. This will allow running a task that hasn&#39;t been scheduled to wait when another task of that workflow is already running. Since 2022.02 properties can be included in the url. These will be used as taskRunProperties, and override global or workflow properties. Each property has to be added to the URL separately. Example: &amp;property(fileName)&#x3D;exportFile&amp;property(outputValue)&#x3D;9.0 , where the name of the property is fileName, the value is exportFile. The name of the second property is outputValue, the value is 9.0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Identifier of the task to run</param>
        /// <param name="startTime">Start of run period. Used for state selection period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End of run period. Used to define forecast length. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="timeZero">Forecast time zero. If missing System time is used. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="coldStateId">Cold state id (optional)</param>
        /// <param name="scenarioId">Id of a predefined WhatIf scenario. Can be used to alter run parameters  (optional)</param>
        /// <param name="userId">User id of the user that runs the task (optional)</param>
        /// <param name="description">Descriptive text to identify run (optional)</param>
        /// <param name="runOption">Run option can be any of: all, alloneatatime or allmostrecentonly. If not set, the default is used: all.\\nall: Multiple instances of this workflow can run simultaneously. alloneatatime: Running (and queued) instances of this workflow prevail. allmostrecentonly: A running instance of this workflow prevails. Queued instances of this workflow will be replaced by a recent one. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="piParametersXmlContent">URL Encoded model parameters content that validates against the following xsd: https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modelparameters.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string Postruntask(string workflowId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? timeZero = default(DateTime?), string coldStateId = default(string), string scenarioId = default(string), string userId = default(string), string description = default(string), string runOption = default(string), string piParametersXmlContent = default(string), int operationIndex = 0);

        /// <summary>
        /// Runs a one-off task for a given workflowId
        /// </summary>
        /// <remarks>
        /// Runs a one-off task for a given workflowId. The application/x-www-form-urlencoded encoding has to be used. Returns a handle to the task in the form of a taskId. This taskId can be used to track the status of the workflow using the taskrunstatus method. Since 2018.02 it is possible to use a workflow descriptor attribute: waitWhenAlreadyRunning. This will allow running a task that hasn&#39;t been scheduled to wait when another task of that workflow is already running. Since 2022.02 properties can be included in the url. These will be used as taskRunProperties, and override global or workflow properties. Each property has to be added to the URL separately. Example: &amp;property(fileName)&#x3D;exportFile&amp;property(outputValue)&#x3D;9.0 , where the name of the property is fileName, the value is exportFile. The name of the second property is outputValue, the value is 9.0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Identifier of the task to run</param>
        /// <param name="startTime">Start of run period. Used for state selection period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End of run period. Used to define forecast length. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="timeZero">Forecast time zero. If missing System time is used. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="coldStateId">Cold state id (optional)</param>
        /// <param name="scenarioId">Id of a predefined WhatIf scenario. Can be used to alter run parameters  (optional)</param>
        /// <param name="userId">User id of the user that runs the task (optional)</param>
        /// <param name="description">Descriptive text to identify run (optional)</param>
        /// <param name="runOption">Run option can be any of: all, alloneatatime or allmostrecentonly. If not set, the default is used: all.\\nall: Multiple instances of this workflow can run simultaneously. alloneatatime: Running (and queued) instances of this workflow prevail. allmostrecentonly: A running instance of this workflow prevails. Queued instances of this workflow will be replaced by a recent one. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="piParametersXmlContent">URL Encoded model parameters content that validates against the following xsd: https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modelparameters.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostruntaskWithHttpInfo(string workflowId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? timeZero = default(DateTime?), string coldStateId = default(string), string scenarioId = default(string), string userId = default(string), string description = default(string), string runOption = default(string), string piParametersXmlContent = default(string), int operationIndex = 0);
        /// <summary>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status
        /// </summary>
        /// <remarks>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status. Default only taskruns of forecasts are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id</param>
        /// <param name="whatIfId">WhatIf Id (optional)</param>
        /// <param name="mcId">Filter by mcId. &lt;i&gt;Since: 2021.01&lt;/i&gt; (optional)</param>
        /// <param name="startForecastTime">Forecast Start time task run (optional)</param>
        /// <param name="endForecastTime">Forecast end time task run (optional)</param>
        /// <param name="startDispatchTime">Dispatch Start time task run (optional)</param>
        /// <param name="endDispatchTime">Dispatch end time task run (optional)</param>
        /// <param name="taskRunStatusIds">Task run status ids (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). Default is &#39;true&#39; (optional)</param>
        /// <param name="onlyCurrent">Only Current Forecast (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestTaskruns</returns>
        PiRestTaskruns Taskruns(string workflowId, string whatIfId = default(string), string mcId = default(string), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? startDispatchTime = default(DateTime?), DateTime? endDispatchTime = default(DateTime?), List<string> taskRunStatusIds = default(List<string>), string onlyForecasts = default(string), string onlyCurrent = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status
        /// </summary>
        /// <remarks>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status. Default only taskruns of forecasts are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id</param>
        /// <param name="whatIfId">WhatIf Id (optional)</param>
        /// <param name="mcId">Filter by mcId. &lt;i&gt;Since: 2021.01&lt;/i&gt; (optional)</param>
        /// <param name="startForecastTime">Forecast Start time task run (optional)</param>
        /// <param name="endForecastTime">Forecast end time task run (optional)</param>
        /// <param name="startDispatchTime">Dispatch Start time task run (optional)</param>
        /// <param name="endDispatchTime">Dispatch end time task run (optional)</param>
        /// <param name="taskRunStatusIds">Task run status ids (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). Default is &#39;true&#39; (optional)</param>
        /// <param name="onlyCurrent">Only Current Forecast (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestTaskruns</returns>
        ApiResponse<PiRestTaskruns> TaskrunsWithHttpInfo(string workflowId, string whatIfId = default(string), string mcId = default(string), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? startDispatchTime = default(DateTime?), DateTime? endDispatchTime = default(DateTime?), List<string> taskRunStatusIds = default(List<string>), string onlyForecasts = default(string), string onlyCurrent = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed
        /// </summary>
        /// <remarks>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed.&lt;p&gt;Possible response codes are:&lt;ul&gt;&lt;li&gt;I &#x3D; Invalid&lt;li&gt;P &#x3D; Pending&lt;/li&gt;&lt;li&gt;T &#x3D; Terminated&lt;li&gt;R &#x3D; running&lt;/li&gt;&lt;li&gt;F &#x3D; Failed&lt;/li&gt;&lt;li&gt;C &#x3D; Completed fully successful&lt;/li&gt;&lt;li&gt;D &#x3D; Completed partly successful&lt;/li&gt;&lt;li&gt;A &#x3D; Approved&lt;/li&gt;&lt;li&gt;B &#x3D; Approved partly successful&lt;/li&gt;&lt;li&gt;null &#x3D; No status available (produces when method call times-out)&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Task Id</param>
        /// <param name="maxWaitMillis">Max waiting time in milliseconds (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestTaskrunstatus</returns>
        PiRestTaskrunstatus Taskrunstatus(string taskId, decimal? maxWaitMillis = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed
        /// </summary>
        /// <remarks>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed.&lt;p&gt;Possible response codes are:&lt;ul&gt;&lt;li&gt;I &#x3D; Invalid&lt;li&gt;P &#x3D; Pending&lt;/li&gt;&lt;li&gt;T &#x3D; Terminated&lt;li&gt;R &#x3D; running&lt;/li&gt;&lt;li&gt;F &#x3D; Failed&lt;/li&gt;&lt;li&gt;C &#x3D; Completed fully successful&lt;/li&gt;&lt;li&gt;D &#x3D; Completed partly successful&lt;/li&gt;&lt;li&gt;A &#x3D; Approved&lt;/li&gt;&lt;li&gt;B &#x3D; Approved partly successful&lt;/li&gt;&lt;li&gt;null &#x3D; No status available (produces when method call times-out)&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Task Id</param>
        /// <param name="maxWaitMillis">Max waiting time in milliseconds (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestTaskrunstatus</returns>
        ApiResponse<PiRestTaskrunstatus> TaskrunstatusWithHttpInfo(string taskId, decimal? maxWaitMillis = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all expected and pending runtimes for workflows per module instance id
        /// </summary>
        /// <remarks>
        /// Get all expected and pending runtimes for workflows per module instance id. The list can optionally be filtered by workflowId.  Only workflows of scheduled tasks that contain module instance descriptors that have been configured with updateModuleRunTimesOnCompletion enabled, will be available in this end point. The expected start time of a module is calculated based on the scheduled next due time and the expected pending duration time. The expected end time of a module is calculated based on the scheduled next due time, the expected pending duration time and the expected running time. For triggered tasks, the expected start time en end time won&#39;t be available until the task is actually started. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Filter module run time with the specified workflowId (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestModuleRunTimes</returns>
        System.Threading.Tasks.Task<PiRestModuleRunTimes> ModuleruntimesAsync(string workflowId = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all expected and pending runtimes for workflows per module instance id
        /// </summary>
        /// <remarks>
        /// Get all expected and pending runtimes for workflows per module instance id. The list can optionally be filtered by workflowId.  Only workflows of scheduled tasks that contain module instance descriptors that have been configured with updateModuleRunTimesOnCompletion enabled, will be available in this end point. The expected start time of a module is calculated based on the scheduled next due time and the expected pending duration time. The expected end time of a module is calculated based on the scheduled next due time, the expected pending duration time and the expected running time. For triggered tasks, the expected start time en end time won&#39;t be available until the task is actually started. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Filter module run time with the specified workflowId (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestModuleRunTimes)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestModuleRunTimes>> ModuleruntimesWithHttpInfoAsync(string workflowId = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Runs a one-off task for a given workflowId
        /// </summary>
        /// <remarks>
        /// Runs a one-off task for a given workflowId. The application/x-www-form-urlencoded encoding has to be used. Returns a handle to the task in the form of a taskId. This taskId can be used to track the status of the workflow using the taskrunstatus method. Since 2018.02 it is possible to use a workflow descriptor attribute: waitWhenAlreadyRunning. This will allow running a task that hasn&#39;t been scheduled to wait when another task of that workflow is already running. Since 2022.02 properties can be included in the url. These will be used as taskRunProperties, and override global or workflow properties. Each property has to be added to the URL separately. Example: &amp;property(fileName)&#x3D;exportFile&amp;property(outputValue)&#x3D;9.0 , where the name of the property is fileName, the value is exportFile. The name of the second property is outputValue, the value is 9.0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Identifier of the task to run</param>
        /// <param name="startTime">Start of run period. Used for state selection period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End of run period. Used to define forecast length. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="timeZero">Forecast time zero. If missing System time is used. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="coldStateId">Cold state id (optional)</param>
        /// <param name="scenarioId">Id of a predefined WhatIf scenario. Can be used to alter run parameters  (optional)</param>
        /// <param name="userId">User id of the user that runs the task (optional)</param>
        /// <param name="description">Descriptive text to identify run (optional)</param>
        /// <param name="runOption">Run option can be any of: all, alloneatatime or allmostrecentonly. If not set, the default is used: all.\\nall: Multiple instances of this workflow can run simultaneously. alloneatatime: Running (and queued) instances of this workflow prevail. allmostrecentonly: A running instance of this workflow prevails. Queued instances of this workflow will be replaced by a recent one. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="piParametersXmlContent">URL Encoded model parameters content that validates against the following xsd: https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modelparameters.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostruntaskAsync(string workflowId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? timeZero = default(DateTime?), string coldStateId = default(string), string scenarioId = default(string), string userId = default(string), string description = default(string), string runOption = default(string), string piParametersXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Runs a one-off task for a given workflowId
        /// </summary>
        /// <remarks>
        /// Runs a one-off task for a given workflowId. The application/x-www-form-urlencoded encoding has to be used. Returns a handle to the task in the form of a taskId. This taskId can be used to track the status of the workflow using the taskrunstatus method. Since 2018.02 it is possible to use a workflow descriptor attribute: waitWhenAlreadyRunning. This will allow running a task that hasn&#39;t been scheduled to wait when another task of that workflow is already running. Since 2022.02 properties can be included in the url. These will be used as taskRunProperties, and override global or workflow properties. Each property has to be added to the URL separately. Example: &amp;property(fileName)&#x3D;exportFile&amp;property(outputValue)&#x3D;9.0 , where the name of the property is fileName, the value is exportFile. The name of the second property is outputValue, the value is 9.0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Identifier of the task to run</param>
        /// <param name="startTime">Start of run period. Used for state selection period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End of run period. Used to define forecast length. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="timeZero">Forecast time zero. If missing System time is used. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="coldStateId">Cold state id (optional)</param>
        /// <param name="scenarioId">Id of a predefined WhatIf scenario. Can be used to alter run parameters  (optional)</param>
        /// <param name="userId">User id of the user that runs the task (optional)</param>
        /// <param name="description">Descriptive text to identify run (optional)</param>
        /// <param name="runOption">Run option can be any of: all, alloneatatime or allmostrecentonly. If not set, the default is used: all.\\nall: Multiple instances of this workflow can run simultaneously. alloneatatime: Running (and queued) instances of this workflow prevail. allmostrecentonly: A running instance of this workflow prevails. Queued instances of this workflow will be replaced by a recent one. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="piParametersXmlContent">URL Encoded model parameters content that validates against the following xsd: https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modelparameters.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostruntaskWithHttpInfoAsync(string workflowId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? timeZero = default(DateTime?), string coldStateId = default(string), string scenarioId = default(string), string userId = default(string), string description = default(string), string runOption = default(string), string piParametersXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status
        /// </summary>
        /// <remarks>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status. Default only taskruns of forecasts are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id</param>
        /// <param name="whatIfId">WhatIf Id (optional)</param>
        /// <param name="mcId">Filter by mcId. &lt;i&gt;Since: 2021.01&lt;/i&gt; (optional)</param>
        /// <param name="startForecastTime">Forecast Start time task run (optional)</param>
        /// <param name="endForecastTime">Forecast end time task run (optional)</param>
        /// <param name="startDispatchTime">Dispatch Start time task run (optional)</param>
        /// <param name="endDispatchTime">Dispatch end time task run (optional)</param>
        /// <param name="taskRunStatusIds">Task run status ids (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). Default is &#39;true&#39; (optional)</param>
        /// <param name="onlyCurrent">Only Current Forecast (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestTaskruns</returns>
        System.Threading.Tasks.Task<PiRestTaskruns> TaskrunsAsync(string workflowId, string whatIfId = default(string), string mcId = default(string), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? startDispatchTime = default(DateTime?), DateTime? endDispatchTime = default(DateTime?), List<string> taskRunStatusIds = default(List<string>), string onlyForecasts = default(string), string onlyCurrent = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status
        /// </summary>
        /// <remarks>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status. Default only taskruns of forecasts are returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id</param>
        /// <param name="whatIfId">WhatIf Id (optional)</param>
        /// <param name="mcId">Filter by mcId. &lt;i&gt;Since: 2021.01&lt;/i&gt; (optional)</param>
        /// <param name="startForecastTime">Forecast Start time task run (optional)</param>
        /// <param name="endForecastTime">Forecast end time task run (optional)</param>
        /// <param name="startDispatchTime">Dispatch Start time task run (optional)</param>
        /// <param name="endDispatchTime">Dispatch end time task run (optional)</param>
        /// <param name="taskRunStatusIds">Task run status ids (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). Default is &#39;true&#39; (optional)</param>
        /// <param name="onlyCurrent">Only Current Forecast (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestTaskruns)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestTaskruns>> TaskrunsWithHttpInfoAsync(string workflowId, string whatIfId = default(string), string mcId = default(string), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? startDispatchTime = default(DateTime?), DateTime? endDispatchTime = default(DateTime?), List<string> taskRunStatusIds = default(List<string>), string onlyForecasts = default(string), string onlyCurrent = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed
        /// </summary>
        /// <remarks>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed.&lt;p&gt;Possible response codes are:&lt;ul&gt;&lt;li&gt;I &#x3D; Invalid&lt;li&gt;P &#x3D; Pending&lt;/li&gt;&lt;li&gt;T &#x3D; Terminated&lt;li&gt;R &#x3D; running&lt;/li&gt;&lt;li&gt;F &#x3D; Failed&lt;/li&gt;&lt;li&gt;C &#x3D; Completed fully successful&lt;/li&gt;&lt;li&gt;D &#x3D; Completed partly successful&lt;/li&gt;&lt;li&gt;A &#x3D; Approved&lt;/li&gt;&lt;li&gt;B &#x3D; Approved partly successful&lt;/li&gt;&lt;li&gt;null &#x3D; No status available (produces when method call times-out)&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Task Id</param>
        /// <param name="maxWaitMillis">Max waiting time in milliseconds (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestTaskrunstatus</returns>
        System.Threading.Tasks.Task<PiRestTaskrunstatus> TaskrunstatusAsync(string taskId, decimal? maxWaitMillis = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed
        /// </summary>
        /// <remarks>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed.&lt;p&gt;Possible response codes are:&lt;ul&gt;&lt;li&gt;I &#x3D; Invalid&lt;li&gt;P &#x3D; Pending&lt;/li&gt;&lt;li&gt;T &#x3D; Terminated&lt;li&gt;R &#x3D; running&lt;/li&gt;&lt;li&gt;F &#x3D; Failed&lt;/li&gt;&lt;li&gt;C &#x3D; Completed fully successful&lt;/li&gt;&lt;li&gt;D &#x3D; Completed partly successful&lt;/li&gt;&lt;li&gt;A &#x3D; Approved&lt;/li&gt;&lt;li&gt;B &#x3D; Approved partly successful&lt;/li&gt;&lt;li&gt;null &#x3D; No status available (produces when method call times-out)&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Task Id</param>
        /// <param name="maxWaitMillis">Max waiting time in milliseconds (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestTaskrunstatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestTaskrunstatus>> TaskrunstatusWithHttpInfoAsync(string taskId, decimal? maxWaitMillis = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : ITasksApiSync, ITasksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TasksApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all expected and pending runtimes for workflows per module instance id Get all expected and pending runtimes for workflows per module instance id. The list can optionally be filtered by workflowId.  Only workflows of scheduled tasks that contain module instance descriptors that have been configured with updateModuleRunTimesOnCompletion enabled, will be available in this end point. The expected start time of a module is calculated based on the scheduled next due time and the expected pending duration time. The expected end time of a module is calculated based on the scheduled next due time, the expected pending duration time and the expected running time. For triggered tasks, the expected start time en end time won&#39;t be available until the task is actually started. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Filter module run time with the specified workflowId (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestModuleRunTimes</returns>
        public PiRestModuleRunTimes Moduleruntimes(string workflowId = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestModuleRunTimes> localVarResponse = ModuleruntimesWithHttpInfo(workflowId, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all expected and pending runtimes for workflows per module instance id Get all expected and pending runtimes for workflows per module instance id. The list can optionally be filtered by workflowId.  Only workflows of scheduled tasks that contain module instance descriptors that have been configured with updateModuleRunTimesOnCompletion enabled, will be available in this end point. The expected start time of a module is calculated based on the scheduled next due time and the expected pending duration time. The expected end time of a module is calculated based on the scheduled next due time, the expected pending duration time and the expected running time. For triggered tasks, the expected start time en end time won&#39;t be available until the task is actually started. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Filter module run time with the specified workflowId (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestModuleRunTimes</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestModuleRunTimes> ModuleruntimesWithHttpInfo(string workflowId = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (workflowId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "workflowId", workflowId));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TasksApi.Moduleruntimes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestModuleRunTimes>("/moduleruntimes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Moduleruntimes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all expected and pending runtimes for workflows per module instance id Get all expected and pending runtimes for workflows per module instance id. The list can optionally be filtered by workflowId.  Only workflows of scheduled tasks that contain module instance descriptors that have been configured with updateModuleRunTimesOnCompletion enabled, will be available in this end point. The expected start time of a module is calculated based on the scheduled next due time and the expected pending duration time. The expected end time of a module is calculated based on the scheduled next due time, the expected pending duration time and the expected running time. For triggered tasks, the expected start time en end time won&#39;t be available until the task is actually started. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Filter module run time with the specified workflowId (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestModuleRunTimes</returns>
        public async System.Threading.Tasks.Task<PiRestModuleRunTimes> ModuleruntimesAsync(string workflowId = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestModuleRunTimes> localVarResponse = await ModuleruntimesWithHttpInfoAsync(workflowId, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all expected and pending runtimes for workflows per module instance id Get all expected and pending runtimes for workflows per module instance id. The list can optionally be filtered by workflowId.  Only workflows of scheduled tasks that contain module instance descriptors that have been configured with updateModuleRunTimesOnCompletion enabled, will be available in this end point. The expected start time of a module is calculated based on the scheduled next due time and the expected pending duration time. The expected end time of a module is calculated based on the scheduled next due time, the expected pending duration time and the expected running time. For triggered tasks, the expected start time en end time won&#39;t be available until the task is actually started. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Filter module run time with the specified workflowId (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestModuleRunTimes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestModuleRunTimes>> ModuleruntimesWithHttpInfoAsync(string workflowId = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (workflowId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "workflowId", workflowId));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TasksApi.Moduleruntimes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestModuleRunTimes>("/moduleruntimes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Moduleruntimes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Runs a one-off task for a given workflowId Runs a one-off task for a given workflowId. The application/x-www-form-urlencoded encoding has to be used. Returns a handle to the task in the form of a taskId. This taskId can be used to track the status of the workflow using the taskrunstatus method. Since 2018.02 it is possible to use a workflow descriptor attribute: waitWhenAlreadyRunning. This will allow running a task that hasn&#39;t been scheduled to wait when another task of that workflow is already running. Since 2022.02 properties can be included in the url. These will be used as taskRunProperties, and override global or workflow properties. Each property has to be added to the URL separately. Example: &amp;property(fileName)&#x3D;exportFile&amp;property(outputValue)&#x3D;9.0 , where the name of the property is fileName, the value is exportFile. The name of the second property is outputValue, the value is 9.0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Identifier of the task to run</param>
        /// <param name="startTime">Start of run period. Used for state selection period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End of run period. Used to define forecast length. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="timeZero">Forecast time zero. If missing System time is used. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="coldStateId">Cold state id (optional)</param>
        /// <param name="scenarioId">Id of a predefined WhatIf scenario. Can be used to alter run parameters  (optional)</param>
        /// <param name="userId">User id of the user that runs the task (optional)</param>
        /// <param name="description">Descriptive text to identify run (optional)</param>
        /// <param name="runOption">Run option can be any of: all, alloneatatime or allmostrecentonly. If not set, the default is used: all.\\nall: Multiple instances of this workflow can run simultaneously. alloneatatime: Running (and queued) instances of this workflow prevail. allmostrecentonly: A running instance of this workflow prevails. Queued instances of this workflow will be replaced by a recent one. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="piParametersXmlContent">URL Encoded model parameters content that validates against the following xsd: https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modelparameters.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string Postruntask(string workflowId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? timeZero = default(DateTime?), string coldStateId = default(string), string scenarioId = default(string), string userId = default(string), string description = default(string), string runOption = default(string), string piParametersXmlContent = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = PostruntaskWithHttpInfo(workflowId, startTime, endTime, timeZero, coldStateId, scenarioId, userId, description, runOption, piParametersXmlContent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Runs a one-off task for a given workflowId Runs a one-off task for a given workflowId. The application/x-www-form-urlencoded encoding has to be used. Returns a handle to the task in the form of a taskId. This taskId can be used to track the status of the workflow using the taskrunstatus method. Since 2018.02 it is possible to use a workflow descriptor attribute: waitWhenAlreadyRunning. This will allow running a task that hasn&#39;t been scheduled to wait when another task of that workflow is already running. Since 2022.02 properties can be included in the url. These will be used as taskRunProperties, and override global or workflow properties. Each property has to be added to the URL separately. Example: &amp;property(fileName)&#x3D;exportFile&amp;property(outputValue)&#x3D;9.0 , where the name of the property is fileName, the value is exportFile. The name of the second property is outputValue, the value is 9.0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Identifier of the task to run</param>
        /// <param name="startTime">Start of run period. Used for state selection period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End of run period. Used to define forecast length. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="timeZero">Forecast time zero. If missing System time is used. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="coldStateId">Cold state id (optional)</param>
        /// <param name="scenarioId">Id of a predefined WhatIf scenario. Can be used to alter run parameters  (optional)</param>
        /// <param name="userId">User id of the user that runs the task (optional)</param>
        /// <param name="description">Descriptive text to identify run (optional)</param>
        /// <param name="runOption">Run option can be any of: all, alloneatatime or allmostrecentonly. If not set, the default is used: all.\\nall: Multiple instances of this workflow can run simultaneously. alloneatatime: Running (and queued) instances of this workflow prevail. allmostrecentonly: A running instance of this workflow prevails. Queued instances of this workflow will be replaced by a recent one. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="piParametersXmlContent">URL Encoded model parameters content that validates against the following xsd: https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modelparameters.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> PostruntaskWithHttpInfo(string workflowId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? timeZero = default(DateTime?), string coldStateId = default(string), string scenarioId = default(string), string userId = default(string), string description = default(string), string runOption = default(string), string piParametersXmlContent = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'workflowId' when calling TasksApi->Postruntask");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "workflowId", workflowId));
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (timeZero != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeZero", timeZero));
            }
            if (coldStateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "coldStateId", coldStateId));
            }
            if (scenarioId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "scenarioId", scenarioId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (runOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "runOption", runOption));
            }
            if (piParametersXmlContent != null)
            {
                localVarRequestOptions.FormParameters.Add("piParametersXmlContent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(piParametersXmlContent)); // form parameter
            }

            localVarRequestOptions.Operation = "TasksApi.Postruntask";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/runtask", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Postruntask", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Runs a one-off task for a given workflowId Runs a one-off task for a given workflowId. The application/x-www-form-urlencoded encoding has to be used. Returns a handle to the task in the form of a taskId. This taskId can be used to track the status of the workflow using the taskrunstatus method. Since 2018.02 it is possible to use a workflow descriptor attribute: waitWhenAlreadyRunning. This will allow running a task that hasn&#39;t been scheduled to wait when another task of that workflow is already running. Since 2022.02 properties can be included in the url. These will be used as taskRunProperties, and override global or workflow properties. Each property has to be added to the URL separately. Example: &amp;property(fileName)&#x3D;exportFile&amp;property(outputValue)&#x3D;9.0 , where the name of the property is fileName, the value is exportFile. The name of the second property is outputValue, the value is 9.0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Identifier of the task to run</param>
        /// <param name="startTime">Start of run period. Used for state selection period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End of run period. Used to define forecast length. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="timeZero">Forecast time zero. If missing System time is used. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="coldStateId">Cold state id (optional)</param>
        /// <param name="scenarioId">Id of a predefined WhatIf scenario. Can be used to alter run parameters  (optional)</param>
        /// <param name="userId">User id of the user that runs the task (optional)</param>
        /// <param name="description">Descriptive text to identify run (optional)</param>
        /// <param name="runOption">Run option can be any of: all, alloneatatime or allmostrecentonly. If not set, the default is used: all.\\nall: Multiple instances of this workflow can run simultaneously. alloneatatime: Running (and queued) instances of this workflow prevail. allmostrecentonly: A running instance of this workflow prevails. Queued instances of this workflow will be replaced by a recent one. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="piParametersXmlContent">URL Encoded model parameters content that validates against the following xsd: https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modelparameters.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostruntaskAsync(string workflowId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? timeZero = default(DateTime?), string coldStateId = default(string), string scenarioId = default(string), string userId = default(string), string description = default(string), string runOption = default(string), string piParametersXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await PostruntaskWithHttpInfoAsync(workflowId, startTime, endTime, timeZero, coldStateId, scenarioId, userId, description, runOption, piParametersXmlContent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Runs a one-off task for a given workflowId Runs a one-off task for a given workflowId. The application/x-www-form-urlencoded encoding has to be used. Returns a handle to the task in the form of a taskId. This taskId can be used to track the status of the workflow using the taskrunstatus method. Since 2018.02 it is possible to use a workflow descriptor attribute: waitWhenAlreadyRunning. This will allow running a task that hasn&#39;t been scheduled to wait when another task of that workflow is already running. Since 2022.02 properties can be included in the url. These will be used as taskRunProperties, and override global or workflow properties. Each property has to be added to the URL separately. Example: &amp;property(fileName)&#x3D;exportFile&amp;property(outputValue)&#x3D;9.0 , where the name of the property is fileName, the value is exportFile. The name of the second property is outputValue, the value is 9.0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Identifier of the task to run</param>
        /// <param name="startTime">Start of run period. Used for state selection period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End of run period. Used to define forecast length. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="timeZero">Forecast time zero. If missing System time is used. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="coldStateId">Cold state id (optional)</param>
        /// <param name="scenarioId">Id of a predefined WhatIf scenario. Can be used to alter run parameters  (optional)</param>
        /// <param name="userId">User id of the user that runs the task (optional)</param>
        /// <param name="description">Descriptive text to identify run (optional)</param>
        /// <param name="runOption">Run option can be any of: all, alloneatatime or allmostrecentonly. If not set, the default is used: all.\\nall: Multiple instances of this workflow can run simultaneously. alloneatatime: Running (and queued) instances of this workflow prevail. allmostrecentonly: A running instance of this workflow prevails. Queued instances of this workflow will be replaced by a recent one. &lt;i&gt;Since: 2022.02&lt;/i&gt; (optional)</param>
        /// <param name="piParametersXmlContent">URL Encoded model parameters content that validates against the following xsd: https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modelparameters.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> PostruntaskWithHttpInfoAsync(string workflowId, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? timeZero = default(DateTime?), string coldStateId = default(string), string scenarioId = default(string), string userId = default(string), string description = default(string), string runOption = default(string), string piParametersXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'workflowId' when calling TasksApi->Postruntask");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "workflowId", workflowId));
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (timeZero != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeZero", timeZero));
            }
            if (coldStateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "coldStateId", coldStateId));
            }
            if (scenarioId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "scenarioId", scenarioId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (runOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "runOption", runOption));
            }
            if (piParametersXmlContent != null)
            {
                localVarRequestOptions.FormParameters.Add("piParametersXmlContent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(piParametersXmlContent)); // form parameter
            }

            localVarRequestOptions.Operation = "TasksApi.Postruntask";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/runtask", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Postruntask", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status. Default only taskruns of forecasts are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id</param>
        /// <param name="whatIfId">WhatIf Id (optional)</param>
        /// <param name="mcId">Filter by mcId. &lt;i&gt;Since: 2021.01&lt;/i&gt; (optional)</param>
        /// <param name="startForecastTime">Forecast Start time task run (optional)</param>
        /// <param name="endForecastTime">Forecast end time task run (optional)</param>
        /// <param name="startDispatchTime">Dispatch Start time task run (optional)</param>
        /// <param name="endDispatchTime">Dispatch end time task run (optional)</param>
        /// <param name="taskRunStatusIds">Task run status ids (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). Default is &#39;true&#39; (optional)</param>
        /// <param name="onlyCurrent">Only Current Forecast (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestTaskruns</returns>
        public PiRestTaskruns Taskruns(string workflowId, string whatIfId = default(string), string mcId = default(string), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? startDispatchTime = default(DateTime?), DateTime? endDispatchTime = default(DateTime?), List<string> taskRunStatusIds = default(List<string>), string onlyForecasts = default(string), string onlyCurrent = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestTaskruns> localVarResponse = TaskrunsWithHttpInfo(workflowId, whatIfId, mcId, startForecastTime, endForecastTime, startDispatchTime, endDispatchTime, taskRunStatusIds, onlyForecasts, onlyCurrent, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status. Default only taskruns of forecasts are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id</param>
        /// <param name="whatIfId">WhatIf Id (optional)</param>
        /// <param name="mcId">Filter by mcId. &lt;i&gt;Since: 2021.01&lt;/i&gt; (optional)</param>
        /// <param name="startForecastTime">Forecast Start time task run (optional)</param>
        /// <param name="endForecastTime">Forecast end time task run (optional)</param>
        /// <param name="startDispatchTime">Dispatch Start time task run (optional)</param>
        /// <param name="endDispatchTime">Dispatch end time task run (optional)</param>
        /// <param name="taskRunStatusIds">Task run status ids (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). Default is &#39;true&#39; (optional)</param>
        /// <param name="onlyCurrent">Only Current Forecast (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestTaskruns</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestTaskruns> TaskrunsWithHttpInfo(string workflowId, string whatIfId = default(string), string mcId = default(string), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? startDispatchTime = default(DateTime?), DateTime? endDispatchTime = default(DateTime?), List<string> taskRunStatusIds = default(List<string>), string onlyForecasts = default(string), string onlyCurrent = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'workflowId' when calling TasksApi->Taskruns");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "workflowId", workflowId));
            if (whatIfId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "whatIfId", whatIfId));
            }
            if (mcId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mcId", mcId));
            }
            if (startForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startForecastTime", startForecastTime));
            }
            if (endForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endForecastTime", endForecastTime));
            }
            if (startDispatchTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startDispatchTime", startDispatchTime));
            }
            if (endDispatchTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endDispatchTime", endDispatchTime));
            }
            if (taskRunStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "taskRunStatusIds", taskRunStatusIds));
            }
            if (onlyForecasts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyForecasts", onlyForecasts));
            }
            if (onlyCurrent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyCurrent", onlyCurrent));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TasksApi.Taskruns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestTaskruns>("/taskruns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Taskruns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status. Default only taskruns of forecasts are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id</param>
        /// <param name="whatIfId">WhatIf Id (optional)</param>
        /// <param name="mcId">Filter by mcId. &lt;i&gt;Since: 2021.01&lt;/i&gt; (optional)</param>
        /// <param name="startForecastTime">Forecast Start time task run (optional)</param>
        /// <param name="endForecastTime">Forecast end time task run (optional)</param>
        /// <param name="startDispatchTime">Dispatch Start time task run (optional)</param>
        /// <param name="endDispatchTime">Dispatch end time task run (optional)</param>
        /// <param name="taskRunStatusIds">Task run status ids (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). Default is &#39;true&#39; (optional)</param>
        /// <param name="onlyCurrent">Only Current Forecast (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestTaskruns</returns>
        public async System.Threading.Tasks.Task<PiRestTaskruns> TaskrunsAsync(string workflowId, string whatIfId = default(string), string mcId = default(string), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? startDispatchTime = default(DateTime?), DateTime? endDispatchTime = default(DateTime?), List<string> taskRunStatusIds = default(List<string>), string onlyForecasts = default(string), string onlyCurrent = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestTaskruns> localVarResponse = await TaskrunsWithHttpInfoAsync(workflowId, whatIfId, mcId, startForecastTime, endForecastTime, startDispatchTime, endDispatchTime, taskRunStatusIds, onlyForecasts, onlyCurrent, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status Get all taskruns for a workflowId filtered by parameters like forecast time or taskrun status. Default only taskruns of forecasts are returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id</param>
        /// <param name="whatIfId">WhatIf Id (optional)</param>
        /// <param name="mcId">Filter by mcId. &lt;i&gt;Since: 2021.01&lt;/i&gt; (optional)</param>
        /// <param name="startForecastTime">Forecast Start time task run (optional)</param>
        /// <param name="endForecastTime">Forecast end time task run (optional)</param>
        /// <param name="startDispatchTime">Dispatch Start time task run (optional)</param>
        /// <param name="endDispatchTime">Dispatch end time task run (optional)</param>
        /// <param name="taskRunStatusIds">Task run status ids (optional)</param>
        /// <param name="onlyForecasts">Toggle to return only forecast timeSeries (Since 2017.02). Default is &#39;true&#39; (optional)</param>
        /// <param name="onlyCurrent">Only Current Forecast (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestTaskruns)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestTaskruns>> TaskrunsWithHttpInfoAsync(string workflowId, string whatIfId = default(string), string mcId = default(string), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? startDispatchTime = default(DateTime?), DateTime? endDispatchTime = default(DateTime?), List<string> taskRunStatusIds = default(List<string>), string onlyForecasts = default(string), string onlyCurrent = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'workflowId' when calling TasksApi->Taskruns");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "workflowId", workflowId));
            if (whatIfId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "whatIfId", whatIfId));
            }
            if (mcId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mcId", mcId));
            }
            if (startForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startForecastTime", startForecastTime));
            }
            if (endForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endForecastTime", endForecastTime));
            }
            if (startDispatchTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startDispatchTime", startDispatchTime));
            }
            if (endDispatchTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endDispatchTime", endDispatchTime));
            }
            if (taskRunStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "taskRunStatusIds", taskRunStatusIds));
            }
            if (onlyForecasts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyForecasts", onlyForecasts));
            }
            if (onlyCurrent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyCurrent", onlyCurrent));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TasksApi.Taskruns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestTaskruns>("/taskruns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Taskruns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed.&lt;p&gt;Possible response codes are:&lt;ul&gt;&lt;li&gt;I &#x3D; Invalid&lt;li&gt;P &#x3D; Pending&lt;/li&gt;&lt;li&gt;T &#x3D; Terminated&lt;li&gt;R &#x3D; running&lt;/li&gt;&lt;li&gt;F &#x3D; Failed&lt;/li&gt;&lt;li&gt;C &#x3D; Completed fully successful&lt;/li&gt;&lt;li&gt;D &#x3D; Completed partly successful&lt;/li&gt;&lt;li&gt;A &#x3D; Approved&lt;/li&gt;&lt;li&gt;B &#x3D; Approved partly successful&lt;/li&gt;&lt;li&gt;null &#x3D; No status available (produces when method call times-out)&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Task Id</param>
        /// <param name="maxWaitMillis">Max waiting time in milliseconds (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestTaskrunstatus</returns>
        public PiRestTaskrunstatus Taskrunstatus(string taskId, decimal? maxWaitMillis = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestTaskrunstatus> localVarResponse = TaskrunstatusWithHttpInfo(taskId, maxWaitMillis, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed.&lt;p&gt;Possible response codes are:&lt;ul&gt;&lt;li&gt;I &#x3D; Invalid&lt;li&gt;P &#x3D; Pending&lt;/li&gt;&lt;li&gt;T &#x3D; Terminated&lt;li&gt;R &#x3D; running&lt;/li&gt;&lt;li&gt;F &#x3D; Failed&lt;/li&gt;&lt;li&gt;C &#x3D; Completed fully successful&lt;/li&gt;&lt;li&gt;D &#x3D; Completed partly successful&lt;/li&gt;&lt;li&gt;A &#x3D; Approved&lt;/li&gt;&lt;li&gt;B &#x3D; Approved partly successful&lt;/li&gt;&lt;li&gt;null &#x3D; No status available (produces when method call times-out)&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Task Id</param>
        /// <param name="maxWaitMillis">Max waiting time in milliseconds (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestTaskrunstatus</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestTaskrunstatus> TaskrunstatusWithHttpInfo(string taskId, decimal? maxWaitMillis = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->Taskrunstatus");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            if (maxWaitMillis != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxWaitMillis", maxWaitMillis));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TasksApi.Taskrunstatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestTaskrunstatus>("/taskrunstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Taskrunstatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed.&lt;p&gt;Possible response codes are:&lt;ul&gt;&lt;li&gt;I &#x3D; Invalid&lt;li&gt;P &#x3D; Pending&lt;/li&gt;&lt;li&gt;T &#x3D; Terminated&lt;li&gt;R &#x3D; running&lt;/li&gt;&lt;li&gt;F &#x3D; Failed&lt;/li&gt;&lt;li&gt;C &#x3D; Completed fully successful&lt;/li&gt;&lt;li&gt;D &#x3D; Completed partly successful&lt;/li&gt;&lt;li&gt;A &#x3D; Approved&lt;/li&gt;&lt;li&gt;B &#x3D; Approved partly successful&lt;/li&gt;&lt;li&gt;null &#x3D; No status available (produces when method call times-out)&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Task Id</param>
        /// <param name="maxWaitMillis">Max waiting time in milliseconds (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestTaskrunstatus</returns>
        public async System.Threading.Tasks.Task<PiRestTaskrunstatus> TaskrunstatusAsync(string taskId, decimal? maxWaitMillis = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestTaskrunstatus> localVarResponse = await TaskrunstatusWithHttpInfoAsync(taskId, maxWaitMillis, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed Track the status of a workflow using the taskId, typically used to determine if a taskrun is completed.&lt;p&gt;Possible response codes are:&lt;ul&gt;&lt;li&gt;I &#x3D; Invalid&lt;li&gt;P &#x3D; Pending&lt;/li&gt;&lt;li&gt;T &#x3D; Terminated&lt;li&gt;R &#x3D; running&lt;/li&gt;&lt;li&gt;F &#x3D; Failed&lt;/li&gt;&lt;li&gt;C &#x3D; Completed fully successful&lt;/li&gt;&lt;li&gt;D &#x3D; Completed partly successful&lt;/li&gt;&lt;li&gt;A &#x3D; Approved&lt;/li&gt;&lt;li&gt;B &#x3D; Approved partly successful&lt;/li&gt;&lt;li&gt;null &#x3D; No status available (produces when method call times-out)&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Task Id</param>
        /// <param name="maxWaitMillis">Max waiting time in milliseconds (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestTaskrunstatus)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestTaskrunstatus>> TaskrunstatusWithHttpInfoAsync(string taskId, decimal? maxWaitMillis = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->Taskrunstatus");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            if (maxWaitMillis != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxWaitMillis", maxWaitMillis));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "TasksApi.Taskrunstatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestTaskrunstatus>("/taskrunstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Taskrunstatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
