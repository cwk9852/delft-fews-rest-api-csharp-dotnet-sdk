/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessdataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream
        /// </summary>
        /// <remarks>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream. A property EXPORT_FOLDER_PROCESS_DATA should be configured in the global properties or in the webservice properties. The workflow indicated by the workflow id should export data to a folder EXPORT_FOLDER_PROCESS_DATA. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id (optional)</param>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="xMin">x min (optional)</param>
        /// <param name="xMax">x max (optional)</param>
        /// <param name="yMin">y min (optional)</param>
        /// <param name="yMax">y max (optional)</param>
        /// <param name="xCellSize">x cell size (optional)</param>
        /// <param name="yCellSize">y cell size (optional)</param>
        /// <param name="deleteOutputFolder">Delte output folder (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string Processdata(string workflowId = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string xMin = default(string), string xMax = default(string), string yMin = default(string), string yMax = default(string), string xCellSize = default(string), string yCellSize = default(string), string deleteOutputFolder = default(string), int operationIndex = 0);

        /// <summary>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream
        /// </summary>
        /// <remarks>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream. A property EXPORT_FOLDER_PROCESS_DATA should be configured in the global properties or in the webservice properties. The workflow indicated by the workflow id should export data to a folder EXPORT_FOLDER_PROCESS_DATA. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id (optional)</param>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="xMin">x min (optional)</param>
        /// <param name="xMax">x max (optional)</param>
        /// <param name="yMin">y min (optional)</param>
        /// <param name="yMax">y max (optional)</param>
        /// <param name="xCellSize">x cell size (optional)</param>
        /// <param name="yCellSize">y cell size (optional)</param>
        /// <param name="deleteOutputFolder">Delte output folder (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProcessdataWithHttpInfo(string workflowId = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string xMin = default(string), string xMax = default(string), string yMin = default(string), string yMax = default(string), string xCellSize = default(string), string yCellSize = default(string), string deleteOutputFolder = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessdataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream
        /// </summary>
        /// <remarks>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream. A property EXPORT_FOLDER_PROCESS_DATA should be configured in the global properties or in the webservice properties. The workflow indicated by the workflow id should export data to a folder EXPORT_FOLDER_PROCESS_DATA. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id (optional)</param>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="xMin">x min (optional)</param>
        /// <param name="xMax">x max (optional)</param>
        /// <param name="yMin">y min (optional)</param>
        /// <param name="yMax">y max (optional)</param>
        /// <param name="xCellSize">x cell size (optional)</param>
        /// <param name="yCellSize">y cell size (optional)</param>
        /// <param name="deleteOutputFolder">Delte output folder (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProcessdataAsync(string workflowId = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string xMin = default(string), string xMax = default(string), string yMin = default(string), string yMax = default(string), string xCellSize = default(string), string yCellSize = default(string), string deleteOutputFolder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream
        /// </summary>
        /// <remarks>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream. A property EXPORT_FOLDER_PROCESS_DATA should be configured in the global properties or in the webservice properties. The workflow indicated by the workflow id should export data to a folder EXPORT_FOLDER_PROCESS_DATA. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id (optional)</param>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="xMin">x min (optional)</param>
        /// <param name="xMax">x max (optional)</param>
        /// <param name="yMin">y min (optional)</param>
        /// <param name="yMax">y max (optional)</param>
        /// <param name="xCellSize">x cell size (optional)</param>
        /// <param name="yCellSize">y cell size (optional)</param>
        /// <param name="deleteOutputFolder">Delte output folder (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProcessdataWithHttpInfoAsync(string workflowId = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string xMin = default(string), string xMax = default(string), string yMin = default(string), string yMax = default(string), string xCellSize = default(string), string yCellSize = default(string), string deleteOutputFolder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessdataApi : IProcessdataApiSync, IProcessdataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessdataApi : IProcessdataApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessdataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessdataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessdataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessdataApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessdataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessdataApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessdataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProcessdataApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream Run workflow and make processed netcdf data available as an attachment of type application/octet-stream. A property EXPORT_FOLDER_PROCESS_DATA should be configured in the global properties or in the webservice properties. The workflow indicated by the workflow id should export data to a folder EXPORT_FOLDER_PROCESS_DATA. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id (optional)</param>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="xMin">x min (optional)</param>
        /// <param name="xMax">x max (optional)</param>
        /// <param name="yMin">y min (optional)</param>
        /// <param name="yMax">y max (optional)</param>
        /// <param name="xCellSize">x cell size (optional)</param>
        /// <param name="yCellSize">y cell size (optional)</param>
        /// <param name="deleteOutputFolder">Delte output folder (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string Processdata(string workflowId = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string xMin = default(string), string xMax = default(string), string yMin = default(string), string yMax = default(string), string xCellSize = default(string), string yCellSize = default(string), string deleteOutputFolder = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = ProcessdataWithHttpInfo(workflowId, startTime, endTime, xMin, xMax, yMin, yMax, xCellSize, yCellSize, deleteOutputFolder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream Run workflow and make processed netcdf data available as an attachment of type application/octet-stream. A property EXPORT_FOLDER_PROCESS_DATA should be configured in the global properties or in the webservice properties. The workflow indicated by the workflow id should export data to a folder EXPORT_FOLDER_PROCESS_DATA. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id (optional)</param>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="xMin">x min (optional)</param>
        /// <param name="xMax">x max (optional)</param>
        /// <param name="yMin">y min (optional)</param>
        /// <param name="yMax">y max (optional)</param>
        /// <param name="xCellSize">x cell size (optional)</param>
        /// <param name="yCellSize">y cell size (optional)</param>
        /// <param name="deleteOutputFolder">Delte output folder (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> ProcessdataWithHttpInfo(string workflowId = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string xMin = default(string), string xMax = default(string), string yMin = default(string), string yMax = default(string), string xCellSize = default(string), string yCellSize = default(string), string deleteOutputFolder = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (workflowId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "workflowId", workflowId));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (xMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "xMin", xMin));
            }
            if (xMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "xMax", xMax));
            }
            if (yMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "yMin", yMin));
            }
            if (yMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "yMax", yMax));
            }
            if (xCellSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "xCellSize", xCellSize));
            }
            if (yCellSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "yCellSize", yCellSize));
            }
            if (deleteOutputFolder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deleteOutputFolder", deleteOutputFolder));
            }

            localVarRequestOptions.Operation = "ProcessdataApi.Processdata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/processdata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Processdata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream Run workflow and make processed netcdf data available as an attachment of type application/octet-stream. A property EXPORT_FOLDER_PROCESS_DATA should be configured in the global properties or in the webservice properties. The workflow indicated by the workflow id should export data to a folder EXPORT_FOLDER_PROCESS_DATA. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id (optional)</param>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="xMin">x min (optional)</param>
        /// <param name="xMax">x max (optional)</param>
        /// <param name="yMin">y min (optional)</param>
        /// <param name="yMax">y max (optional)</param>
        /// <param name="xCellSize">x cell size (optional)</param>
        /// <param name="yCellSize">y cell size (optional)</param>
        /// <param name="deleteOutputFolder">Delte output folder (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProcessdataAsync(string workflowId = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string xMin = default(string), string xMax = default(string), string yMin = default(string), string yMax = default(string), string xCellSize = default(string), string yCellSize = default(string), string deleteOutputFolder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await ProcessdataWithHttpInfoAsync(workflowId, startTime, endTime, xMin, xMax, yMin, yMax, xCellSize, yCellSize, deleteOutputFolder, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run workflow and make processed netcdf data available as an attachment of type application/octet-stream Run workflow and make processed netcdf data available as an attachment of type application/octet-stream. A property EXPORT_FOLDER_PROCESS_DATA should be configured in the global properties or in the webservice properties. The workflow indicated by the workflow id should export data to a folder EXPORT_FOLDER_PROCESS_DATA. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId">Workflow Id (optional)</param>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="xMin">x min (optional)</param>
        /// <param name="xMax">x max (optional)</param>
        /// <param name="yMin">y min (optional)</param>
        /// <param name="yMax">y max (optional)</param>
        /// <param name="xCellSize">x cell size (optional)</param>
        /// <param name="yCellSize">y cell size (optional)</param>
        /// <param name="deleteOutputFolder">Delte output folder (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> ProcessdataWithHttpInfoAsync(string workflowId = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string xMin = default(string), string xMax = default(string), string yMin = default(string), string yMax = default(string), string xCellSize = default(string), string yCellSize = default(string), string deleteOutputFolder = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (workflowId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "workflowId", workflowId));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (xMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "xMin", xMin));
            }
            if (xMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "xMax", xMax));
            }
            if (yMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "yMin", yMin));
            }
            if (yMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "yMax", yMax));
            }
            if (xCellSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "xCellSize", xCellSize));
            }
            if (yCellSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "yCellSize", yCellSize));
            }
            if (deleteOutputFolder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deleteOutputFolder", deleteOutputFolder));
            }

            localVarRequestOptions.Operation = "ProcessdataApi.Processdata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/processdata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Processdata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
