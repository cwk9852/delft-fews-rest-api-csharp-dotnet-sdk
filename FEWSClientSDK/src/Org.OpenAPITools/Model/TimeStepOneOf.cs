/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimeStepOneOf
    /// </summary>
    [DataContract(Name = "TimeStep_oneOf")]
    public partial class TimeStepOneOf : IEquatable<TimeStepOneOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeStepOneOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeStepOneOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeStepOneOf" /> class.
        /// </summary>
        /// <param name="unit">Unit (required).</param>
        /// <param name="multiplier">Multiplier.</param>
        public TimeStepOneOf(string unit = default(string), string multiplier = default(string))
        {
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new ArgumentNullException("unit is a required property for TimeStepOneOf and cannot be null");
            }
            this.Unit = unit;
            this.Multiplier = multiplier;
        }

        /// <summary>
        /// Unit
        /// </summary>
        /// <value>Unit</value>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = true)]
        public string Unit { get; set; }

        /// <summary>
        /// Multiplier
        /// </summary>
        /// <value>Multiplier</value>
        [DataMember(Name = "multiplier", EmitDefaultValue = false)]
        public string Multiplier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeStepOneOf {\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeStepOneOf);
        }

        /// <summary>
        /// Returns true if TimeStepOneOf instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeStepOneOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeStepOneOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Multiplier == input.Multiplier ||
                    (this.Multiplier != null &&
                    this.Multiplier.Equals(input.Multiplier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                if (this.Multiplier != null)
                {
                    hashCode = (hashCode * 59) + this.Multiplier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
