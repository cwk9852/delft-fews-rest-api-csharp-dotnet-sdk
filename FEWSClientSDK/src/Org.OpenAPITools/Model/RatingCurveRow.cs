/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RatingCurveRow
    /// </summary>
    [DataContract(Name = "RatingCurveRow")]
    public partial class RatingCurveRow : IEquatable<RatingCurveRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveRow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RatingCurveRow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveRow" /> class.
        /// </summary>
        /// <param name="stage">Stage value. -INF for negative infinity and INF for positive infinity (required).</param>
        /// <param name="discharge">Discharge value. -INF for negative infinity and INF for positive infinity (required).</param>
        /// <param name="logScaleStageOffset">Log Scale Offset. -INF for negative infinity and INF for positive infinity.</param>
        /// <param name="flag">Flag.</param>
        public RatingCurveRow(string stage = default(string), string discharge = default(string), string logScaleStageOffset = default(string), string flag = default(string))
        {
            // to ensure "stage" is required (not null)
            if (stage == null)
            {
                throw new ArgumentNullException("stage is a required property for RatingCurveRow and cannot be null");
            }
            this.Stage = stage;
            // to ensure "discharge" is required (not null)
            if (discharge == null)
            {
                throw new ArgumentNullException("discharge is a required property for RatingCurveRow and cannot be null");
            }
            this.Discharge = discharge;
            this.LogScaleStageOffset = logScaleStageOffset;
            this.Flag = flag;
        }

        /// <summary>
        /// Stage value. -INF for negative infinity and INF for positive infinity
        /// </summary>
        /// <value>Stage value. -INF for negative infinity and INF for positive infinity</value>
        [DataMember(Name = "stage", IsRequired = true, EmitDefaultValue = true)]
        public string Stage { get; set; }

        /// <summary>
        /// Discharge value. -INF for negative infinity and INF for positive infinity
        /// </summary>
        /// <value>Discharge value. -INF for negative infinity and INF for positive infinity</value>
        [DataMember(Name = "discharge", IsRequired = true, EmitDefaultValue = true)]
        public string Discharge { get; set; }

        /// <summary>
        /// Log Scale Offset. -INF for negative infinity and INF for positive infinity
        /// </summary>
        /// <value>Log Scale Offset. -INF for negative infinity and INF for positive infinity</value>
        [DataMember(Name = "logScaleStageOffset", EmitDefaultValue = false)]
        public string LogScaleStageOffset { get; set; }

        /// <summary>
        /// Flag
        /// </summary>
        /// <value>Flag</value>
        [DataMember(Name = "flag", EmitDefaultValue = false)]
        public string Flag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RatingCurveRow {\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  Discharge: ").Append(Discharge).Append("\n");
            sb.Append("  LogScaleStageOffset: ").Append(LogScaleStageOffset).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RatingCurveRow);
        }

        /// <summary>
        /// Returns true if RatingCurveRow instances are equal
        /// </summary>
        /// <param name="input">Instance of RatingCurveRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingCurveRow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.Discharge == input.Discharge ||
                    (this.Discharge != null &&
                    this.Discharge.Equals(input.Discharge))
                ) && 
                (
                    this.LogScaleStageOffset == input.LogScaleStageOffset ||
                    (this.LogScaleStageOffset != null &&
                    this.LogScaleStageOffset.Equals(input.LogScaleStageOffset))
                ) && 
                (
                    this.Flag == input.Flag ||
                    (this.Flag != null &&
                    this.Flag.Equals(input.Flag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Stage != null)
                {
                    hashCode = (hashCode * 59) + this.Stage.GetHashCode();
                }
                if (this.Discharge != null)
                {
                    hashCode = (hashCode * 59) + this.Discharge.GetHashCode();
                }
                if (this.LogScaleStageOffset != null)
                {
                    hashCode = (hashCode * 59) + this.LogScaleStageOffset.GetHashCode();
                }
                if (this.Flag != null)
                {
                    hashCode = (hashCode * 59) + this.Flag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
