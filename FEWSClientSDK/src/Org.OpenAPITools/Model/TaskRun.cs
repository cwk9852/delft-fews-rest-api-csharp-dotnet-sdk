/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TaskRun
    /// </summary>
    [DataContract(Name = "TaskRun")]
    public partial class TaskRun : IEquatable<TaskRun>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRun" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskRun() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRun" /> class.
        /// </summary>
        /// <param name="id">the id of the task run (required).</param>
        /// <param name="forecast">Indicates if the task run is a forecast run or not (required).</param>
        /// <param name="current">Indicates if the task run is current or not (required).</param>
        /// <param name="status">Current status of the task run. (required).</param>
        /// <param name="workflowId">The id of the workflow (required).</param>
        /// <param name="dispatchTime">The time at which the run was started.</param>
        /// <param name="completionTime">The time at which the run was completed.</param>
        /// <param name="time0">The time zero of the task run (required).</param>
        /// <param name="user">The user who started the task (required).</param>
        /// <param name="description">The description of the task run (required).</param>
        /// <param name="fssId">The id of the forecasting shell which executed this task.</param>
        /// <param name="outputStartTime">The start time of the period for which data is available.</param>
        /// <param name="outputEndTime">The end time of the period for which data is available.</param>
        public TaskRun(string id = default(string), bool forecast = default(bool), bool current = default(bool), string status = default(string), string workflowId = default(string), string dispatchTime = default(string), string completionTime = default(string), string time0 = default(string), string user = default(string), string description = default(string), string fssId = default(string), string outputStartTime = default(string), string outputEndTime = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for TaskRun and cannot be null");
            }
            this.Id = id;
            this.Forecast = forecast;
            this.Current = current;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for TaskRun and cannot be null");
            }
            this.Status = status;
            // to ensure "workflowId" is required (not null)
            if (workflowId == null)
            {
                throw new ArgumentNullException("workflowId is a required property for TaskRun and cannot be null");
            }
            this.WorkflowId = workflowId;
            // to ensure "time0" is required (not null)
            if (time0 == null)
            {
                throw new ArgumentNullException("time0 is a required property for TaskRun and cannot be null");
            }
            this.Time0 = time0;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for TaskRun and cannot be null");
            }
            this.User = user;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TaskRun and cannot be null");
            }
            this.Description = description;
            this.DispatchTime = dispatchTime;
            this.CompletionTime = completionTime;
            this.FssId = fssId;
            this.OutputStartTime = outputStartTime;
            this.OutputEndTime = outputEndTime;
        }

        /// <summary>
        /// the id of the task run
        /// </summary>
        /// <value>the id of the task run</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if the task run is a forecast run or not
        /// </summary>
        /// <value>Indicates if the task run is a forecast run or not</value>
        [DataMember(Name = "forecast", IsRequired = true, EmitDefaultValue = true)]
        public bool Forecast { get; set; }

        /// <summary>
        /// Indicates if the task run is current or not
        /// </summary>
        /// <value>Indicates if the task run is current or not</value>
        [DataMember(Name = "current", IsRequired = true, EmitDefaultValue = true)]
        public bool Current { get; set; }

        /// <summary>
        /// Current status of the task run.
        /// </summary>
        /// <value>Current status of the task run.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The id of the workflow
        /// </summary>
        /// <value>The id of the workflow</value>
        [DataMember(Name = "workflowId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkflowId { get; set; }

        /// <summary>
        /// The time at which the run was started
        /// </summary>
        /// <value>The time at which the run was started</value>
        [DataMember(Name = "dispatchTime", EmitDefaultValue = false)]
        public string DispatchTime { get; set; }

        /// <summary>
        /// The time at which the run was completed
        /// </summary>
        /// <value>The time at which the run was completed</value>
        [DataMember(Name = "completionTime", EmitDefaultValue = false)]
        public string CompletionTime { get; set; }

        /// <summary>
        /// The time zero of the task run
        /// </summary>
        /// <value>The time zero of the task run</value>
        [DataMember(Name = "time0", IsRequired = true, EmitDefaultValue = true)]
        public string Time0 { get; set; }

        /// <summary>
        /// The user who started the task
        /// </summary>
        /// <value>The user who started the task</value>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public string User { get; set; }

        /// <summary>
        /// The description of the task run
        /// </summary>
        /// <value>The description of the task run</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The id of the forecasting shell which executed this task
        /// </summary>
        /// <value>The id of the forecasting shell which executed this task</value>
        [DataMember(Name = "fssId", EmitDefaultValue = false)]
        public string FssId { get; set; }

        /// <summary>
        /// The start time of the period for which data is available
        /// </summary>
        /// <value>The start time of the period for which data is available</value>
        [DataMember(Name = "outputStartTime", EmitDefaultValue = false)]
        public string OutputStartTime { get; set; }

        /// <summary>
        /// The end time of the period for which data is available
        /// </summary>
        /// <value>The end time of the period for which data is available</value>
        [DataMember(Name = "outputEndTime", EmitDefaultValue = false)]
        public string OutputEndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskRun {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Forecast: ").Append(Forecast).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  DispatchTime: ").Append(DispatchTime).Append("\n");
            sb.Append("  CompletionTime: ").Append(CompletionTime).Append("\n");
            sb.Append("  Time0: ").Append(Time0).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FssId: ").Append(FssId).Append("\n");
            sb.Append("  OutputStartTime: ").Append(OutputStartTime).Append("\n");
            sb.Append("  OutputEndTime: ").Append(OutputEndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskRun);
        }

        /// <summary>
        /// Returns true if TaskRun instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskRun input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Forecast == input.Forecast ||
                    this.Forecast.Equals(input.Forecast)
                ) && 
                (
                    this.Current == input.Current ||
                    this.Current.Equals(input.Current)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.WorkflowId == input.WorkflowId ||
                    (this.WorkflowId != null &&
                    this.WorkflowId.Equals(input.WorkflowId))
                ) && 
                (
                    this.DispatchTime == input.DispatchTime ||
                    (this.DispatchTime != null &&
                    this.DispatchTime.Equals(input.DispatchTime))
                ) && 
                (
                    this.CompletionTime == input.CompletionTime ||
                    (this.CompletionTime != null &&
                    this.CompletionTime.Equals(input.CompletionTime))
                ) && 
                (
                    this.Time0 == input.Time0 ||
                    (this.Time0 != null &&
                    this.Time0.Equals(input.Time0))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FssId == input.FssId ||
                    (this.FssId != null &&
                    this.FssId.Equals(input.FssId))
                ) && 
                (
                    this.OutputStartTime == input.OutputStartTime ||
                    (this.OutputStartTime != null &&
                    this.OutputStartTime.Equals(input.OutputStartTime))
                ) && 
                (
                    this.OutputEndTime == input.OutputEndTime ||
                    (this.OutputEndTime != null &&
                    this.OutputEndTime.Equals(input.OutputEndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Forecast.GetHashCode();
                hashCode = (hashCode * 59) + this.Current.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.WorkflowId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkflowId.GetHashCode();
                }
                if (this.DispatchTime != null)
                {
                    hashCode = (hashCode * 59) + this.DispatchTime.GetHashCode();
                }
                if (this.CompletionTime != null)
                {
                    hashCode = (hashCode * 59) + this.CompletionTime.GetHashCode();
                }
                if (this.Time0 != null)
                {
                    hashCode = (hashCode * 59) + this.Time0.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.FssId != null)
                {
                    hashCode = (hashCode * 59) + this.FssId.GetHashCode();
                }
                if (this.OutputStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.OutputStartTime.GetHashCode();
                }
                if (this.OutputEndTime != null)
                {
                    hashCode = (hashCode * 59) + this.OutputEndTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
