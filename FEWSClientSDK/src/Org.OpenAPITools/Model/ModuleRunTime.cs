/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModuleRunTime
    /// </summary>
    [DataContract(Name = "ModuleRunTime")]
    public partial class ModuleRunTime : IEquatable<ModuleRunTime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleRunTime" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModuleRunTime() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleRunTime" /> class.
        /// </summary>
        /// <param name="workflowId">the Workflow Id (required).</param>
        /// <param name="moduleInstanceId">The Module Instance Id (required).</param>
        /// <param name="mcId">The MC Id (required).</param>
        /// <param name="expectedStartTime">Expected start time in milliseconds epoch time (required).</param>
        /// <param name="expectedCompletionTime">Expected completion time in milliseconds epoch time (required).</param>
        /// <param name="expectedPendingDuration">Expected pending duration time in milliseconds (required).</param>
        /// <param name="expectedRunningDuration">Expected running time in milliseconds (required).</param>
        public ModuleRunTime(string workflowId = default(string), string moduleInstanceId = default(string), string mcId = default(string), decimal expectedStartTime = default(decimal), decimal expectedCompletionTime = default(decimal), decimal expectedPendingDuration = default(decimal), decimal expectedRunningDuration = default(decimal))
        {
            // to ensure "workflowId" is required (not null)
            if (workflowId == null)
            {
                throw new ArgumentNullException("workflowId is a required property for ModuleRunTime and cannot be null");
            }
            this.WorkflowId = workflowId;
            // to ensure "moduleInstanceId" is required (not null)
            if (moduleInstanceId == null)
            {
                throw new ArgumentNullException("moduleInstanceId is a required property for ModuleRunTime and cannot be null");
            }
            this.ModuleInstanceId = moduleInstanceId;
            // to ensure "mcId" is required (not null)
            if (mcId == null)
            {
                throw new ArgumentNullException("mcId is a required property for ModuleRunTime and cannot be null");
            }
            this.McId = mcId;
            this.ExpectedStartTime = expectedStartTime;
            this.ExpectedCompletionTime = expectedCompletionTime;
            this.ExpectedPendingDuration = expectedPendingDuration;
            this.ExpectedRunningDuration = expectedRunningDuration;
        }

        /// <summary>
        /// the Workflow Id
        /// </summary>
        /// <value>the Workflow Id</value>
        [DataMember(Name = "workflowId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkflowId { get; set; }

        /// <summary>
        /// The Module Instance Id
        /// </summary>
        /// <value>The Module Instance Id</value>
        [DataMember(Name = "moduleInstanceId", IsRequired = true, EmitDefaultValue = true)]
        public string ModuleInstanceId { get; set; }

        /// <summary>
        /// The MC Id
        /// </summary>
        /// <value>The MC Id</value>
        [DataMember(Name = "mcId", IsRequired = true, EmitDefaultValue = true)]
        public string McId { get; set; }

        /// <summary>
        /// Expected start time in milliseconds epoch time
        /// </summary>
        /// <value>Expected start time in milliseconds epoch time</value>
        [DataMember(Name = "expectedStartTime", IsRequired = true, EmitDefaultValue = true)]
        public decimal ExpectedStartTime { get; set; }

        /// <summary>
        /// Expected completion time in milliseconds epoch time
        /// </summary>
        /// <value>Expected completion time in milliseconds epoch time</value>
        [DataMember(Name = "expectedCompletionTime", IsRequired = true, EmitDefaultValue = true)]
        public decimal ExpectedCompletionTime { get; set; }

        /// <summary>
        /// Expected pending duration time in milliseconds
        /// </summary>
        /// <value>Expected pending duration time in milliseconds</value>
        [DataMember(Name = "expectedPendingDuration", IsRequired = true, EmitDefaultValue = true)]
        public decimal ExpectedPendingDuration { get; set; }

        /// <summary>
        /// Expected running time in milliseconds
        /// </summary>
        /// <value>Expected running time in milliseconds</value>
        [DataMember(Name = "expectedRunningDuration", IsRequired = true, EmitDefaultValue = true)]
        public decimal ExpectedRunningDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModuleRunTime {\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  ModuleInstanceId: ").Append(ModuleInstanceId).Append("\n");
            sb.Append("  McId: ").Append(McId).Append("\n");
            sb.Append("  ExpectedStartTime: ").Append(ExpectedStartTime).Append("\n");
            sb.Append("  ExpectedCompletionTime: ").Append(ExpectedCompletionTime).Append("\n");
            sb.Append("  ExpectedPendingDuration: ").Append(ExpectedPendingDuration).Append("\n");
            sb.Append("  ExpectedRunningDuration: ").Append(ExpectedRunningDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModuleRunTime);
        }

        /// <summary>
        /// Returns true if ModuleRunTime instances are equal
        /// </summary>
        /// <param name="input">Instance of ModuleRunTime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModuleRunTime input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WorkflowId == input.WorkflowId ||
                    (this.WorkflowId != null &&
                    this.WorkflowId.Equals(input.WorkflowId))
                ) && 
                (
                    this.ModuleInstanceId == input.ModuleInstanceId ||
                    (this.ModuleInstanceId != null &&
                    this.ModuleInstanceId.Equals(input.ModuleInstanceId))
                ) && 
                (
                    this.McId == input.McId ||
                    (this.McId != null &&
                    this.McId.Equals(input.McId))
                ) && 
                (
                    this.ExpectedStartTime == input.ExpectedStartTime ||
                    this.ExpectedStartTime.Equals(input.ExpectedStartTime)
                ) && 
                (
                    this.ExpectedCompletionTime == input.ExpectedCompletionTime ||
                    this.ExpectedCompletionTime.Equals(input.ExpectedCompletionTime)
                ) && 
                (
                    this.ExpectedPendingDuration == input.ExpectedPendingDuration ||
                    this.ExpectedPendingDuration.Equals(input.ExpectedPendingDuration)
                ) && 
                (
                    this.ExpectedRunningDuration == input.ExpectedRunningDuration ||
                    this.ExpectedRunningDuration.Equals(input.ExpectedRunningDuration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorkflowId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkflowId.GetHashCode();
                }
                if (this.ModuleInstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.ModuleInstanceId.GetHashCode();
                }
                if (this.McId != null)
                {
                    hashCode = (hashCode * 59) + this.McId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpectedStartTime.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedCompletionTime.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedPendingDuration.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedRunningDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
