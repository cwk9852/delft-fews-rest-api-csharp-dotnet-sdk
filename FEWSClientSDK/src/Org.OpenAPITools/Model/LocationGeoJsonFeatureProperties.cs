/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LocationGeoJsonFeatureProperties
    /// </summary>
    [DataContract(Name = "LocationGeoJsonFeatureProperties")]
    public partial class LocationGeoJsonFeatureProperties : IEquatable<LocationGeoJsonFeatureProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationGeoJsonFeatureProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocationGeoJsonFeatureProperties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationGeoJsonFeatureProperties" /> class.
        /// </summary>
        /// <param name="locationId">the id of the location (required).</param>
        /// <param name="locationName">The location name.</param>
        /// <param name="description">The description of the locations.</param>
        /// <param name="shortName">The Short name of the location.</param>
        /// <param name="startDateTime">Start date time in case a time dependent relation is use.</param>
        /// <param name="endDateTime">End date time in case a time dependent relation is use.</param>
        /// <param name="lat">Latitude.</param>
        /// <param name="lon">Longitude.</param>
        /// <param name="x">X.</param>
        /// <param name="y">Y.</param>
        /// <param name="z">Z.</param>
        /// <param name="attributes">Location Attributes.</param>
        /// <param name="relations">Related Locations.</param>
        /// <param name="parentLocationId">Id of the parent location.</param>
        public LocationGeoJsonFeatureProperties(string locationId = default(string), string locationName = default(string), string description = default(string), string shortName = default(string), string startDateTime = default(string), string endDateTime = default(string), string lat = default(string), string lon = default(string), string x = default(string), string y = default(string), string z = default(string), List<LocationGeoJsonAttributes> attributes = default(List<LocationGeoJsonAttributes>), List<LocationGeoJsonRelation> relations = default(List<LocationGeoJsonRelation>), string parentLocationId = default(string))
        {
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new ArgumentNullException("locationId is a required property for LocationGeoJsonFeatureProperties and cannot be null");
            }
            this.LocationId = locationId;
            this.LocationName = locationName;
            this.Description = description;
            this.ShortName = shortName;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.Lat = lat;
            this.Lon = lon;
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.Attributes = attributes;
            this.Relations = relations;
            this.ParentLocationId = parentLocationId;
        }

        /// <summary>
        /// the id of the location
        /// </summary>
        /// <value>the id of the location</value>
        [DataMember(Name = "locationId", IsRequired = true, EmitDefaultValue = true)]
        public string LocationId { get; set; }

        /// <summary>
        /// The location name
        /// </summary>
        /// <value>The location name</value>
        [DataMember(Name = "locationName", EmitDefaultValue = false)]
        public string LocationName { get; set; }

        /// <summary>
        /// The description of the locations
        /// </summary>
        /// <value>The description of the locations</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The Short name of the location
        /// </summary>
        /// <value>The Short name of the location</value>
        [DataMember(Name = "shortName", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Start date time in case a time dependent relation is use
        /// </summary>
        /// <value>Start date time in case a time dependent relation is use</value>
        [DataMember(Name = "startDateTime", EmitDefaultValue = false)]
        public string StartDateTime { get; set; }

        /// <summary>
        /// End date time in case a time dependent relation is use
        /// </summary>
        /// <value>End date time in case a time dependent relation is use</value>
        [DataMember(Name = "endDateTime", EmitDefaultValue = false)]
        public string EndDateTime { get; set; }

        /// <summary>
        /// Latitude
        /// </summary>
        /// <value>Latitude</value>
        [DataMember(Name = "lat", EmitDefaultValue = false)]
        public string Lat { get; set; }

        /// <summary>
        /// Longitude
        /// </summary>
        /// <value>Longitude</value>
        [DataMember(Name = "lon", EmitDefaultValue = false)]
        public string Lon { get; set; }

        /// <summary>
        /// X
        /// </summary>
        /// <value>X</value>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public string X { get; set; }

        /// <summary>
        /// Y
        /// </summary>
        /// <value>Y</value>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public string Y { get; set; }

        /// <summary>
        /// Z
        /// </summary>
        /// <value>Z</value>
        [DataMember(Name = "z", EmitDefaultValue = false)]
        public string Z { get; set; }

        /// <summary>
        /// Location Attributes
        /// </summary>
        /// <value>Location Attributes</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<LocationGeoJsonAttributes> Attributes { get; set; }

        /// <summary>
        /// Related Locations
        /// </summary>
        /// <value>Related Locations</value>
        [DataMember(Name = "relations", EmitDefaultValue = false)]
        public List<LocationGeoJsonRelation> Relations { get; set; }

        /// <summary>
        /// Id of the parent location
        /// </summary>
        /// <value>Id of the parent location</value>
        [DataMember(Name = "parentLocationId", EmitDefaultValue = false)]
        public string ParentLocationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationGeoJsonFeatureProperties {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Z: ").Append(Z).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Relations: ").Append(Relations).Append("\n");
            sb.Append("  ParentLocationId: ").Append(ParentLocationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationGeoJsonFeatureProperties);
        }

        /// <summary>
        /// Returns true if LocationGeoJsonFeatureProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationGeoJsonFeatureProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationGeoJsonFeatureProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lon == input.Lon ||
                    (this.Lon != null &&
                    this.Lon.Equals(input.Lon))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Z == input.Z ||
                    (this.Z != null &&
                    this.Z.Equals(input.Z))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Relations == input.Relations ||
                    this.Relations != null &&
                    input.Relations != null &&
                    this.Relations.SequenceEqual(input.Relations)
                ) && 
                (
                    this.ParentLocationId == input.ParentLocationId ||
                    (this.ParentLocationId != null &&
                    this.ParentLocationId.Equals(input.ParentLocationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationId != null)
                {
                    hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                }
                if (this.LocationName != null)
                {
                    hashCode = (hashCode * 59) + this.LocationName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                if (this.EndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDateTime.GetHashCode();
                }
                if (this.Lat != null)
                {
                    hashCode = (hashCode * 59) + this.Lat.GetHashCode();
                }
                if (this.Lon != null)
                {
                    hashCode = (hashCode * 59) + this.Lon.GetHashCode();
                }
                if (this.X != null)
                {
                    hashCode = (hashCode * 59) + this.X.GetHashCode();
                }
                if (this.Y != null)
                {
                    hashCode = (hashCode * 59) + this.Y.GetHashCode();
                }
                if (this.Z != null)
                {
                    hashCode = (hashCode * 59) + this.Z.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.Relations != null)
                {
                    hashCode = (hashCode * 59) + this.Relations.GetHashCode();
                }
                if (this.ParentLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentLocationId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
