/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RatingCurveEquation
    /// </summary>
    [DataContract(Name = "RatingCurveEquation")]
    public partial class RatingCurveEquation : IEquatable<RatingCurveEquation>, IValidatableObject
    {
        /// <summary>
        /// Equation type. Currently only powerEquation is supported.
        /// </summary>
        /// <value>Equation type. Currently only powerEquation is supported.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PowerEquation for value: powerEquation
            /// </summary>
            [EnumMember(Value = "powerEquation")]
            PowerEquation = 1

        }


        /// <summary>
        /// Equation type. Currently only powerEquation is supported.
        /// </summary>
        /// <value>Equation type. Currently only powerEquation is supported.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveEquation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RatingCurveEquation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveEquation" /> class.
        /// </summary>
        /// <param name="type">Equation type. Currently only powerEquation is supported. (required).</param>
        /// <param name="minStage">Minimum stage value. -INF for negative infinity and INF for positive infinity (required).</param>
        /// <param name="maxStage">Maximum stage value. -INF for negative infinity and INF for positive infinity (required).</param>
        /// <param name="flag">Flag (required).</param>
        /// <param name="alpha">Alpha (required).</param>
        /// <param name="cr">Cr (required).</param>
        /// <param name="beta">Beta (required).</param>
        public RatingCurveEquation(TypeEnum type = default(TypeEnum), string minStage = default(string), string maxStage = default(string), string flag = default(string), string alpha = default(string), string cr = default(string), string beta = default(string))
        {
            this.Type = type;
            // to ensure "minStage" is required (not null)
            if (minStage == null)
            {
                throw new ArgumentNullException("minStage is a required property for RatingCurveEquation and cannot be null");
            }
            this.MinStage = minStage;
            // to ensure "maxStage" is required (not null)
            if (maxStage == null)
            {
                throw new ArgumentNullException("maxStage is a required property for RatingCurveEquation and cannot be null");
            }
            this.MaxStage = maxStage;
            // to ensure "flag" is required (not null)
            if (flag == null)
            {
                throw new ArgumentNullException("flag is a required property for RatingCurveEquation and cannot be null");
            }
            this.Flag = flag;
            // to ensure "alpha" is required (not null)
            if (alpha == null)
            {
                throw new ArgumentNullException("alpha is a required property for RatingCurveEquation and cannot be null");
            }
            this.Alpha = alpha;
            // to ensure "cr" is required (not null)
            if (cr == null)
            {
                throw new ArgumentNullException("cr is a required property for RatingCurveEquation and cannot be null");
            }
            this.Cr = cr;
            // to ensure "beta" is required (not null)
            if (beta == null)
            {
                throw new ArgumentNullException("beta is a required property for RatingCurveEquation and cannot be null");
            }
            this.Beta = beta;
        }

        /// <summary>
        /// Minimum stage value. -INF for negative infinity and INF for positive infinity
        /// </summary>
        /// <value>Minimum stage value. -INF for negative infinity and INF for positive infinity</value>
        [DataMember(Name = "minStage", IsRequired = true, EmitDefaultValue = true)]
        public string MinStage { get; set; }

        /// <summary>
        /// Maximum stage value. -INF for negative infinity and INF for positive infinity
        /// </summary>
        /// <value>Maximum stage value. -INF for negative infinity and INF for positive infinity</value>
        [DataMember(Name = "maxStage", IsRequired = true, EmitDefaultValue = true)]
        public string MaxStage { get; set; }

        /// <summary>
        /// Flag
        /// </summary>
        /// <value>Flag</value>
        [DataMember(Name = "flag", IsRequired = true, EmitDefaultValue = true)]
        public string Flag { get; set; }

        /// <summary>
        /// Alpha
        /// </summary>
        /// <value>Alpha</value>
        [DataMember(Name = "alpha", IsRequired = true, EmitDefaultValue = true)]
        public string Alpha { get; set; }

        /// <summary>
        /// Cr
        /// </summary>
        /// <value>Cr</value>
        [DataMember(Name = "cr", IsRequired = true, EmitDefaultValue = true)]
        public string Cr { get; set; }

        /// <summary>
        /// Beta
        /// </summary>
        /// <value>Beta</value>
        [DataMember(Name = "beta", IsRequired = true, EmitDefaultValue = true)]
        public string Beta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RatingCurveEquation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MinStage: ").Append(MinStage).Append("\n");
            sb.Append("  MaxStage: ").Append(MaxStage).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Alpha: ").Append(Alpha).Append("\n");
            sb.Append("  Cr: ").Append(Cr).Append("\n");
            sb.Append("  Beta: ").Append(Beta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RatingCurveEquation);
        }

        /// <summary>
        /// Returns true if RatingCurveEquation instances are equal
        /// </summary>
        /// <param name="input">Instance of RatingCurveEquation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingCurveEquation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.MinStage == input.MinStage ||
                    (this.MinStage != null &&
                    this.MinStage.Equals(input.MinStage))
                ) && 
                (
                    this.MaxStage == input.MaxStage ||
                    (this.MaxStage != null &&
                    this.MaxStage.Equals(input.MaxStage))
                ) && 
                (
                    this.Flag == input.Flag ||
                    (this.Flag != null &&
                    this.Flag.Equals(input.Flag))
                ) && 
                (
                    this.Alpha == input.Alpha ||
                    (this.Alpha != null &&
                    this.Alpha.Equals(input.Alpha))
                ) && 
                (
                    this.Cr == input.Cr ||
                    (this.Cr != null &&
                    this.Cr.Equals(input.Cr))
                ) && 
                (
                    this.Beta == input.Beta ||
                    (this.Beta != null &&
                    this.Beta.Equals(input.Beta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.MinStage != null)
                {
                    hashCode = (hashCode * 59) + this.MinStage.GetHashCode();
                }
                if (this.MaxStage != null)
                {
                    hashCode = (hashCode * 59) + this.MaxStage.GetHashCode();
                }
                if (this.Flag != null)
                {
                    hashCode = (hashCode * 59) + this.Flag.GetHashCode();
                }
                if (this.Alpha != null)
                {
                    hashCode = (hashCode * 59) + this.Alpha.GetHashCode();
                }
                if (this.Cr != null)
                {
                    hashCode = (hashCode * 59) + this.Cr.GetHashCode();
                }
                if (this.Beta != null)
                {
                    hashCode = (hashCode * 59) + this.Beta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
