/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ArchiveProductsMetadataEntry
    /// </summary>
    [DataContract(Name = "ArchiveProductsMetadataEntry")]
    public partial class ArchiveProductsMetadataEntry : IEquatable<ArchiveProductsMetadataEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveProductsMetadataEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArchiveProductsMetadataEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveProductsMetadataEntry" /> class.
        /// </summary>
        /// <param name="version">version.</param>
        /// <param name="areaId">areaId (required).</param>
        /// <param name="sourceId">sourceId (required).</param>
        /// <param name="relativePathMetaDataFile">relativePathMetaDataFile (required).</param>
        /// <param name="relativePathProducts">Relative Path Products (required).</param>
        /// <param name="dataSetCreationTime">dataSetCreationTime.</param>
        /// <param name="timeZero">timeZero.</param>
        /// <param name="attributes">Archive Products Metadata Attributes (required).</param>
        public ArchiveProductsMetadataEntry(string version = default(string), string areaId = default(string), string sourceId = default(string), string relativePathMetaDataFile = default(string), List<string> relativePathProducts = default(List<string>), string dataSetCreationTime = default(string), string timeZero = default(string), List<ArchiveProductsMetadataAttribute> attributes = default(List<ArchiveProductsMetadataAttribute>))
        {
            // to ensure "areaId" is required (not null)
            if (areaId == null)
            {
                throw new ArgumentNullException("areaId is a required property for ArchiveProductsMetadataEntry and cannot be null");
            }
            this.AreaId = areaId;
            // to ensure "sourceId" is required (not null)
            if (sourceId == null)
            {
                throw new ArgumentNullException("sourceId is a required property for ArchiveProductsMetadataEntry and cannot be null");
            }
            this.SourceId = sourceId;
            // to ensure "relativePathMetaDataFile" is required (not null)
            if (relativePathMetaDataFile == null)
            {
                throw new ArgumentNullException("relativePathMetaDataFile is a required property for ArchiveProductsMetadataEntry and cannot be null");
            }
            this.RelativePathMetaDataFile = relativePathMetaDataFile;
            // to ensure "relativePathProducts" is required (not null)
            if (relativePathProducts == null)
            {
                throw new ArgumentNullException("relativePathProducts is a required property for ArchiveProductsMetadataEntry and cannot be null");
            }
            this.RelativePathProducts = relativePathProducts;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for ArchiveProductsMetadataEntry and cannot be null");
            }
            this.Attributes = attributes;
            this._Version = version;
            this.DataSetCreationTime = dataSetCreationTime;
            this.TimeZero = timeZero;
        }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// Gets or Sets AreaId
        /// </summary>
        [DataMember(Name = "areaId", IsRequired = true, EmitDefaultValue = true)]
        public string AreaId { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or Sets RelativePathMetaDataFile
        /// </summary>
        [DataMember(Name = "relativePathMetaDataFile", IsRequired = true, EmitDefaultValue = true)]
        public string RelativePathMetaDataFile { get; set; }

        /// <summary>
        /// Relative Path Products
        /// </summary>
        /// <value>Relative Path Products</value>
        [DataMember(Name = "relativePathProducts", IsRequired = true, EmitDefaultValue = true)]
        public List<string> RelativePathProducts { get; set; }

        /// <summary>
        /// Gets or Sets DataSetCreationTime
        /// </summary>
        [DataMember(Name = "dataSetCreationTime", EmitDefaultValue = false)]
        public string DataSetCreationTime { get; set; }

        /// <summary>
        /// Gets or Sets TimeZero
        /// </summary>
        [DataMember(Name = "timeZero", EmitDefaultValue = false)]
        public string TimeZero { get; set; }

        /// <summary>
        /// Archive Products Metadata Attributes
        /// </summary>
        /// <value>Archive Products Metadata Attributes</value>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public List<ArchiveProductsMetadataAttribute> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArchiveProductsMetadataEntry {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  AreaId: ").Append(AreaId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  RelativePathMetaDataFile: ").Append(RelativePathMetaDataFile).Append("\n");
            sb.Append("  RelativePathProducts: ").Append(RelativePathProducts).Append("\n");
            sb.Append("  DataSetCreationTime: ").Append(DataSetCreationTime).Append("\n");
            sb.Append("  TimeZero: ").Append(TimeZero).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArchiveProductsMetadataEntry);
        }

        /// <summary>
        /// Returns true if ArchiveProductsMetadataEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ArchiveProductsMetadataEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArchiveProductsMetadataEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.AreaId == input.AreaId ||
                    (this.AreaId != null &&
                    this.AreaId.Equals(input.AreaId))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.RelativePathMetaDataFile == input.RelativePathMetaDataFile ||
                    (this.RelativePathMetaDataFile != null &&
                    this.RelativePathMetaDataFile.Equals(input.RelativePathMetaDataFile))
                ) && 
                (
                    this.RelativePathProducts == input.RelativePathProducts ||
                    this.RelativePathProducts != null &&
                    input.RelativePathProducts != null &&
                    this.RelativePathProducts.SequenceEqual(input.RelativePathProducts)
                ) && 
                (
                    this.DataSetCreationTime == input.DataSetCreationTime ||
                    (this.DataSetCreationTime != null &&
                    this.DataSetCreationTime.Equals(input.DataSetCreationTime))
                ) && 
                (
                    this.TimeZero == input.TimeZero ||
                    (this.TimeZero != null &&
                    this.TimeZero.Equals(input.TimeZero))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.AreaId != null)
                {
                    hashCode = (hashCode * 59) + this.AreaId.GetHashCode();
                }
                if (this.SourceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                }
                if (this.RelativePathMetaDataFile != null)
                {
                    hashCode = (hashCode * 59) + this.RelativePathMetaDataFile.GetHashCode();
                }
                if (this.RelativePathProducts != null)
                {
                    hashCode = (hashCode * 59) + this.RelativePathProducts.GetHashCode();
                }
                if (this.DataSetCreationTime != null)
                {
                    hashCode = (hashCode * 59) + this.DataSetCreationTime.GetHashCode();
                }
                if (this.TimeZero != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZero.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
