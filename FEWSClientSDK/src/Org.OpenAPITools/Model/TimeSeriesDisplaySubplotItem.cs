/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimeSeriesDisplaySubplotItem
    /// </summary>
    [DataContract(Name = "timeSeriesDisplaySubplotItem")]
    public partial class TimeSeriesDisplaySubplotItem : IEquatable<TimeSeriesDisplaySubplotItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSeriesDisplaySubplotItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeSeriesDisplaySubplotItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSeriesDisplaySubplotItem" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="legend">legend.</param>
        /// <param name="color">color (required).</param>
        /// <param name="lineStyle">lineStyle.</param>
        /// <param name="visibleInLegend">visibleInLegend (required).</param>
        /// <param name="visibleInPlot">visibleInPlot (required).</param>
        /// <param name="visibleInTable">visibleInTable (required).</param>
        /// <param name="lineWidth">lineWidth.</param>
        /// <param name="opaquenessPercentage">opaquenessPercentage.</param>
        /// <param name="markerStyle">markerStyle.</param>
        /// <param name="markerSize">markerSize.</param>
        /// <param name="locationId">locationId.</param>
        /// <param name="yAxis">yAxis.</param>
        /// <param name="thresholds">thresholds.</param>
        /// <param name="request">Key of the request. Only used if there is only one request..</param>
        /// <param name="requests">Array with the keys of the requests. Only used if there are multiple requests..</param>
        public TimeSeriesDisplaySubplotItem(string type = default(string), string legend = default(string), string color = default(string), string lineStyle = default(string), bool visibleInLegend = default(bool), bool visibleInPlot = default(bool), bool visibleInTable = default(bool), decimal lineWidth = default(decimal), decimal opaquenessPercentage = default(decimal), string markerStyle = default(string), decimal markerSize = default(decimal), string locationId = default(string), TimeSeriesDisplaySubplotItemAxis yAxis = default(TimeSeriesDisplaySubplotItemAxis), TimeSeriesDisplaySubplotItemThreshold thresholds = default(TimeSeriesDisplaySubplotItemThreshold), string request = default(string), List<string> requests = default(List<string>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for TimeSeriesDisplaySubplotItem and cannot be null");
            }
            this.Type = type;
            // to ensure "color" is required (not null)
            if (color == null)
            {
                throw new ArgumentNullException("color is a required property for TimeSeriesDisplaySubplotItem and cannot be null");
            }
            this.Color = color;
            this.VisibleInLegend = visibleInLegend;
            this.VisibleInPlot = visibleInPlot;
            this.VisibleInTable = visibleInTable;
            this.Legend = legend;
            this.LineStyle = lineStyle;
            this.LineWidth = lineWidth;
            this.OpaquenessPercentage = opaquenessPercentage;
            this.MarkerStyle = markerStyle;
            this.MarkerSize = markerSize;
            this.LocationId = locationId;
            this.YAxis = yAxis;
            this.Thresholds = thresholds;
            this.Request = request;
            this.Requests = requests;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Legend
        /// </summary>
        [DataMember(Name = "legend", EmitDefaultValue = false)]
        public string Legend { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", IsRequired = true, EmitDefaultValue = true)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets LineStyle
        /// </summary>
        [DataMember(Name = "lineStyle", EmitDefaultValue = false)]
        public string LineStyle { get; set; }

        /// <summary>
        /// Gets or Sets VisibleInLegend
        /// </summary>
        [DataMember(Name = "visibleInLegend", IsRequired = true, EmitDefaultValue = true)]
        public bool VisibleInLegend { get; set; }

        /// <summary>
        /// Gets or Sets VisibleInPlot
        /// </summary>
        [DataMember(Name = "visibleInPlot", IsRequired = true, EmitDefaultValue = true)]
        public bool VisibleInPlot { get; set; }

        /// <summary>
        /// Gets or Sets VisibleInTable
        /// </summary>
        [DataMember(Name = "visibleInTable", IsRequired = true, EmitDefaultValue = true)]
        public bool VisibleInTable { get; set; }

        /// <summary>
        /// Gets or Sets LineWidth
        /// </summary>
        [DataMember(Name = "lineWidth", EmitDefaultValue = false)]
        public decimal LineWidth { get; set; }

        /// <summary>
        /// Gets or Sets OpaquenessPercentage
        /// </summary>
        [DataMember(Name = "opaquenessPercentage", EmitDefaultValue = false)]
        public decimal OpaquenessPercentage { get; set; }

        /// <summary>
        /// Gets or Sets MarkerStyle
        /// </summary>
        [DataMember(Name = "markerStyle", EmitDefaultValue = false)]
        public string MarkerStyle { get; set; }

        /// <summary>
        /// Gets or Sets MarkerSize
        /// </summary>
        [DataMember(Name = "markerSize", EmitDefaultValue = false)]
        public decimal MarkerSize { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "locationId", EmitDefaultValue = false)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets YAxis
        /// </summary>
        [DataMember(Name = "yAxis", EmitDefaultValue = false)]
        public TimeSeriesDisplaySubplotItemAxis YAxis { get; set; }

        /// <summary>
        /// Gets or Sets Thresholds
        /// </summary>
        [DataMember(Name = "thresholds", EmitDefaultValue = false)]
        public TimeSeriesDisplaySubplotItemThreshold Thresholds { get; set; }

        /// <summary>
        /// Key of the request. Only used if there is only one request.
        /// </summary>
        /// <value>Key of the request. Only used if there is only one request.</value>
        [DataMember(Name = "request", EmitDefaultValue = false)]
        public string Request { get; set; }

        /// <summary>
        /// Array with the keys of the requests. Only used if there are multiple requests.
        /// </summary>
        /// <value>Array with the keys of the requests. Only used if there are multiple requests.</value>
        [DataMember(Name = "requests", EmitDefaultValue = false)]
        public List<string> Requests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeSeriesDisplaySubplotItem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Legend: ").Append(Legend).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  LineStyle: ").Append(LineStyle).Append("\n");
            sb.Append("  VisibleInLegend: ").Append(VisibleInLegend).Append("\n");
            sb.Append("  VisibleInPlot: ").Append(VisibleInPlot).Append("\n");
            sb.Append("  VisibleInTable: ").Append(VisibleInTable).Append("\n");
            sb.Append("  LineWidth: ").Append(LineWidth).Append("\n");
            sb.Append("  OpaquenessPercentage: ").Append(OpaquenessPercentage).Append("\n");
            sb.Append("  MarkerStyle: ").Append(MarkerStyle).Append("\n");
            sb.Append("  MarkerSize: ").Append(MarkerSize).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  YAxis: ").Append(YAxis).Append("\n");
            sb.Append("  Thresholds: ").Append(Thresholds).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Requests: ").Append(Requests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeSeriesDisplaySubplotItem);
        }

        /// <summary>
        /// Returns true if TimeSeriesDisplaySubplotItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeSeriesDisplaySubplotItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeSeriesDisplaySubplotItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Legend == input.Legend ||
                    (this.Legend != null &&
                    this.Legend.Equals(input.Legend))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.LineStyle == input.LineStyle ||
                    (this.LineStyle != null &&
                    this.LineStyle.Equals(input.LineStyle))
                ) && 
                (
                    this.VisibleInLegend == input.VisibleInLegend ||
                    this.VisibleInLegend.Equals(input.VisibleInLegend)
                ) && 
                (
                    this.VisibleInPlot == input.VisibleInPlot ||
                    this.VisibleInPlot.Equals(input.VisibleInPlot)
                ) && 
                (
                    this.VisibleInTable == input.VisibleInTable ||
                    this.VisibleInTable.Equals(input.VisibleInTable)
                ) && 
                (
                    this.LineWidth == input.LineWidth ||
                    this.LineWidth.Equals(input.LineWidth)
                ) && 
                (
                    this.OpaquenessPercentage == input.OpaquenessPercentage ||
                    this.OpaquenessPercentage.Equals(input.OpaquenessPercentage)
                ) && 
                (
                    this.MarkerStyle == input.MarkerStyle ||
                    (this.MarkerStyle != null &&
                    this.MarkerStyle.Equals(input.MarkerStyle))
                ) && 
                (
                    this.MarkerSize == input.MarkerSize ||
                    this.MarkerSize.Equals(input.MarkerSize)
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.YAxis == input.YAxis ||
                    (this.YAxis != null &&
                    this.YAxis.Equals(input.YAxis))
                ) && 
                (
                    this.Thresholds == input.Thresholds ||
                    (this.Thresholds != null &&
                    this.Thresholds.Equals(input.Thresholds))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Requests == input.Requests ||
                    this.Requests != null &&
                    input.Requests != null &&
                    this.Requests.SequenceEqual(input.Requests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Legend != null)
                {
                    hashCode = (hashCode * 59) + this.Legend.GetHashCode();
                }
                if (this.Color != null)
                {
                    hashCode = (hashCode * 59) + this.Color.GetHashCode();
                }
                if (this.LineStyle != null)
                {
                    hashCode = (hashCode * 59) + this.LineStyle.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VisibleInLegend.GetHashCode();
                hashCode = (hashCode * 59) + this.VisibleInPlot.GetHashCode();
                hashCode = (hashCode * 59) + this.VisibleInTable.GetHashCode();
                hashCode = (hashCode * 59) + this.LineWidth.GetHashCode();
                hashCode = (hashCode * 59) + this.OpaquenessPercentage.GetHashCode();
                if (this.MarkerStyle != null)
                {
                    hashCode = (hashCode * 59) + this.MarkerStyle.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MarkerSize.GetHashCode();
                if (this.LocationId != null)
                {
                    hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                }
                if (this.YAxis != null)
                {
                    hashCode = (hashCode * 59) + this.YAxis.GetHashCode();
                }
                if (this.Thresholds != null)
                {
                    hashCode = (hashCode * 59) + this.Thresholds.GetHashCode();
                }
                if (this.Request != null)
                {
                    hashCode = (hashCode * 59) + this.Request.GetHashCode();
                }
                if (this.Requests != null)
                {
                    hashCode = (hashCode * 59) + this.Requests.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
