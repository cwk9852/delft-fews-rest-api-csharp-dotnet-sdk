/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Timeseries event
    /// </summary>
    [DataContract(Name = "Event")]
    public partial class Event : IEquatable<Event>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Event() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        /// <param name="date">Date (required).</param>
        /// <param name="time">Time (required).</param>
        /// <param name="startDate">Start Date.</param>
        /// <param name="startTime">Start Time.</param>
        /// <param name="endDate">End Date.</param>
        /// <param name="endTime">End Time.</param>
        /// <param name="value">Value (required).</param>
        /// <param name="minValue">Minimum Value.</param>
        /// <param name="maxValue">Maximum Value.</param>
        /// <param name="detection">Detection Symbol.</param>
        /// <param name="flag">Flag (required).</param>
        /// <param name="flagSource">Flag.</param>
        /// <param name="flagSourceColumn">Flag Source Column.</param>
        /// <param name="comment">Comment.</param>
        /// <param name="user">User.</param>
        public Event(string date = default(string), string time = default(string), string startDate = default(string), string startTime = default(string), string endDate = default(string), string endTime = default(string), string value = default(string), string minValue = default(string), string maxValue = default(string), string detection = default(string), string flag = default(string), string flagSource = default(string), Object flagSourceColumn = default(Object), string comment = default(string), string user = default(string))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for Event and cannot be null");
            }
            this.Date = date;
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new ArgumentNullException("time is a required property for Event and cannot be null");
            }
            this.Time = time;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for Event and cannot be null");
            }
            this.Value = value;
            // to ensure "flag" is required (not null)
            if (flag == null)
            {
                throw new ArgumentNullException("flag is a required property for Event and cannot be null");
            }
            this.Flag = flag;
            this.StartDate = startDate;
            this.StartTime = startTime;
            this.EndDate = endDate;
            this.EndTime = endTime;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
            this.Detection = detection;
            this.FlagSource = flagSource;
            this.FlagSourceColumn = flagSourceColumn;
            this.Comment = comment;
            this.User = user;
        }

        /// <summary>
        /// Date
        /// </summary>
        /// <value>Date</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public string Date { get; set; }

        /// <summary>
        /// Time
        /// </summary>
        /// <value>Time</value>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public string Time { get; set; }

        /// <summary>
        /// Start Date
        /// </summary>
        /// <value>Start Date</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Start Time
        /// </summary>
        /// <value>Start Time</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// End Date
        /// </summary>
        /// <value>End Date</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// End Time
        /// </summary>
        /// <value>End Time</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        /// <value>Value</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Minimum Value
        /// </summary>
        /// <value>Minimum Value</value>
        [DataMember(Name = "minValue", EmitDefaultValue = false)]
        public string MinValue { get; set; }

        /// <summary>
        /// Maximum Value
        /// </summary>
        /// <value>Maximum Value</value>
        [DataMember(Name = "maxValue", EmitDefaultValue = false)]
        public string MaxValue { get; set; }

        /// <summary>
        /// Detection Symbol
        /// </summary>
        /// <value>Detection Symbol</value>
        [DataMember(Name = "detection", EmitDefaultValue = false)]
        public string Detection { get; set; }

        /// <summary>
        /// Flag
        /// </summary>
        /// <value>Flag</value>
        [DataMember(Name = "flag", IsRequired = true, EmitDefaultValue = true)]
        public string Flag { get; set; }

        /// <summary>
        /// Flag
        /// </summary>
        /// <value>Flag</value>
        [DataMember(Name = "flagSource", EmitDefaultValue = false)]
        public string FlagSource { get; set; }

        /// <summary>
        /// Flag Source Column
        /// </summary>
        /// <value>Flag Source Column</value>
        [DataMember(Name = "flagSourceColumn", EmitDefaultValue = false)]
        public Object FlagSourceColumn { get; set; }

        /// <summary>
        /// Comment
        /// </summary>
        /// <value>Comment</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// User
        /// </summary>
        /// <value>User</value>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Detection: ").Append(Detection).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  FlagSource: ").Append(FlagSource).Append("\n");
            sb.Append("  FlagSourceColumn: ").Append(FlagSourceColumn).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Event);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="input">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    this.Detection == input.Detection ||
                    (this.Detection != null &&
                    this.Detection.Equals(input.Detection))
                ) && 
                (
                    this.Flag == input.Flag ||
                    (this.Flag != null &&
                    this.Flag.Equals(input.Flag))
                ) && 
                (
                    this.FlagSource == input.FlagSource ||
                    (this.FlagSource != null &&
                    this.FlagSource.Equals(input.FlagSource))
                ) && 
                (
                    this.FlagSourceColumn == input.FlagSourceColumn ||
                    (this.FlagSourceColumn != null &&
                    this.FlagSourceColumn.Equals(input.FlagSourceColumn))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.MinValue != null)
                {
                    hashCode = (hashCode * 59) + this.MinValue.GetHashCode();
                }
                if (this.MaxValue != null)
                {
                    hashCode = (hashCode * 59) + this.MaxValue.GetHashCode();
                }
                if (this.Detection != null)
                {
                    hashCode = (hashCode * 59) + this.Detection.GetHashCode();
                }
                if (this.Flag != null)
                {
                    hashCode = (hashCode * 59) + this.Flag.GetHashCode();
                }
                if (this.FlagSource != null)
                {
                    hashCode = (hashCode * 59) + this.FlagSource.GetHashCode();
                }
                if (this.FlagSourceColumn != null)
                {
                    hashCode = (hashCode * 59) + this.FlagSourceColumn.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
