/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExternalNetCDFStorageForecast
    /// </summary>
    [DataContract(Name = "ExternalNetCDFStorageForecast")]
    public partial class ExternalNetCDFStorageForecast : IEquatable<ExternalNetCDFStorageForecast>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalNetCDFStorageForecast" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalNetCDFStorageForecast() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalNetCDFStorageForecast" /> class.
        /// </summary>
        /// <param name="forecastTime">forecastTime (required).</param>
        /// <param name="forecastAvailableTime">forecastAvailableTime (required).</param>
        /// <param name="attributes">External NetCD FStorage Forecasts Attributes.</param>
        public ExternalNetCDFStorageForecast(string forecastTime = default(string), string forecastAvailableTime = default(string), List<ExternalNetCDFStorageForecastAttribute> attributes = default(List<ExternalNetCDFStorageForecastAttribute>))
        {
            // to ensure "forecastTime" is required (not null)
            if (forecastTime == null)
            {
                throw new ArgumentNullException("forecastTime is a required property for ExternalNetCDFStorageForecast and cannot be null");
            }
            this.ForecastTime = forecastTime;
            // to ensure "forecastAvailableTime" is required (not null)
            if (forecastAvailableTime == null)
            {
                throw new ArgumentNullException("forecastAvailableTime is a required property for ExternalNetCDFStorageForecast and cannot be null");
            }
            this.ForecastAvailableTime = forecastAvailableTime;
            this.Attributes = attributes;
        }

        /// <summary>
        /// Gets or Sets ForecastTime
        /// </summary>
        [DataMember(Name = "forecastTime", IsRequired = true, EmitDefaultValue = true)]
        public string ForecastTime { get; set; }

        /// <summary>
        /// Gets or Sets ForecastAvailableTime
        /// </summary>
        [DataMember(Name = "forecastAvailableTime", IsRequired = true, EmitDefaultValue = true)]
        public string ForecastAvailableTime { get; set; }

        /// <summary>
        /// External NetCD FStorage Forecasts Attributes
        /// </summary>
        /// <value>External NetCD FStorage Forecasts Attributes</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<ExternalNetCDFStorageForecastAttribute> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalNetCDFStorageForecast {\n");
            sb.Append("  ForecastTime: ").Append(ForecastTime).Append("\n");
            sb.Append("  ForecastAvailableTime: ").Append(ForecastAvailableTime).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalNetCDFStorageForecast);
        }

        /// <summary>
        /// Returns true if ExternalNetCDFStorageForecast instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalNetCDFStorageForecast to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalNetCDFStorageForecast input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ForecastTime == input.ForecastTime ||
                    (this.ForecastTime != null &&
                    this.ForecastTime.Equals(input.ForecastTime))
                ) && 
                (
                    this.ForecastAvailableTime == input.ForecastAvailableTime ||
                    (this.ForecastAvailableTime != null &&
                    this.ForecastAvailableTime.Equals(input.ForecastAvailableTime))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ForecastTime != null)
                {
                    hashCode = (hashCode * 59) + this.ForecastTime.GetHashCode();
                }
                if (this.ForecastAvailableTime != null)
                {
                    hashCode = (hashCode * 59) + this.ForecastAvailableTime.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
