/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TopologyDisplayGroupItem
    /// </summary>
    [DataContract(Name = "TopologyDisplayGroupItem")]
    public partial class TopologyDisplayGroupItem : IEquatable<TopologyDisplayGroupItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TopologyDisplayGroupItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TopologyDisplayGroupItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TopologyDisplayGroupItem" /> class.
        /// </summary>
        /// <param name="displayGroupId">displayGroupId (required).</param>
        /// <param name="plotNodes">TopologyDisplayGroupPlotNode.</param>
        public TopologyDisplayGroupItem(string displayGroupId = default(string), List<TopologyDisplayGroupPlotNode> plotNodes = default(List<TopologyDisplayGroupPlotNode>))
        {
            // to ensure "displayGroupId" is required (not null)
            if (displayGroupId == null)
            {
                throw new ArgumentNullException("displayGroupId is a required property for TopologyDisplayGroupItem and cannot be null");
            }
            this.DisplayGroupId = displayGroupId;
            this.PlotNodes = plotNodes;
        }

        /// <summary>
        /// Gets or Sets DisplayGroupId
        /// </summary>
        [DataMember(Name = "displayGroupId", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayGroupId { get; set; }

        /// <summary>
        /// TopologyDisplayGroupPlotNode
        /// </summary>
        /// <value>TopologyDisplayGroupPlotNode</value>
        [DataMember(Name = "plotNodes", EmitDefaultValue = false)]
        public List<TopologyDisplayGroupPlotNode> PlotNodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TopologyDisplayGroupItem {\n");
            sb.Append("  DisplayGroupId: ").Append(DisplayGroupId).Append("\n");
            sb.Append("  PlotNodes: ").Append(PlotNodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TopologyDisplayGroupItem);
        }

        /// <summary>
        /// Returns true if TopologyDisplayGroupItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TopologyDisplayGroupItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TopologyDisplayGroupItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayGroupId == input.DisplayGroupId ||
                    (this.DisplayGroupId != null &&
                    this.DisplayGroupId.Equals(input.DisplayGroupId))
                ) && 
                (
                    this.PlotNodes == input.PlotNodes ||
                    this.PlotNodes != null &&
                    input.PlotNodes != null &&
                    this.PlotNodes.SequenceEqual(input.PlotNodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayGroupId.GetHashCode();
                }
                if (this.PlotNodes != null)
                {
                    hashCode = (hashCode * 59) + this.PlotNodes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
