/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// System Time PI_JSON
    /// </summary>
    [DataContract(Name = "pi_rest_systemtime")]
    public partial class PiRestSystemtime : IEquatable<PiRestSystemtime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PiRestSystemtime" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PiRestSystemtime() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PiRestSystemtime" /> class.
        /// </summary>
        /// <param name="systemTime">System Time. For example: 2017-10-31T23:00:00Z (required).</param>
        public PiRestSystemtime(string systemTime = default(string))
        {
            // to ensure "systemTime" is required (not null)
            if (systemTime == null)
            {
                throw new ArgumentNullException("systemTime is a required property for PiRestSystemtime and cannot be null");
            }
            this.SystemTime = systemTime;
        }

        /// <summary>
        /// System Time. For example: 2017-10-31T23:00:00Z
        /// </summary>
        /// <value>System Time. For example: 2017-10-31T23:00:00Z</value>
        [DataMember(Name = "systemTime", IsRequired = true, EmitDefaultValue = true)]
        public string SystemTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PiRestSystemtime {\n");
            sb.Append("  SystemTime: ").Append(SystemTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PiRestSystemtime);
        }

        /// <summary>
        /// Returns true if PiRestSystemtime instances are equal
        /// </summary>
        /// <param name="input">Instance of PiRestSystemtime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PiRestSystemtime input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemTime == input.SystemTime ||
                    (this.SystemTime != null &&
                    this.SystemTime.Equals(input.SystemTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SystemTime != null)
                {
                    hashCode = (hashCode * 59) + this.SystemTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
