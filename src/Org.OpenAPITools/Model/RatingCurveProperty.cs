/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Property
    /// </summary>
    [DataContract(Name = "RatingCurveProperty")]
    public partial class RatingCurveProperty : IEquatable<RatingCurveProperty>, IValidatableObject
    {
        /// <summary>
        /// Type of the property. One of: string, int, float, double, bool, dateTime
        /// </summary>
        /// <value>Type of the property. One of: string, int, float, double, bool, dateTime</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            [EnumMember(Value = "int")]
            Int = 2,

            /// <summary>
            /// Enum Float for value: float
            /// </summary>
            [EnumMember(Value = "float")]
            Float = 3,

            /// <summary>
            /// Enum Double for value: double
            /// </summary>
            [EnumMember(Value = "double")]
            Double = 4,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            [EnumMember(Value = "bool")]
            Bool = 5,

            /// <summary>
            /// Enum DateTime for value: dateTime
            /// </summary>
            [EnumMember(Value = "dateTime")]
            DateTime = 6

        }


        /// <summary>
        /// Type of the property. One of: string, int, float, double, bool, dateTime
        /// </summary>
        /// <value>Type of the property. One of: string, int, float, double, bool, dateTime</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveProperty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RatingCurveProperty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveProperty" /> class.
        /// </summary>
        /// <param name="type">Type of the property. One of: string, int, float, double, bool, dateTime (required).</param>
        /// <param name="key">Property key (required).</param>
        /// <param name="value">Property value. Not used for type dateTime..</param>
        /// <param name="date">Date, only used for properties of type datetime.</param>
        /// <param name="time">Time, only used for properties of type dateTime.</param>
        public RatingCurveProperty(TypeEnum type = default(TypeEnum), string key = default(string), string value = default(string), string date = default(string), string time = default(string))
        {
            this.Type = type;
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for RatingCurveProperty and cannot be null");
            }
            this.Key = key;
            this.Value = value;
            this.Date = date;
            this.Time = time;
        }

        /// <summary>
        /// Property key
        /// </summary>
        /// <value>Property key</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Property value. Not used for type dateTime.
        /// </summary>
        /// <value>Property value. Not used for type dateTime.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Date, only used for properties of type datetime
        /// </summary>
        /// <value>Date, only used for properties of type datetime</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Time, only used for properties of type dateTime
        /// </summary>
        /// <value>Time, only used for properties of type dateTime</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public string Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RatingCurveProperty {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RatingCurveProperty);
        }

        /// <summary>
        /// Returns true if RatingCurveProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of RatingCurveProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingCurveProperty input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
