/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimeSeries PI_JSON
    /// </summary>
    [DataContract(Name = "pi_rest_timeseries")]
    public partial class PiRestTimeseries : IEquatable<PiRestTimeseries>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PiRestTimeseries" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PiRestTimeseries() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PiRestTimeseries" /> class.
        /// </summary>
        /// <param name="version">PI Version (required).</param>
        /// <param name="timeZone">Time Zone of the timeSeries times.</param>
        /// <param name="timeSeries">Time series data represent data collected over a given period of time at a specific location.</param>
        public PiRestTimeseries(string version = default(string), string timeZone = default(string), List<TimeSeriesResult> timeSeries = default(List<TimeSeriesResult>))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new ArgumentNullException("version is a required property for PiRestTimeseries and cannot be null");
            }
            this._Version = version;
            this.TimeZone = timeZone;
            this.TimeSeries = timeSeries;
        }

        /// <summary>
        /// PI Version
        /// </summary>
        /// <value>PI Version</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// Time Zone of the timeSeries times
        /// </summary>
        /// <value>Time Zone of the timeSeries times</value>
        [DataMember(Name = "timeZone", EmitDefaultValue = false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Time series data represent data collected over a given period of time at a specific location
        /// </summary>
        /// <value>Time series data represent data collected over a given period of time at a specific location</value>
        [DataMember(Name = "timeSeries", EmitDefaultValue = false)]
        public List<TimeSeriesResult> TimeSeries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PiRestTimeseries {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  TimeSeries: ").Append(TimeSeries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PiRestTimeseries);
        }

        /// <summary>
        /// Returns true if PiRestTimeseries instances are equal
        /// </summary>
        /// <param name="input">Instance of PiRestTimeseries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PiRestTimeseries input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.TimeSeries == input.TimeSeries ||
                    this.TimeSeries != null &&
                    input.TimeSeries != null &&
                    this.TimeSeries.SequenceEqual(input.TimeSeries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.TimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZone.GetHashCode();
                }
                if (this.TimeSeries != null)
                {
                    hashCode = (hashCode * 59) + this.TimeSeries.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
