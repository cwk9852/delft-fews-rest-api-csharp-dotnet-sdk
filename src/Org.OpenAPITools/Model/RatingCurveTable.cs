/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RatingCurveTable
    /// </summary>
    [DataContract(Name = "RatingCurveTable")]
    public partial class RatingCurveTable : IEquatable<RatingCurveTable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveTable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RatingCurveTable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveTable" /> class.
        /// </summary>
        /// <param name="interpolationMethod">Interpolation method. For example: linear (required).</param>
        /// <param name="minStage">Minimum stage value. -INF for negative infinity and INF for positive infinity (required).</param>
        /// <param name="maxStage">Maximum stage value. -INF for negative infinity and INF for positive infinity (required).</param>
        /// <param name="rows">RatingCurveRow (required).</param>
        public RatingCurveTable(string interpolationMethod = default(string), string minStage = default(string), string maxStage = default(string), List<RatingCurveRow> rows = default(List<RatingCurveRow>))
        {
            // to ensure "interpolationMethod" is required (not null)
            if (interpolationMethod == null)
            {
                throw new ArgumentNullException("interpolationMethod is a required property for RatingCurveTable and cannot be null");
            }
            this.InterpolationMethod = interpolationMethod;
            // to ensure "minStage" is required (not null)
            if (minStage == null)
            {
                throw new ArgumentNullException("minStage is a required property for RatingCurveTable and cannot be null");
            }
            this.MinStage = minStage;
            // to ensure "maxStage" is required (not null)
            if (maxStage == null)
            {
                throw new ArgumentNullException("maxStage is a required property for RatingCurveTable and cannot be null");
            }
            this.MaxStage = maxStage;
            // to ensure "rows" is required (not null)
            if (rows == null)
            {
                throw new ArgumentNullException("rows is a required property for RatingCurveTable and cannot be null");
            }
            this.Rows = rows;
        }

        /// <summary>
        /// Interpolation method. For example: linear
        /// </summary>
        /// <value>Interpolation method. For example: linear</value>
        [DataMember(Name = "interpolationMethod", IsRequired = true, EmitDefaultValue = true)]
        public string InterpolationMethod { get; set; }

        /// <summary>
        /// Minimum stage value. -INF for negative infinity and INF for positive infinity
        /// </summary>
        /// <value>Minimum stage value. -INF for negative infinity and INF for positive infinity</value>
        [DataMember(Name = "minStage", IsRequired = true, EmitDefaultValue = true)]
        public string MinStage { get; set; }

        /// <summary>
        /// Maximum stage value. -INF for negative infinity and INF for positive infinity
        /// </summary>
        /// <value>Maximum stage value. -INF for negative infinity and INF for positive infinity</value>
        [DataMember(Name = "maxStage", IsRequired = true, EmitDefaultValue = true)]
        public string MaxStage { get; set; }

        /// <summary>
        /// RatingCurveRow
        /// </summary>
        /// <value>RatingCurveRow</value>
        [DataMember(Name = "rows", IsRequired = true, EmitDefaultValue = true)]
        public List<RatingCurveRow> Rows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RatingCurveTable {\n");
            sb.Append("  InterpolationMethod: ").Append(InterpolationMethod).Append("\n");
            sb.Append("  MinStage: ").Append(MinStage).Append("\n");
            sb.Append("  MaxStage: ").Append(MaxStage).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RatingCurveTable);
        }

        /// <summary>
        /// Returns true if RatingCurveTable instances are equal
        /// </summary>
        /// <param name="input">Instance of RatingCurveTable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingCurveTable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InterpolationMethod == input.InterpolationMethod ||
                    (this.InterpolationMethod != null &&
                    this.InterpolationMethod.Equals(input.InterpolationMethod))
                ) && 
                (
                    this.MinStage == input.MinStage ||
                    (this.MinStage != null &&
                    this.MinStage.Equals(input.MinStage))
                ) && 
                (
                    this.MaxStage == input.MaxStage ||
                    (this.MaxStage != null &&
                    this.MaxStage.Equals(input.MaxStage))
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InterpolationMethod != null)
                {
                    hashCode = (hashCode * 59) + this.InterpolationMethod.GetHashCode();
                }
                if (this.MinStage != null)
                {
                    hashCode = (hashCode * 59) + this.MinStage.GetHashCode();
                }
                if (this.MaxStage != null)
                {
                    hashCode = (hashCode * 59) + this.MaxStage.GetHashCode();
                }
                if (this.Rows != null)
                {
                    hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
