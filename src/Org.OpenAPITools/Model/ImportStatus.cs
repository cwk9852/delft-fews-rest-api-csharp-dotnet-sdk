/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ImportStatus
    /// </summary>
    [DataContract(Name = "ImportStatus")]
    public partial class ImportStatus : IEquatable<ImportStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportStatus" /> class.
        /// </summary>
        /// <param name="mcId">mcId (required).</param>
        /// <param name="dataFeed">dataFeed (required).</param>
        /// <param name="lastImportTime">lastImportTime (required).</param>
        /// <param name="lastFileImported">lastFileImported (required).</param>
        /// <param name="fileRead">fileRead (required).</param>
        /// <param name="fileFailed">fileFailed (required).</param>
        /// <param name="lastImportTimeBackgroundColor">lastImportTimeBackgroundColor (required).</param>
        public ImportStatus(string mcId = default(string), string dataFeed = default(string), string lastImportTime = default(string), string lastFileImported = default(string), int fileRead = default(int), int fileFailed = default(int), string lastImportTimeBackgroundColor = default(string))
        {
            // to ensure "mcId" is required (not null)
            if (mcId == null)
            {
                throw new ArgumentNullException("mcId is a required property for ImportStatus and cannot be null");
            }
            this.McId = mcId;
            // to ensure "dataFeed" is required (not null)
            if (dataFeed == null)
            {
                throw new ArgumentNullException("dataFeed is a required property for ImportStatus and cannot be null");
            }
            this.DataFeed = dataFeed;
            // to ensure "lastImportTime" is required (not null)
            if (lastImportTime == null)
            {
                throw new ArgumentNullException("lastImportTime is a required property for ImportStatus and cannot be null");
            }
            this.LastImportTime = lastImportTime;
            // to ensure "lastFileImported" is required (not null)
            if (lastFileImported == null)
            {
                throw new ArgumentNullException("lastFileImported is a required property for ImportStatus and cannot be null");
            }
            this.LastFileImported = lastFileImported;
            this.FileRead = fileRead;
            this.FileFailed = fileFailed;
            // to ensure "lastImportTimeBackgroundColor" is required (not null)
            if (lastImportTimeBackgroundColor == null)
            {
                throw new ArgumentNullException("lastImportTimeBackgroundColor is a required property for ImportStatus and cannot be null");
            }
            this.LastImportTimeBackgroundColor = lastImportTimeBackgroundColor;
        }

        /// <summary>
        /// Gets or Sets McId
        /// </summary>
        [DataMember(Name = "mcId", IsRequired = true, EmitDefaultValue = true)]
        public string McId { get; set; }

        /// <summary>
        /// Gets or Sets DataFeed
        /// </summary>
        [DataMember(Name = "dataFeed", IsRequired = true, EmitDefaultValue = true)]
        public string DataFeed { get; set; }

        /// <summary>
        /// Gets or Sets LastImportTime
        /// </summary>
        [DataMember(Name = "lastImportTime", IsRequired = true, EmitDefaultValue = true)]
        public string LastImportTime { get; set; }

        /// <summary>
        /// Gets or Sets LastFileImported
        /// </summary>
        [DataMember(Name = "lastFileImported", IsRequired = true, EmitDefaultValue = true)]
        public string LastFileImported { get; set; }

        /// <summary>
        /// Gets or Sets FileRead
        /// </summary>
        [DataMember(Name = "fileRead", IsRequired = true, EmitDefaultValue = true)]
        public int FileRead { get; set; }

        /// <summary>
        /// Gets or Sets FileFailed
        /// </summary>
        [DataMember(Name = "fileFailed", IsRequired = true, EmitDefaultValue = true)]
        public int FileFailed { get; set; }

        /// <summary>
        /// Gets or Sets LastImportTimeBackgroundColor
        /// </summary>
        [DataMember(Name = "lastImportTimeBackgroundColor", IsRequired = true, EmitDefaultValue = true)]
        public string LastImportTimeBackgroundColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportStatus {\n");
            sb.Append("  McId: ").Append(McId).Append("\n");
            sb.Append("  DataFeed: ").Append(DataFeed).Append("\n");
            sb.Append("  LastImportTime: ").Append(LastImportTime).Append("\n");
            sb.Append("  LastFileImported: ").Append(LastFileImported).Append("\n");
            sb.Append("  FileRead: ").Append(FileRead).Append("\n");
            sb.Append("  FileFailed: ").Append(FileFailed).Append("\n");
            sb.Append("  LastImportTimeBackgroundColor: ").Append(LastImportTimeBackgroundColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportStatus);
        }

        /// <summary>
        /// Returns true if ImportStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.McId == input.McId ||
                    (this.McId != null &&
                    this.McId.Equals(input.McId))
                ) && 
                (
                    this.DataFeed == input.DataFeed ||
                    (this.DataFeed != null &&
                    this.DataFeed.Equals(input.DataFeed))
                ) && 
                (
                    this.LastImportTime == input.LastImportTime ||
                    (this.LastImportTime != null &&
                    this.LastImportTime.Equals(input.LastImportTime))
                ) && 
                (
                    this.LastFileImported == input.LastFileImported ||
                    (this.LastFileImported != null &&
                    this.LastFileImported.Equals(input.LastFileImported))
                ) && 
                (
                    this.FileRead == input.FileRead ||
                    this.FileRead.Equals(input.FileRead)
                ) && 
                (
                    this.FileFailed == input.FileFailed ||
                    this.FileFailed.Equals(input.FileFailed)
                ) && 
                (
                    this.LastImportTimeBackgroundColor == input.LastImportTimeBackgroundColor ||
                    (this.LastImportTimeBackgroundColor != null &&
                    this.LastImportTimeBackgroundColor.Equals(input.LastImportTimeBackgroundColor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.McId != null)
                {
                    hashCode = (hashCode * 59) + this.McId.GetHashCode();
                }
                if (this.DataFeed != null)
                {
                    hashCode = (hashCode * 59) + this.DataFeed.GetHashCode();
                }
                if (this.LastImportTime != null)
                {
                    hashCode = (hashCode * 59) + this.LastImportTime.GetHashCode();
                }
                if (this.LastFileImported != null)
                {
                    hashCode = (hashCode * 59) + this.LastFileImported.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileRead.GetHashCode();
                hashCode = (hashCode * 59) + this.FileFailed.GetHashCode();
                if (this.LastImportTimeBackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.LastImportTimeBackgroundColor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
