/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimeSeriesDisplayConfig
    /// </summary>
    [DataContract(Name = "timeSeriesDisplayConfig")]
    public partial class TimeSeriesDisplayConfig : IEquatable<TimeSeriesDisplayConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSeriesDisplayConfig" /> class.
        /// </summary>
        /// <param name="error">Error in case a not supported configuration is used..</param>
        /// <param name="title">title.</param>
        /// <param name="forecastLegend">forecastLegend.</param>
        /// <param name="subplots">subplots.</param>
        public TimeSeriesDisplayConfig(string error = default(string), string title = default(string), string forecastLegend = default(string), List<TimeSeriesDisplaySubplot> subplots = default(List<TimeSeriesDisplaySubplot>))
        {
            this.Error = error;
            this.Title = title;
            this.ForecastLegend = forecastLegend;
            this.Subplots = subplots;
        }

        /// <summary>
        /// Error in case a not supported configuration is used.
        /// </summary>
        /// <value>Error in case a not supported configuration is used.</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets ForecastLegend
        /// </summary>
        [DataMember(Name = "forecastLegend", EmitDefaultValue = false)]
        public string ForecastLegend { get; set; }

        /// <summary>
        /// Gets or Sets Subplots
        /// </summary>
        [DataMember(Name = "subplots", EmitDefaultValue = false)]
        public List<TimeSeriesDisplaySubplot> Subplots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeSeriesDisplayConfig {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ForecastLegend: ").Append(ForecastLegend).Append("\n");
            sb.Append("  Subplots: ").Append(Subplots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeSeriesDisplayConfig);
        }

        /// <summary>
        /// Returns true if TimeSeriesDisplayConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeSeriesDisplayConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeSeriesDisplayConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ForecastLegend == input.ForecastLegend ||
                    (this.ForecastLegend != null &&
                    this.ForecastLegend.Equals(input.ForecastLegend))
                ) && 
                (
                    this.Subplots == input.Subplots ||
                    this.Subplots != null &&
                    input.Subplots != null &&
                    this.Subplots.SequenceEqual(input.Subplots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.ForecastLegend != null)
                {
                    hashCode = (hashCode * 59) + this.ForecastLegend.GetHashCode();
                }
                if (this.Subplots != null)
                {
                    hashCode = (hashCode * 59) + this.Subplots.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
