/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RatingCurveHeader
    /// </summary>
    [DataContract(Name = "RatingCurveHeader")]
    public partial class RatingCurveHeader : IEquatable<RatingCurveHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RatingCurveHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingCurveHeader" /> class.
        /// </summary>
        /// <param name="locationId">Location Id (required).</param>
        /// <param name="qualifierIds">qualifierIds.</param>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="longName">Long Name.</param>
        /// <param name="stationName">Station Name.</param>
        /// <param name="stageUnit">Stage Unit (required).</param>
        /// <param name="dischargeUnit">Discharge Unit (required).</param>
        /// <param name="sourceOrganisation">Source Organization.</param>
        /// <param name="sourceSystem">Source System.</param>
        /// <param name="fileDescription">File Descriptor.</param>
        /// <param name="comment">Comment.</param>
        /// <param name="creationDate">Creation Date.</param>
        /// <param name="creationTime">Creation Time.</param>
        /// <param name="region">Region.</param>
        /// <param name="properties">properties.</param>
        public RatingCurveHeader(string locationId = default(string), List<string> qualifierIds = default(List<string>), RatingCurveDate startDate = default(RatingCurveDate), RatingCurveDate endDate = default(RatingCurveDate), string longName = default(string), string stationName = default(string), string stageUnit = default(string), string dischargeUnit = default(string), string sourceOrganisation = default(string), string sourceSystem = default(string), string fileDescription = default(string), string comment = default(string), string creationDate = default(string), string creationTime = default(string), string region = default(string), List<RatingCurveProperty> properties = default(List<RatingCurveProperty>))
        {
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new ArgumentNullException("locationId is a required property for RatingCurveHeader and cannot be null");
            }
            this.LocationId = locationId;
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new ArgumentNullException("startDate is a required property for RatingCurveHeader and cannot be null");
            }
            this.StartDate = startDate;
            // to ensure "stageUnit" is required (not null)
            if (stageUnit == null)
            {
                throw new ArgumentNullException("stageUnit is a required property for RatingCurveHeader and cannot be null");
            }
            this.StageUnit = stageUnit;
            // to ensure "dischargeUnit" is required (not null)
            if (dischargeUnit == null)
            {
                throw new ArgumentNullException("dischargeUnit is a required property for RatingCurveHeader and cannot be null");
            }
            this.DischargeUnit = dischargeUnit;
            this.QualifierIds = qualifierIds;
            this.EndDate = endDate;
            this.LongName = longName;
            this.StationName = stationName;
            this.SourceOrganisation = sourceOrganisation;
            this.SourceSystem = sourceSystem;
            this.FileDescription = fileDescription;
            this.Comment = comment;
            this.CreationDate = creationDate;
            this.CreationTime = creationTime;
            this.Region = region;
            this.Properties = properties;
        }

        /// <summary>
        /// Location Id
        /// </summary>
        /// <value>Location Id</value>
        [DataMember(Name = "locationId", IsRequired = true, EmitDefaultValue = true)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets QualifierIds
        /// </summary>
        [DataMember(Name = "qualifierIds", EmitDefaultValue = false)]
        public List<string> QualifierIds { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public RatingCurveDate StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public RatingCurveDate EndDate { get; set; }

        /// <summary>
        /// Long Name
        /// </summary>
        /// <value>Long Name</value>
        [DataMember(Name = "longName", EmitDefaultValue = false)]
        public string LongName { get; set; }

        /// <summary>
        /// Station Name
        /// </summary>
        /// <value>Station Name</value>
        [DataMember(Name = "stationName", EmitDefaultValue = false)]
        public string StationName { get; set; }

        /// <summary>
        /// Stage Unit
        /// </summary>
        /// <value>Stage Unit</value>
        [DataMember(Name = "stageUnit", IsRequired = true, EmitDefaultValue = true)]
        public string StageUnit { get; set; }

        /// <summary>
        /// Discharge Unit
        /// </summary>
        /// <value>Discharge Unit</value>
        [DataMember(Name = "dischargeUnit", IsRequired = true, EmitDefaultValue = true)]
        public string DischargeUnit { get; set; }

        /// <summary>
        /// Source Organization
        /// </summary>
        /// <value>Source Organization</value>
        [DataMember(Name = "sourceOrganisation", EmitDefaultValue = false)]
        public string SourceOrganisation { get; set; }

        /// <summary>
        /// Source System
        /// </summary>
        /// <value>Source System</value>
        [DataMember(Name = "sourceSystem", EmitDefaultValue = false)]
        public string SourceSystem { get; set; }

        /// <summary>
        /// File Descriptor
        /// </summary>
        /// <value>File Descriptor</value>
        [DataMember(Name = "fileDescription", EmitDefaultValue = false)]
        public string FileDescription { get; set; }

        /// <summary>
        /// Comment
        /// </summary>
        /// <value>Comment</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Creation Date
        /// </summary>
        /// <value>Creation Date</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public string CreationDate { get; set; }

        /// <summary>
        /// Creation Time
        /// </summary>
        /// <value>Creation Time</value>
        [DataMember(Name = "creationTime", EmitDefaultValue = false)]
        public string CreationTime { get; set; }

        /// <summary>
        /// Region
        /// </summary>
        /// <value>Region</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<RatingCurveProperty> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RatingCurveHeader {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  QualifierIds: ").Append(QualifierIds).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  LongName: ").Append(LongName).Append("\n");
            sb.Append("  StationName: ").Append(StationName).Append("\n");
            sb.Append("  StageUnit: ").Append(StageUnit).Append("\n");
            sb.Append("  DischargeUnit: ").Append(DischargeUnit).Append("\n");
            sb.Append("  SourceOrganisation: ").Append(SourceOrganisation).Append("\n");
            sb.Append("  SourceSystem: ").Append(SourceSystem).Append("\n");
            sb.Append("  FileDescription: ").Append(FileDescription).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RatingCurveHeader);
        }

        /// <summary>
        /// Returns true if RatingCurveHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of RatingCurveHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingCurveHeader input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.QualifierIds == input.QualifierIds ||
                    this.QualifierIds != null &&
                    input.QualifierIds != null &&
                    this.QualifierIds.SequenceEqual(input.QualifierIds)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.LongName == input.LongName ||
                    (this.LongName != null &&
                    this.LongName.Equals(input.LongName))
                ) && 
                (
                    this.StationName == input.StationName ||
                    (this.StationName != null &&
                    this.StationName.Equals(input.StationName))
                ) && 
                (
                    this.StageUnit == input.StageUnit ||
                    (this.StageUnit != null &&
                    this.StageUnit.Equals(input.StageUnit))
                ) && 
                (
                    this.DischargeUnit == input.DischargeUnit ||
                    (this.DischargeUnit != null &&
                    this.DischargeUnit.Equals(input.DischargeUnit))
                ) && 
                (
                    this.SourceOrganisation == input.SourceOrganisation ||
                    (this.SourceOrganisation != null &&
                    this.SourceOrganisation.Equals(input.SourceOrganisation))
                ) && 
                (
                    this.SourceSystem == input.SourceSystem ||
                    (this.SourceSystem != null &&
                    this.SourceSystem.Equals(input.SourceSystem))
                ) && 
                (
                    this.FileDescription == input.FileDescription ||
                    (this.FileDescription != null &&
                    this.FileDescription.Equals(input.FileDescription))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationId != null)
                {
                    hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                }
                if (this.QualifierIds != null)
                {
                    hashCode = (hashCode * 59) + this.QualifierIds.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.LongName != null)
                {
                    hashCode = (hashCode * 59) + this.LongName.GetHashCode();
                }
                if (this.StationName != null)
                {
                    hashCode = (hashCode * 59) + this.StationName.GetHashCode();
                }
                if (this.StageUnit != null)
                {
                    hashCode = (hashCode * 59) + this.StageUnit.GetHashCode();
                }
                if (this.DischargeUnit != null)
                {
                    hashCode = (hashCode * 59) + this.DischargeUnit.GetHashCode();
                }
                if (this.SourceOrganisation != null)
                {
                    hashCode = (hashCode * 59) + this.SourceOrganisation.GetHashCode();
                }
                if (this.SourceSystem != null)
                {
                    hashCode = (hashCode * 59) + this.SourceSystem.GetHashCode();
                }
                if (this.FileDescription != null)
                {
                    hashCode = (hashCode * 59) + this.FileDescription.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.CreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDate.GetHashCode();
                }
                if (this.CreationTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreationTime.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
