/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimeSeriesDisplaySubplotItemAxis
    /// </summary>
    [DataContract(Name = "TimeSeriesDisplaySubplotItemAxis")]
    public partial class TimeSeriesDisplaySubplotItemAxis : IEquatable<TimeSeriesDisplaySubplotItemAxis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSeriesDisplaySubplotItemAxis" /> class.
        /// </summary>
        /// <param name="axisPosition">axisPosition.</param>
        /// <param name="axisLabel">axisLabel.</param>
        /// <param name="axisMinValue">axisMinValue.</param>
        /// <param name="axisMaxValue">axisMaxValue.</param>
        public TimeSeriesDisplaySubplotItemAxis(string axisPosition = default(string), string axisLabel = default(string), decimal axisMinValue = default(decimal), decimal axisMaxValue = default(decimal))
        {
            this.AxisPosition = axisPosition;
            this.AxisLabel = axisLabel;
            this.AxisMinValue = axisMinValue;
            this.AxisMaxValue = axisMaxValue;
        }

        /// <summary>
        /// Gets or Sets AxisPosition
        /// </summary>
        [DataMember(Name = "axisPosition", EmitDefaultValue = false)]
        public string AxisPosition { get; set; }

        /// <summary>
        /// Gets or Sets AxisLabel
        /// </summary>
        [DataMember(Name = "axisLabel", EmitDefaultValue = false)]
        public string AxisLabel { get; set; }

        /// <summary>
        /// Gets or Sets AxisMinValue
        /// </summary>
        [DataMember(Name = "axisMinValue", EmitDefaultValue = false)]
        public decimal AxisMinValue { get; set; }

        /// <summary>
        /// Gets or Sets AxisMaxValue
        /// </summary>
        [DataMember(Name = "axisMaxValue", EmitDefaultValue = false)]
        public decimal AxisMaxValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeSeriesDisplaySubplotItemAxis {\n");
            sb.Append("  AxisPosition: ").Append(AxisPosition).Append("\n");
            sb.Append("  AxisLabel: ").Append(AxisLabel).Append("\n");
            sb.Append("  AxisMinValue: ").Append(AxisMinValue).Append("\n");
            sb.Append("  AxisMaxValue: ").Append(AxisMaxValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeSeriesDisplaySubplotItemAxis);
        }

        /// <summary>
        /// Returns true if TimeSeriesDisplaySubplotItemAxis instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeSeriesDisplaySubplotItemAxis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeSeriesDisplaySubplotItemAxis input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AxisPosition == input.AxisPosition ||
                    (this.AxisPosition != null &&
                    this.AxisPosition.Equals(input.AxisPosition))
                ) && 
                (
                    this.AxisLabel == input.AxisLabel ||
                    (this.AxisLabel != null &&
                    this.AxisLabel.Equals(input.AxisLabel))
                ) && 
                (
                    this.AxisMinValue == input.AxisMinValue ||
                    this.AxisMinValue.Equals(input.AxisMinValue)
                ) && 
                (
                    this.AxisMaxValue == input.AxisMaxValue ||
                    this.AxisMaxValue.Equals(input.AxisMaxValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AxisPosition != null)
                {
                    hashCode = (hashCode * 59) + this.AxisPosition.GetHashCode();
                }
                if (this.AxisLabel != null)
                {
                    hashCode = (hashCode * 59) + this.AxisLabel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AxisMinValue.GetHashCode();
                hashCode = (hashCode * 59) + this.AxisMaxValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
