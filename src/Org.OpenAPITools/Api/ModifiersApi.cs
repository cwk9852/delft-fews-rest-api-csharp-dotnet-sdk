/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModifiersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get modifiers filtered by parameters like start time, end time and modifier type
        /// </summary>
        /// <remarks>
        /// Get modifiers filtered by parameters like start time, end time and modifier type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object Modifiers(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get modifiers filtered by parameters like start time, end time and modifier type
        /// </summary>
        /// <remarks>
        /// Get modifiers filtered by parameters like start time, end time and modifier type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModifiersWithHttpInfo(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Write modifiers to the Delft-FEWS database
        /// </summary>
        /// <remarks>
        /// Write modifiers to the Delft-FEWS database. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitModifiers">Commit modifiers (optional)</param>
        /// <param name="deleteAllModifiers">Delete all modifiers (optional)</param>
        /// <param name="piModifiersXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modifiers.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object Postmodifiers(string commitModifiers = default(string), string deleteAllModifiers = default(string), string piModifiersXmlContent = default(string), int operationIndex = 0);

        /// <summary>
        /// Write modifiers to the Delft-FEWS database
        /// </summary>
        /// <remarks>
        /// Write modifiers to the Delft-FEWS database. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitModifiers">Commit modifiers (optional)</param>
        /// <param name="deleteAllModifiers">Delete all modifiers (optional)</param>
        /// <param name="piModifiersXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modifiers.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PostmodifiersWithHttpInfo(string commitModifiers = default(string), string deleteAllModifiers = default(string), string piModifiersXmlContent = default(string), int operationIndex = 0);
        /// <summary>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type
        /// </summary>
        /// <remarks>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="onlyActiveModifiers">Only Active Modifiers (optional)</param>
        /// <param name="userDefinedModifierDescription">User Defined Modifier Description (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object Timeseriesmodifiers(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string userId = default(string), List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), string onlyActiveModifiers = default(string), string userDefinedModifierDescription = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type
        /// </summary>
        /// <remarks>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="onlyActiveModifiers">Only Active Modifiers (optional)</param>
        /// <param name="userDefinedModifierDescription">User Defined Modifier Description (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TimeseriesmodifiersWithHttpInfo(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string userId = default(string), List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), string onlyActiveModifiers = default(string), string userDefinedModifierDescription = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModifiersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get modifiers filtered by parameters like start time, end time and modifier type
        /// </summary>
        /// <remarks>
        /// Get modifiers filtered by parameters like start time, end time and modifier type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModifiersAsync(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get modifiers filtered by parameters like start time, end time and modifier type
        /// </summary>
        /// <remarks>
        /// Get modifiers filtered by parameters like start time, end time and modifier type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModifiersWithHttpInfoAsync(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Write modifiers to the Delft-FEWS database
        /// </summary>
        /// <remarks>
        /// Write modifiers to the Delft-FEWS database. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitModifiers">Commit modifiers (optional)</param>
        /// <param name="deleteAllModifiers">Delete all modifiers (optional)</param>
        /// <param name="piModifiersXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modifiers.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PostmodifiersAsync(string commitModifiers = default(string), string deleteAllModifiers = default(string), string piModifiersXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Write modifiers to the Delft-FEWS database
        /// </summary>
        /// <remarks>
        /// Write modifiers to the Delft-FEWS database. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitModifiers">Commit modifiers (optional)</param>
        /// <param name="deleteAllModifiers">Delete all modifiers (optional)</param>
        /// <param name="piModifiersXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modifiers.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostmodifiersWithHttpInfoAsync(string commitModifiers = default(string), string deleteAllModifiers = default(string), string piModifiersXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type
        /// </summary>
        /// <remarks>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="onlyActiveModifiers">Only Active Modifiers (optional)</param>
        /// <param name="userDefinedModifierDescription">User Defined Modifier Description (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TimeseriesmodifiersAsync(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string userId = default(string), List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), string onlyActiveModifiers = default(string), string userDefinedModifierDescription = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type
        /// </summary>
        /// <remarks>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="onlyActiveModifiers">Only Active Modifiers (optional)</param>
        /// <param name="userDefinedModifierDescription">User Defined Modifier Description (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TimeseriesmodifiersWithHttpInfoAsync(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string userId = default(string), List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), string onlyActiveModifiers = default(string), string userDefinedModifierDescription = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModifiersApi : IModifiersApiSync, IModifiersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModifiersApi : IModifiersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModifiersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModifiersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModifiersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModifiersApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModifiersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModifiersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModifiersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModifiersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get modifiers filtered by parameters like start time, end time and modifier type Get modifiers filtered by parameters like start time, end time and modifier type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object Modifiers(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ModifiersWithHttpInfo(startTimeModifiers, endTimeModifiers, modifierType, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get modifiers filtered by parameters like start time, end time and modifier type Get modifiers filtered by parameters like start time, end time and modifier type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ModifiersWithHttpInfo(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTimeModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTimeModifiers", startTimeModifiers));
            }
            if (endTimeModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTimeModifiers", endTimeModifiers));
            }
            if (modifierType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modifierType", modifierType));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ModifiersApi.Modifiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/modifiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Modifiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get modifiers filtered by parameters like start time, end time and modifier type Get modifiers filtered by parameters like start time, end time and modifier type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModifiersAsync(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ModifiersWithHttpInfoAsync(startTimeModifiers, endTimeModifiers, modifierType, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get modifiers filtered by parameters like start time, end time and modifier type Get modifiers filtered by parameters like start time, end time and modifier type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ModifiersWithHttpInfoAsync(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTimeModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTimeModifiers", startTimeModifiers));
            }
            if (endTimeModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTimeModifiers", endTimeModifiers));
            }
            if (modifierType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modifierType", modifierType));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ModifiersApi.Modifiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/modifiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Modifiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write modifiers to the Delft-FEWS database Write modifiers to the Delft-FEWS database. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitModifiers">Commit modifiers (optional)</param>
        /// <param name="deleteAllModifiers">Delete all modifiers (optional)</param>
        /// <param name="piModifiersXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modifiers.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object Postmodifiers(string commitModifiers = default(string), string deleteAllModifiers = default(string), string piModifiersXmlContent = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = PostmodifiersWithHttpInfo(commitModifiers, deleteAllModifiers, piModifiersXmlContent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Write modifiers to the Delft-FEWS database Write modifiers to the Delft-FEWS database. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitModifiers">Commit modifiers (optional)</param>
        /// <param name="deleteAllModifiers">Delete all modifiers (optional)</param>
        /// <param name="piModifiersXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modifiers.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PostmodifiersWithHttpInfo(string commitModifiers = default(string), string deleteAllModifiers = default(string), string piModifiersXmlContent = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (commitModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commitModifiers", commitModifiers));
            }
            if (deleteAllModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deleteAllModifiers", deleteAllModifiers));
            }
            if (piModifiersXmlContent != null)
            {
                localVarRequestOptions.FormParameters.Add("piModifiersXmlContent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(piModifiersXmlContent)); // form parameter
            }

            localVarRequestOptions.Operation = "ModifiersApi.Postmodifiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/modifiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Postmodifiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write modifiers to the Delft-FEWS database Write modifiers to the Delft-FEWS database. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitModifiers">Commit modifiers (optional)</param>
        /// <param name="deleteAllModifiers">Delete all modifiers (optional)</param>
        /// <param name="piModifiersXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modifiers.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PostmodifiersAsync(string commitModifiers = default(string), string deleteAllModifiers = default(string), string piModifiersXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await PostmodifiersWithHttpInfoAsync(commitModifiers, deleteAllModifiers, piModifiersXmlContent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Write modifiers to the Delft-FEWS database Write modifiers to the Delft-FEWS database. The application/x-www-form-urlencoded encoding has to be used. Readonly mode has to be disabled in the FewsPiService.properties to allow this functionality.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitModifiers">Commit modifiers (optional)</param>
        /// <param name="deleteAllModifiers">Delete all modifiers (optional)</param>
        /// <param name="piModifiersXmlContent">https://fewsdocs.deltares.nl/schemas/version1.0/pi-schemas/pi_modifiers.xsd (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PostmodifiersWithHttpInfoAsync(string commitModifiers = default(string), string deleteAllModifiers = default(string), string piModifiersXmlContent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (commitModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commitModifiers", commitModifiers));
            }
            if (deleteAllModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deleteAllModifiers", deleteAllModifiers));
            }
            if (piModifiersXmlContent != null)
            {
                localVarRequestOptions.FormParameters.Add("piModifiersXmlContent", Org.OpenAPITools.Client.ClientUtils.ParameterToString(piModifiersXmlContent)); // form parameter
            }

            localVarRequestOptions.Operation = "ModifiersApi.Postmodifiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/modifiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Postmodifiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type Get timeseries modifiers filtered by parameters like start time, end time and modifier type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="onlyActiveModifiers">Only Active Modifiers (optional)</param>
        /// <param name="userDefinedModifierDescription">User Defined Modifier Description (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object Timeseriesmodifiers(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string userId = default(string), List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), string onlyActiveModifiers = default(string), string userDefinedModifierDescription = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = TimeseriesmodifiersWithHttpInfo(startTimeModifiers, endTimeModifiers, modifierType, userId, locationIds, moduleInstanceIds, onlyActiveModifiers, userDefinedModifierDescription, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type Get timeseries modifiers filtered by parameters like start time, end time and modifier type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="onlyActiveModifiers">Only Active Modifiers (optional)</param>
        /// <param name="userDefinedModifierDescription">User Defined Modifier Description (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> TimeseriesmodifiersWithHttpInfo(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string userId = default(string), List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), string onlyActiveModifiers = default(string), string userDefinedModifierDescription = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTimeModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTimeModifiers", startTimeModifiers));
            }
            if (endTimeModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTimeModifiers", endTimeModifiers));
            }
            if (modifierType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modifierType", modifierType));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (onlyActiveModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyActiveModifiers", onlyActiveModifiers));
            }
            if (userDefinedModifierDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "userDefinedModifierDescription", userDefinedModifierDescription));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ModifiersApi.Timeseriesmodifiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/timeseriesmodifiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Timeseriesmodifiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type Get timeseries modifiers filtered by parameters like start time, end time and modifier type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="onlyActiveModifiers">Only Active Modifiers (optional)</param>
        /// <param name="userDefinedModifierDescription">User Defined Modifier Description (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TimeseriesmodifiersAsync(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string userId = default(string), List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), string onlyActiveModifiers = default(string), string userDefinedModifierDescription = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await TimeseriesmodifiersWithHttpInfoAsync(startTimeModifiers, endTimeModifiers, modifierType, userId, locationIds, moduleInstanceIds, onlyActiveModifiers, userDefinedModifierDescription, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get timeseries modifiers filtered by parameters like start time, end time and modifier type Get timeseries modifiers filtered by parameters like start time, end time and modifier type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeModifiers">Start time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTimeModifiers">End time modifiers. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="modifierType">Modifier Type (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="onlyActiveModifiers">Only Active Modifiers (optional)</param>
        /// <param name="userDefinedModifierDescription">User Defined Modifier Description (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TimeseriesmodifiersWithHttpInfoAsync(DateTime? startTimeModifiers = default(DateTime?), DateTime? endTimeModifiers = default(DateTime?), string modifierType = default(string), string userId = default(string), List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), string onlyActiveModifiers = default(string), string userDefinedModifierDescription = default(string), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startTimeModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTimeModifiers", startTimeModifiers));
            }
            if (endTimeModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTimeModifiers", endTimeModifiers));
            }
            if (modifierType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modifierType", modifierType));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (onlyActiveModifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyActiveModifiers", onlyActiveModifiers));
            }
            if (userDefinedModifierDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "userDefinedModifierDescription", userDefinedModifierDescription));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ModifiersApi.Timeseriesmodifiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/timeseriesmodifiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Timeseriesmodifiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
