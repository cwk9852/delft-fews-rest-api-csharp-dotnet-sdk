/*
 * Delft-FEWS Web Services REST API v1
 *
 * Delft-FEWS Web Services REST API v1. For more information see: https://publicwiki.deltares.nl/x/fwNdBw
 *
 * The version of the OpenAPI document: v1-2023-05-03T00:04:18Z
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArchiveApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <remarks>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveAreas</returns>
        PiRestArchiveAreas ArchiveAreas(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <remarks>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveAreas</returns>
        ApiResponse<PiRestArchiveAreas> ArchiveAreasWithHttpInfo(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get attributes with their values that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get attributes with their values that are available in the archive. Optionally the attributes can be filtered by one or more attribute keys, a parameter ids or a location id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">Parameter ids (optional)</param>
        /// <param name="locationIds">Location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="attributes">One or more attributes (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveAttributes</returns>
        PiRestArchiveAttributes ArchiveAttributes(string parameterIds = default(string), string locationIds = default(string), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), List<string> attributes = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get attributes with their values that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get attributes with their values that are available in the archive. Optionally the attributes can be filtered by one or more attribute keys, a parameter ids or a location id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">Parameter ids (optional)</param>
        /// <param name="locationIds">Location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="attributes">One or more attributes (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveAttributes</returns>
        ApiResponse<PiRestArchiveAttributes> ArchiveAttributesWithHttpInfo(string parameterIds = default(string), string locationIds = default(string), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), List<string> attributes = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get locations that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get locations that are available in the archive. Optionally the locations can be filtered by one or more parameter ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, GEO_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArchiveLocations200Response</returns>
        ArchiveLocations200Response ArchiveLocations(List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get locations that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get locations that are available in the archive. Optionally the locations can be filtered by one or more parameter ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, GEO_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArchiveLocations200Response</returns>
        ApiResponse<ArchiveLocations200Response> ArchiveLocationsWithHttpInfo(List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Returns the available module instaces for the netcdf storage
        /// </summary>
        /// <remarks>
        /// Returns the available module instaces for the netcdf storage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestModuleinstances</returns>
        PiRestModuleinstances ArchiveModuleinstances(List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns the available module instaces for the netcdf storage
        /// </summary>
        /// <remarks>
        /// Returns the available module instaces for the netcdf storage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestModuleinstances</returns>
        ApiResponse<PiRestModuleinstances> ArchiveModuleinstancesWithHttpInfo(List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get forecasts with its attributes from the external netcdf storage from the archive
        /// </summary>
        /// <remarks>
        /// Get forecasts with its attributes from the external netcdf storage from the archive.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="requestedAttributes">Requested attributes (optional)</param>
        /// <param name="forecastCount">Forecast count (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveExternalnetcdfstorageforecasts</returns>
        PiRestArchiveExternalnetcdfstorageforecasts ArchiveNetcdfstorageforecasts(DateTime startTime, DateTime endTime, List<string> requestedAttributes = default(List<string>), decimal? forecastCount = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get forecasts with its attributes from the external netcdf storage from the archive
        /// </summary>
        /// <remarks>
        /// Get forecasts with its attributes from the external netcdf storage from the archive.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="requestedAttributes">Requested attributes (optional)</param>
        /// <param name="forecastCount">Forecast count (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveExternalnetcdfstorageforecasts</returns>
        ApiResponse<PiRestArchiveExternalnetcdfstorageforecasts> ArchiveNetcdfstorageforecastsWithHttpInfo(DateTime startTime, DateTime endTime, List<string> requestedAttributes = default(List<string>), decimal? forecastCount = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get parameters that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get parameters that are available in the archive. Optionally the parameters can be filtered by one or more location ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArchiveParameters200Response</returns>
        ArchiveParameters200Response ArchiveParameters(List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get parameters that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get parameters that are available in the archive. Optionally the parameters can be filtered by one or more location ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArchiveParameters200Response</returns>
        ApiResponse<ArchiveParameters200Response> ArchiveParametersWithHttpInfo(List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters
        /// </summary>
        /// <remarks>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source Id (optional)</param>
        /// <param name="areaId">Area Id (optional)</param>
        /// <param name="productCount">Archived Product Count (optional)</param>
        /// <param name="startTime">Start Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="startForecastTime">Start Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="productFileName">An optional product file name. If this is specified only this item will be returned (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY, BINARY_ZIP,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ArchiveProducts(string sourceId = default(string), string areaId = default(string), decimal? productCount = default(decimal?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? productFileName = default(DateTime?), string documentFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters
        /// </summary>
        /// <remarks>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source Id (optional)</param>
        /// <param name="areaId">Area Id (optional)</param>
        /// <param name="productCount">Archived Product Count (optional)</param>
        /// <param name="startTime">Start Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="startForecastTime">Start Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="productFileName">An optional product file name. If this is specified only this item will be returned (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY, BINARY_ZIP,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ArchiveProductsWithHttpInfo(string sourceId = default(string), string areaId = default(string), decimal? productCount = default(decimal?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? productFileName = default(DateTime?), string documentFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// Return a specific product from the archive
        /// </summary>
        /// <remarks>
        /// Return a specific product from the archive. The relative path in the archive will be used as the id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relativePath"> the relative path of the product in the archive (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ArchiveProductsId(string relativePath = default(string), string documentFormat = default(string), int operationIndex = 0);

        /// <summary>
        /// Return a specific product from the archive
        /// </summary>
        /// <remarks>
        /// Return a specific product from the archive. The relative path in the archive will be used as the id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relativePath"> the relative path of the product in the archive (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ArchiveProductsIdWithHttpInfo(string relativePath = default(string), string documentFormat = default(string), int operationIndex = 0);
        /// <summary>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startForecastTime">Start Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveProductsmetadata</returns>
        PiRestArchiveProductsmetadata ArchiveProductsmetadata(DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startForecastTime">Start Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveProductsmetadata</returns>
        ApiResponse<PiRestArchiveProductsmetadata> ArchiveProductsmetadataWithHttpInfo(DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <remarks>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveSources</returns>
        PiRestArchiveSources ArchiveSources(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <remarks>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveSources</returns>
        ApiResponse<PiRestArchiveSources> ArchiveSourcesWithHttpInfo(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// upload new products to the archive
        /// </summary>
        /// <remarks>
        /// upload new products to the archive. The multipart/form-data encoding has to be used. The metaData.xml will be automatically generated. It is only possible to upload a single product file each time this endpoint is used.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeZero"> time zero of the uploaded product. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="areaId">area id of the uploaded product (optional)</param>
        /// <param name="sourceId">source id of the uploaded product (optional)</param>
        /// <param name="subFolder">The sub folder in which the product will be stored. This can be used as an folder to identify the product easier (optional)</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string PostArchiveProducts(DateTime? timeZero = default(DateTime?), string areaId = default(string), string sourceId = default(string), string subFolder = default(string), string file = default(string), int operationIndex = 0);

        /// <summary>
        /// upload new products to the archive
        /// </summary>
        /// <remarks>
        /// upload new products to the archive. The multipart/form-data encoding has to be used. The metaData.xml will be automatically generated. It is only possible to upload a single product file each time this endpoint is used.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeZero"> time zero of the uploaded product. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="areaId">area id of the uploaded product (optional)</param>
        /// <param name="sourceId">source id of the uploaded product (optional)</param>
        /// <param name="subFolder">The sub folder in which the product will be stored. This can be used as an folder to identify the product easier (optional)</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostArchiveProductsWithHttpInfo(DateTime? timeZero = default(DateTime?), string areaId = default(string), string sourceId = default(string), string subFolder = default(string), string file = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArchiveApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <remarks>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveAreas</returns>
        System.Threading.Tasks.Task<PiRestArchiveAreas> ArchiveAreasAsync(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <remarks>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveAreas)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestArchiveAreas>> ArchiveAreasWithHttpInfoAsync(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get attributes with their values that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get attributes with their values that are available in the archive. Optionally the attributes can be filtered by one or more attribute keys, a parameter ids or a location id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">Parameter ids (optional)</param>
        /// <param name="locationIds">Location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="attributes">One or more attributes (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveAttributes</returns>
        System.Threading.Tasks.Task<PiRestArchiveAttributes> ArchiveAttributesAsync(string parameterIds = default(string), string locationIds = default(string), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), List<string> attributes = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get attributes with their values that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get attributes with their values that are available in the archive. Optionally the attributes can be filtered by one or more attribute keys, a parameter ids or a location id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">Parameter ids (optional)</param>
        /// <param name="locationIds">Location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="attributes">One or more attributes (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveAttributes)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestArchiveAttributes>> ArchiveAttributesWithHttpInfoAsync(string parameterIds = default(string), string locationIds = default(string), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), List<string> attributes = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get locations that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get locations that are available in the archive. Optionally the locations can be filtered by one or more parameter ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, GEO_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArchiveLocations200Response</returns>
        System.Threading.Tasks.Task<ArchiveLocations200Response> ArchiveLocationsAsync(List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get locations that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get locations that are available in the archive. Optionally the locations can be filtered by one or more parameter ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, GEO_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArchiveLocations200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArchiveLocations200Response>> ArchiveLocationsWithHttpInfoAsync(List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the available module instaces for the netcdf storage
        /// </summary>
        /// <remarks>
        /// Returns the available module instaces for the netcdf storage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestModuleinstances</returns>
        System.Threading.Tasks.Task<PiRestModuleinstances> ArchiveModuleinstancesAsync(List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the available module instaces for the netcdf storage
        /// </summary>
        /// <remarks>
        /// Returns the available module instaces for the netcdf storage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestModuleinstances)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestModuleinstances>> ArchiveModuleinstancesWithHttpInfoAsync(List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get forecasts with its attributes from the external netcdf storage from the archive
        /// </summary>
        /// <remarks>
        /// Get forecasts with its attributes from the external netcdf storage from the archive.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="requestedAttributes">Requested attributes (optional)</param>
        /// <param name="forecastCount">Forecast count (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveExternalnetcdfstorageforecasts</returns>
        System.Threading.Tasks.Task<PiRestArchiveExternalnetcdfstorageforecasts> ArchiveNetcdfstorageforecastsAsync(DateTime startTime, DateTime endTime, List<string> requestedAttributes = default(List<string>), decimal? forecastCount = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get forecasts with its attributes from the external netcdf storage from the archive
        /// </summary>
        /// <remarks>
        /// Get forecasts with its attributes from the external netcdf storage from the archive.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="requestedAttributes">Requested attributes (optional)</param>
        /// <param name="forecastCount">Forecast count (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveExternalnetcdfstorageforecasts)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestArchiveExternalnetcdfstorageforecasts>> ArchiveNetcdfstorageforecastsWithHttpInfoAsync(DateTime startTime, DateTime endTime, List<string> requestedAttributes = default(List<string>), decimal? forecastCount = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get parameters that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get parameters that are available in the archive. Optionally the parameters can be filtered by one or more location ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArchiveParameters200Response</returns>
        System.Threading.Tasks.Task<ArchiveParameters200Response> ArchiveParametersAsync(List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get parameters that are available in the archive
        /// </summary>
        /// <remarks>
        /// Get parameters that are available in the archive. Optionally the parameters can be filtered by one or more location ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArchiveParameters200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArchiveParameters200Response>> ArchiveParametersWithHttpInfoAsync(List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters
        /// </summary>
        /// <remarks>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source Id (optional)</param>
        /// <param name="areaId">Area Id (optional)</param>
        /// <param name="productCount">Archived Product Count (optional)</param>
        /// <param name="startTime">Start Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="startForecastTime">Start Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="productFileName">An optional product file name. If this is specified only this item will be returned (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY, BINARY_ZIP,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ArchiveProductsAsync(string sourceId = default(string), string areaId = default(string), decimal? productCount = default(decimal?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? productFileName = default(DateTime?), string documentFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters
        /// </summary>
        /// <remarks>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source Id (optional)</param>
        /// <param name="areaId">Area Id (optional)</param>
        /// <param name="productCount">Archived Product Count (optional)</param>
        /// <param name="startTime">Start Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="startForecastTime">Start Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="productFileName">An optional product file name. If this is specified only this item will be returned (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY, BINARY_ZIP,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ArchiveProductsWithHttpInfoAsync(string sourceId = default(string), string areaId = default(string), decimal? productCount = default(decimal?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? productFileName = default(DateTime?), string documentFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return a specific product from the archive
        /// </summary>
        /// <remarks>
        /// Return a specific product from the archive. The relative path in the archive will be used as the id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relativePath"> the relative path of the product in the archive (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ArchiveProductsIdAsync(string relativePath = default(string), string documentFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return a specific product from the archive
        /// </summary>
        /// <remarks>
        /// Return a specific product from the archive. The relative path in the archive will be used as the id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relativePath"> the relative path of the product in the archive (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveProductsIdWithHttpInfoAsync(string relativePath = default(string), string documentFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startForecastTime">Start Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveProductsmetadata</returns>
        System.Threading.Tasks.Task<PiRestArchiveProductsmetadata> ArchiveProductsmetadataAsync(DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startForecastTime">Start Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveProductsmetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestArchiveProductsmetadata>> ArchiveProductsmetadataWithHttpInfoAsync(DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <remarks>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveSources</returns>
        System.Threading.Tasks.Task<PiRestArchiveSources> ArchiveSourcesAsync(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <remarks>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveSources)</returns>
        System.Threading.Tasks.Task<ApiResponse<PiRestArchiveSources>> ArchiveSourcesWithHttpInfoAsync(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// upload new products to the archive
        /// </summary>
        /// <remarks>
        /// upload new products to the archive. The multipart/form-data encoding has to be used. The metaData.xml will be automatically generated. It is only possible to upload a single product file each time this endpoint is used.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeZero"> time zero of the uploaded product. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="areaId">area id of the uploaded product (optional)</param>
        /// <param name="sourceId">source id of the uploaded product (optional)</param>
        /// <param name="subFolder">The sub folder in which the product will be stored. This can be used as an folder to identify the product easier (optional)</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostArchiveProductsAsync(DateTime? timeZero = default(DateTime?), string areaId = default(string), string sourceId = default(string), string subFolder = default(string), string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// upload new products to the archive
        /// </summary>
        /// <remarks>
        /// upload new products to the archive. The multipart/form-data encoding has to be used. The metaData.xml will be automatically generated. It is only possible to upload a single product file each time this endpoint is used.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeZero"> time zero of the uploaded product. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="areaId">area id of the uploaded product (optional)</param>
        /// <param name="sourceId">source id of the uploaded product (optional)</param>
        /// <param name="subFolder">The sub folder in which the product will be stored. This can be used as an folder to identify the product easier (optional)</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostArchiveProductsWithHttpInfoAsync(DateTime? timeZero = default(DateTime?), string areaId = default(string), string sourceId = default(string), string subFolder = default(string), string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArchiveApi : IArchiveApiSync, IArchiveApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArchiveApi : IArchiveApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArchiveApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArchiveApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArchiveApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArchiveApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ArchiveApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveAreas</returns>
        public PiRestArchiveAreas ArchiveAreas(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveAreas> localVarResponse = ArchiveAreasWithHttpInfo(documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveAreas</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestArchiveAreas> ArchiveAreasWithHttpInfo(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveAreas";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestArchiveAreas>("/archive/areas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveAreas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveAreas</returns>
        public async System.Threading.Tasks.Task<PiRestArchiveAreas> ArchiveAreasAsync(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveAreas> localVarResponse = await ArchiveAreasWithHttpInfoAsync(documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the available areas for the open archive, netcdf-storage and the archive database Returns the available areas for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveAreas)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestArchiveAreas>> ArchiveAreasWithHttpInfoAsync(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveAreas";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestArchiveAreas>("/archive/areas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveAreas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get attributes with their values that are available in the archive Get attributes with their values that are available in the archive. Optionally the attributes can be filtered by one or more attribute keys, a parameter ids or a location id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">Parameter ids (optional)</param>
        /// <param name="locationIds">Location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="attributes">One or more attributes (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveAttributes</returns>
        public PiRestArchiveAttributes ArchiveAttributes(string parameterIds = default(string), string locationIds = default(string), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), List<string> attributes = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveAttributes> localVarResponse = ArchiveAttributesWithHttpInfo(parameterIds, locationIds, moduleInstanceIds, areaIds, sourceIds, attributes, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get attributes with their values that are available in the archive Get attributes with their values that are available in the archive. Optionally the attributes can be filtered by one or more attribute keys, a parameter ids or a location id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">Parameter ids (optional)</param>
        /// <param name="locationIds">Location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="attributes">One or more attributes (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveAttributes</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestArchiveAttributes> ArchiveAttributesWithHttpInfo(string parameterIds = default(string), string locationIds = default(string), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), List<string> attributes = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parameterIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parameterIds", parameterIds));
            }
            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locationIds", locationIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (areaIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "areaIds", areaIds));
            }
            if (sourceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "sourceIds", sourceIds));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "attributes", attributes));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveAttributes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestArchiveAttributes>("/archive/attributes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveAttributes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get attributes with their values that are available in the archive Get attributes with their values that are available in the archive. Optionally the attributes can be filtered by one or more attribute keys, a parameter ids or a location id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">Parameter ids (optional)</param>
        /// <param name="locationIds">Location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="attributes">One or more attributes (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveAttributes</returns>
        public async System.Threading.Tasks.Task<PiRestArchiveAttributes> ArchiveAttributesAsync(string parameterIds = default(string), string locationIds = default(string), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), List<string> attributes = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveAttributes> localVarResponse = await ArchiveAttributesWithHttpInfoAsync(parameterIds, locationIds, moduleInstanceIds, areaIds, sourceIds, attributes, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get attributes with their values that are available in the archive Get attributes with their values that are available in the archive. Optionally the attributes can be filtered by one or more attribute keys, a parameter ids or a location id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">Parameter ids (optional)</param>
        /// <param name="locationIds">Location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="attributes">One or more attributes (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveAttributes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestArchiveAttributes>> ArchiveAttributesWithHttpInfoAsync(string parameterIds = default(string), string locationIds = default(string), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), List<string> attributes = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parameterIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parameterIds", parameterIds));
            }
            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locationIds", locationIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (areaIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "areaIds", areaIds));
            }
            if (sourceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "sourceIds", sourceIds));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "attributes", attributes));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveAttributes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestArchiveAttributes>("/archive/attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveAttributes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get locations that are available in the archive Get locations that are available in the archive. Optionally the locations can be filtered by one or more parameter ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, GEO_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArchiveLocations200Response</returns>
        public ArchiveLocations200Response ArchiveLocations(List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ArchiveLocations200Response> localVarResponse = ArchiveLocationsWithHttpInfo(parameterIds, moduleInstanceIds, areaIds, sourceIds, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get locations that are available in the archive Get locations that are available in the archive. Optionally the locations can be filtered by one or more parameter ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, GEO_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArchiveLocations200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ArchiveLocations200Response> ArchiveLocationsWithHttpInfo(List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parameterIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "parameterIds", parameterIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (areaIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "areaIds", areaIds));
            }
            if (sourceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "sourceIds", sourceIds));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArchiveLocations200Response>("/archive/locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get locations that are available in the archive Get locations that are available in the archive. Optionally the locations can be filtered by one or more parameter ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, GEO_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArchiveLocations200Response</returns>
        public async System.Threading.Tasks.Task<ArchiveLocations200Response> ArchiveLocationsAsync(List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ArchiveLocations200Response> localVarResponse = await ArchiveLocationsWithHttpInfoAsync(parameterIds, moduleInstanceIds, areaIds, sourceIds, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get locations that are available in the archive Get locations that are available in the archive. Optionally the locations can be filtered by one or more parameter ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, GEO_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArchiveLocations200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ArchiveLocations200Response>> ArchiveLocationsWithHttpInfoAsync(List<string> parameterIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parameterIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "parameterIds", parameterIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (areaIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "areaIds", areaIds));
            }
            if (sourceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "sourceIds", sourceIds));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArchiveLocations200Response>("/archive/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the available module instaces for the netcdf storage Returns the available module instaces for the netcdf storage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestModuleinstances</returns>
        public PiRestModuleinstances ArchiveModuleinstances(List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestModuleinstances> localVarResponse = ArchiveModuleinstancesWithHttpInfo(locationIds, parameterIds, areaIds, sourceIds, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the available module instaces for the netcdf storage Returns the available module instaces for the netcdf storage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestModuleinstances</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestModuleinstances> ArchiveModuleinstancesWithHttpInfo(List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (parameterIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "parameterIds", parameterIds));
            }
            if (areaIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "areaIds", areaIds));
            }
            if (sourceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "sourceIds", sourceIds));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveModuleinstances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestModuleinstances>("/archive/moduleinstances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveModuleinstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the available module instaces for the netcdf storage Returns the available module instaces for the netcdf storage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestModuleinstances</returns>
        public async System.Threading.Tasks.Task<PiRestModuleinstances> ArchiveModuleinstancesAsync(List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestModuleinstances> localVarResponse = await ArchiveModuleinstancesWithHttpInfoAsync(locationIds, parameterIds, areaIds, sourceIds, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the available module instaces for the netcdf storage Returns the available module instaces for the netcdf storage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="parameterIds">One or more parameter ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestModuleinstances)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestModuleinstances>> ArchiveModuleinstancesWithHttpInfoAsync(List<string> locationIds = default(List<string>), List<string> parameterIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (parameterIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "parameterIds", parameterIds));
            }
            if (areaIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "areaIds", areaIds));
            }
            if (sourceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "sourceIds", sourceIds));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveModuleinstances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestModuleinstances>("/archive/moduleinstances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveModuleinstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get forecasts with its attributes from the external netcdf storage from the archive Get forecasts with its attributes from the external netcdf storage from the archive.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="requestedAttributes">Requested attributes (optional)</param>
        /// <param name="forecastCount">Forecast count (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveExternalnetcdfstorageforecasts</returns>
        public PiRestArchiveExternalnetcdfstorageforecasts ArchiveNetcdfstorageforecasts(DateTime startTime, DateTime endTime, List<string> requestedAttributes = default(List<string>), decimal? forecastCount = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveExternalnetcdfstorageforecasts> localVarResponse = ArchiveNetcdfstorageforecastsWithHttpInfo(startTime, endTime, requestedAttributes, forecastCount, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get forecasts with its attributes from the external netcdf storage from the archive Get forecasts with its attributes from the external netcdf storage from the archive.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="requestedAttributes">Requested attributes (optional)</param>
        /// <param name="forecastCount">Forecast count (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveExternalnetcdfstorageforecasts</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestArchiveExternalnetcdfstorageforecasts> ArchiveNetcdfstorageforecastsWithHttpInfo(DateTime startTime, DateTime endTime, List<string> requestedAttributes = default(List<string>), decimal? forecastCount = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestedAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "requestedAttributes", requestedAttributes));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (forecastCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "forecastCount", forecastCount));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveNetcdfstorageforecasts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestArchiveExternalnetcdfstorageforecasts>("/archive/netcdfstorageforecasts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveNetcdfstorageforecasts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get forecasts with its attributes from the external netcdf storage from the archive Get forecasts with its attributes from the external netcdf storage from the archive.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="requestedAttributes">Requested attributes (optional)</param>
        /// <param name="forecastCount">Forecast count (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveExternalnetcdfstorageforecasts</returns>
        public async System.Threading.Tasks.Task<PiRestArchiveExternalnetcdfstorageforecasts> ArchiveNetcdfstorageforecastsAsync(DateTime startTime, DateTime endTime, List<string> requestedAttributes = default(List<string>), decimal? forecastCount = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveExternalnetcdfstorageforecasts> localVarResponse = await ArchiveNetcdfstorageforecastsWithHttpInfoAsync(startTime, endTime, requestedAttributes, forecastCount, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get forecasts with its attributes from the external netcdf storage from the archive Get forecasts with its attributes from the external netcdf storage from the archive.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Start time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="endTime">End time. Format: yyyy-MM-ddTHH:mm:ssZ</param>
        /// <param name="requestedAttributes">Requested attributes (optional)</param>
        /// <param name="forecastCount">Forecast count (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveExternalnetcdfstorageforecasts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestArchiveExternalnetcdfstorageforecasts>> ArchiveNetcdfstorageforecastsWithHttpInfoAsync(DateTime startTime, DateTime endTime, List<string> requestedAttributes = default(List<string>), decimal? forecastCount = default(decimal?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestedAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "requestedAttributes", requestedAttributes));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (forecastCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "forecastCount", forecastCount));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveNetcdfstorageforecasts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestArchiveExternalnetcdfstorageforecasts>("/archive/netcdfstorageforecasts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveNetcdfstorageforecasts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get parameters that are available in the archive Get parameters that are available in the archive. Optionally the parameters can be filtered by one or more location ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArchiveParameters200Response</returns>
        public ArchiveParameters200Response ArchiveParameters(List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ArchiveParameters200Response> localVarResponse = ArchiveParametersWithHttpInfo(locationIds, moduleInstanceIds, areaIds, sourceIds, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get parameters that are available in the archive Get parameters that are available in the archive. Optionally the parameters can be filtered by one or more location ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArchiveParameters200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ArchiveParameters200Response> ArchiveParametersWithHttpInfo(List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (areaIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "areaIds", areaIds));
            }
            if (sourceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "sourceIds", sourceIds));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveParameters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArchiveParameters200Response>("/archive/parameters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get parameters that are available in the archive Get parameters that are available in the archive. Optionally the parameters can be filtered by one or more location ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArchiveParameters200Response</returns>
        public async System.Threading.Tasks.Task<ArchiveParameters200Response> ArchiveParametersAsync(List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ArchiveParameters200Response> localVarResponse = await ArchiveParametersWithHttpInfoAsync(locationIds, moduleInstanceIds, areaIds, sourceIds, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get parameters that are available in the archive Get parameters that are available in the archive. Optionally the parameters can be filtered by one or more location ids or archive attributes. Archive attributes can be added in the following format: attribute(key)&#x3D;value. Attributes are passed by passing the key as an argument to the attribute() parameter and the value as parameter value. For example attribute(storageId)&#x3D;storageA.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationIds">One or more location ids (optional)</param>
        /// <param name="moduleInstanceIds">One or more module instance ids (optional)</param>
        /// <param name="areaIds">One or more area ids (optional)</param>
        /// <param name="sourceIds">One or more source ids (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_XML, PI_JSON, NAME_LIST, DD_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArchiveParameters200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ArchiveParameters200Response>> ArchiveParametersWithHttpInfoAsync(List<string> locationIds = default(List<string>), List<string> moduleInstanceIds = default(List<string>), List<string> areaIds = default(List<string>), List<string> sourceIds = default(List<string>), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "locationIds", locationIds));
            }
            if (moduleInstanceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "moduleInstanceIds", moduleInstanceIds));
            }
            if (areaIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "areaIds", areaIds));
            }
            if (sourceIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "sourceIds", sourceIds));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveParameters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArchiveParameters200Response>("/archive/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source Id (optional)</param>
        /// <param name="areaId">Area Id (optional)</param>
        /// <param name="productCount">Archived Product Count (optional)</param>
        /// <param name="startTime">Start Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="startForecastTime">Start Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="productFileName">An optional product file name. If this is specified only this item will be returned (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY, BINARY_ZIP,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ArchiveProducts(string sourceId = default(string), string areaId = default(string), decimal? productCount = default(decimal?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? productFileName = default(DateTime?), string documentFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = ArchiveProductsWithHttpInfo(sourceId, areaId, productCount, startTime, endTime, startForecastTime, endForecastTime, productFileName, documentFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source Id (optional)</param>
        /// <param name="areaId">Area Id (optional)</param>
        /// <param name="productCount">Archived Product Count (optional)</param>
        /// <param name="startTime">Start Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="startForecastTime">Start Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="productFileName">An optional product file name. If this is specified only this item will be returned (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY, BINARY_ZIP,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> ArchiveProductsWithHttpInfo(string sourceId = default(string), string areaId = default(string), decimal? productCount = default(decimal?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? productFileName = default(DateTime?), string documentFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            }
            if (areaId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            }
            if (productCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productCount", productCount));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (startForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startForecastTime", startForecastTime));
            }
            if (endForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endForecastTime", endForecastTime));
            }
            if (productFileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productFileName", productFileName));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/archive/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source Id (optional)</param>
        /// <param name="areaId">Area Id (optional)</param>
        /// <param name="productCount">Archived Product Count (optional)</param>
        /// <param name="startTime">Start Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="startForecastTime">Start Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="productFileName">An optional product file name. If this is specified only this item will be returned (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY, BINARY_ZIP,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ArchiveProductsAsync(string sourceId = default(string), string areaId = default(string), decimal? productCount = default(decimal?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? productFileName = default(DateTime?), string documentFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await ArchiveProductsWithHttpInfoAsync(sourceId, areaId, productCount, startTime, endTime, startForecastTime, endForecastTime, productFileName, documentFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters Returns a zip-file with the requested products or a binary file if only one file is requested, that are available in the archive filtered by the specified parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source Id (optional)</param>
        /// <param name="areaId">Area Id (optional)</param>
        /// <param name="productCount">Archived Product Count (optional)</param>
        /// <param name="startTime">Start Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endTime">End Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="startForecastTime">Start Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Time Archive Forecast Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="productFileName">An optional product file name. If this is specified only this item will be returned (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY, BINARY_ZIP,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> ArchiveProductsWithHttpInfoAsync(string sourceId = default(string), string areaId = default(string), decimal? productCount = default(decimal?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), DateTime? productFileName = default(DateTime?), string documentFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            }
            if (areaId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            }
            if (productCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productCount", productCount));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (startForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startForecastTime", startForecastTime));
            }
            if (endForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endForecastTime", endForecastTime));
            }
            if (productFileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productFileName", productFileName));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/archive/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a specific product from the archive Return a specific product from the archive. The relative path in the archive will be used as the id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relativePath"> the relative path of the product in the archive (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ArchiveProductsId(string relativePath = default(string), string documentFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ArchiveProductsIdWithHttpInfo(relativePath, documentFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a specific product from the archive Return a specific product from the archive. The relative path in the archive will be used as the id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relativePath"> the relative path of the product in the archive (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ArchiveProductsIdWithHttpInfo(string relativePath = default(string), string documentFormat = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (relativePath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "relativePath", relativePath));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveProductsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/archive/products/id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveProductsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a specific product from the archive Return a specific product from the archive. The relative path in the archive will be used as the id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relativePath"> the relative path of the product in the archive (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ArchiveProductsIdAsync(string relativePath = default(string), string documentFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ArchiveProductsIdWithHttpInfoAsync(relativePath, documentFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a specific product from the archive Return a specific product from the archive. The relative path in the archive will be used as the id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relativePath"> the relative path of the product in the archive (optional)</param>
        /// <param name="documentFormat">Supported Document Format: BINARY,  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ArchiveProductsIdWithHttpInfoAsync(string relativePath = default(string), string documentFormat = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (relativePath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "relativePath", relativePath));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveProductsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/archive/products/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveProductsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startForecastTime">Start Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveProductsmetadata</returns>
        public PiRestArchiveProductsmetadata ArchiveProductsmetadata(DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveProductsmetadata> localVarResponse = ArchiveProductsmetadataWithHttpInfo(startForecastTime, endForecastTime, documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startForecastTime">Start Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveProductsmetadata</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestArchiveProductsmetadata> ArchiveProductsmetadataWithHttpInfo(DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startForecastTime", startForecastTime));
            }
            if (endForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endForecastTime", endForecastTime));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveProductsmetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestArchiveProductsmetadata>("/archive/productsmetadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveProductsmetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startForecastTime">Start Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveProductsmetadata</returns>
        public async System.Threading.Tasks.Task<PiRestArchiveProductsmetadata> ArchiveProductsmetadataAsync(DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveProductsmetadata> localVarResponse = await ArchiveProductsmetadataWithHttpInfoAsync(startForecastTime, endForecastTime, documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime Returns a list of metadata found in the archive, where the T0 falls between the startForecastTime and endForecastTime.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startForecastTime">Start Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="endForecastTime">End Forecast Time Archive Search Period. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveProductsmetadata)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestArchiveProductsmetadata>> ArchiveProductsmetadataWithHttpInfoAsync(DateTime? startForecastTime = default(DateTime?), DateTime? endForecastTime = default(DateTime?), string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startForecastTime", startForecastTime));
            }
            if (endForecastTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endForecastTime", endForecastTime));
            }
            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveProductsmetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestArchiveProductsmetadata>("/archive/productsmetadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveProductsmetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PiRestArchiveSources</returns>
        public PiRestArchiveSources ArchiveSources(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveSources> localVarResponse = ArchiveSourcesWithHttpInfo(documentFormat, documentVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PiRestArchiveSources</returns>
        public Org.OpenAPITools.Client.ApiResponse<PiRestArchiveSources> ArchiveSourcesWithHttpInfo(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PiRestArchiveSources>("/archive/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PiRestArchiveSources</returns>
        public async System.Threading.Tasks.Task<PiRestArchiveSources> ArchiveSourcesAsync(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PiRestArchiveSources> localVarResponse = await ArchiveSourcesWithHttpInfoAsync(documentFormat, documentVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the available sources for the open archive, netcdf-storage and the archive database Returns the available sources for the open archive, netcdf-storage and the archive database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFormat">Supported Document Format: PI_JSON,  (optional)</param>
        /// <param name="documentVersion">Document Version. Latest version is: 1.33 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PiRestArchiveSources)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PiRestArchiveSources>> ArchiveSourcesWithHttpInfoAsync(string documentFormat = default(string), string documentVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (documentFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentFormat", documentFormat));
            }
            if (documentVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentVersion", documentVersion));
            }

            localVarRequestOptions.Operation = "ArchiveApi.ArchiveSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PiRestArchiveSources>("/archive/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// upload new products to the archive upload new products to the archive. The multipart/form-data encoding has to be used. The metaData.xml will be automatically generated. It is only possible to upload a single product file each time this endpoint is used.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeZero"> time zero of the uploaded product. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="areaId">area id of the uploaded product (optional)</param>
        /// <param name="sourceId">source id of the uploaded product (optional)</param>
        /// <param name="subFolder">The sub folder in which the product will be stored. This can be used as an folder to identify the product easier (optional)</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string PostArchiveProducts(DateTime? timeZero = default(DateTime?), string areaId = default(string), string sourceId = default(string), string subFolder = default(string), string file = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = PostArchiveProductsWithHttpInfo(timeZero, areaId, sourceId, subFolder, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// upload new products to the archive upload new products to the archive. The multipart/form-data encoding has to be used. The metaData.xml will be automatically generated. It is only possible to upload a single product file each time this endpoint is used.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeZero"> time zero of the uploaded product. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="areaId">area id of the uploaded product (optional)</param>
        /// <param name="sourceId">source id of the uploaded product (optional)</param>
        /// <param name="subFolder">The sub folder in which the product will be stored. This can be used as an folder to identify the product easier (optional)</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> PostArchiveProductsWithHttpInfo(DateTime? timeZero = default(DateTime?), string areaId = default(string), string sourceId = default(string), string subFolder = default(string), string file = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (timeZero != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeZero", timeZero));
            }
            if (areaId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            }
            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            }
            if (subFolder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "subFolder", subFolder));
            }
            if (file != null)
            {
                localVarRequestOptions.FormParameters.Add("file", Org.OpenAPITools.Client.ClientUtils.ParameterToString(file)); // form parameter
            }

            localVarRequestOptions.Operation = "ArchiveApi.PostArchiveProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/archive/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostArchiveProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// upload new products to the archive upload new products to the archive. The multipart/form-data encoding has to be used. The metaData.xml will be automatically generated. It is only possible to upload a single product file each time this endpoint is used.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeZero"> time zero of the uploaded product. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="areaId">area id of the uploaded product (optional)</param>
        /// <param name="sourceId">source id of the uploaded product (optional)</param>
        /// <param name="subFolder">The sub folder in which the product will be stored. This can be used as an folder to identify the product easier (optional)</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostArchiveProductsAsync(DateTime? timeZero = default(DateTime?), string areaId = default(string), string sourceId = default(string), string subFolder = default(string), string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await PostArchiveProductsWithHttpInfoAsync(timeZero, areaId, sourceId, subFolder, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// upload new products to the archive upload new products to the archive. The multipart/form-data encoding has to be used. The metaData.xml will be automatically generated. It is only possible to upload a single product file each time this endpoint is used.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeZero"> time zero of the uploaded product. Format: yyyy-MM-ddTHH:mm:ssZ (optional)</param>
        /// <param name="areaId">area id of the uploaded product (optional)</param>
        /// <param name="sourceId">source id of the uploaded product (optional)</param>
        /// <param name="subFolder">The sub folder in which the product will be stored. This can be used as an folder to identify the product easier (optional)</param>
        /// <param name="file">file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> PostArchiveProductsWithHttpInfoAsync(DateTime? timeZero = default(DateTime?), string areaId = default(string), string sourceId = default(string), string subFolder = default(string), string file = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "plain/text"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (timeZero != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeZero", timeZero));
            }
            if (areaId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "areaId", areaId));
            }
            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            }
            if (subFolder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "subFolder", subFolder));
            }
            if (file != null)
            {
                localVarRequestOptions.FormParameters.Add("file", Org.OpenAPITools.Client.ClientUtils.ParameterToString(file)); // form parameter
            }

            localVarRequestOptions.Operation = "ArchiveApi.PostArchiveProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/archive/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostArchiveProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
